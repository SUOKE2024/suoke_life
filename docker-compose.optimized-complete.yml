version: '3.8'

services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: suoke_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - suoke_network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: suoke_postgres
    environment:
      POSTGRES_DB: suoke_life
      POSTGRES_USER: suoke_user
      POSTGRES_PASSWORD: suoke_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U suoke_user -d suoke_life"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - suoke_network

  # API网关
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.optimized
    container_name: suoke_api_gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - XIAOAI_SERVICE_URL=http://xiaoai-service:8001
      - XIAOKE_SERVICE_URL=http://xiaoke-service:8002
      - LAOKE_SERVICE_URL=http://laoke-service:8003
      - SOER_SERVICE_URL=http://soer-service:8004
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped

  # 小艾智能体服务
  xiaoai-service:
    build:
      context: ./services/agent-services/xiaoai-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_xiaoai
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - HOST=0.0.0.0
      - PORT=8001
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 小克智能体服务
  xiaoke-service:
    build:
      context: ./services/agent-services/xiaoke-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_xiaoke
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - HOST=0.0.0.0
      - PORT=8002
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 老克智能体服务
  laoke-service:
    build:
      context: ./services/agent-services/laoke-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_laoke
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - HOST=0.0.0.0
      - PORT=8003
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 索儿智能体服务
  soer-service:
    build:
      context: ./services/agent-services/soer-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_soer
    ports:
      - "8004:8004"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - HOST=0.0.0.0
      - PORT=8004
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 认证服务
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_auth
    ports:
      - "8010:8010"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - JWT_SECRET=your_jwt_secret_key_here
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped

  # 用户服务
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_user
    ports:
      - "8011:8011"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped

  # 健康数据服务
  health-data-service:
    build:
      context: ./services/health-data-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_health_data
    ports:
      - "8012:8012"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped

  # 医疗资源服务
  medical-resource-service:
    build:
      context: ./services/medical-resource-service
      dockerfile: Dockerfile.optimized
    container_name: suoke_medical_resource
    ports:
      - "8013:8013"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
    depends_on:
      - redis
      - postgres
    networks:
      - suoke_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: suoke_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - suoke_network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: suoke_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - suoke_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: suoke_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - suoke_network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  suoke_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 