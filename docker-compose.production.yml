version: '3.8'

services:
  # API网关
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 认证服务
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVICE_URL=${EMAIL_SERVICE_URL}
      - SMS_SERVICE_URL=${SMS_SERVICE_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 用户服务
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - FILE_STORAGE_URL=${FILE_STORAGE_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 小艾智能体服务
  xiaoai-service:
    build:
      context: ./services/agent-services/xiaoai-service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - AI_MODEL_URL=${AI_MODEL_URL}
      - GRPC_PORT=50051
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # 小克智能体服务
  xiaoke-service:
    build:
      context: ./services/agent-services/xiaoke-service
      dockerfile: Dockerfile
    ports:
      - "50052:50052"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - GRPC_PORT=50052
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50052"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # 老克智能体服务
  laoke-service:
    build:
      context: ./services/agent-services/laoke-service
      dockerfile: Dockerfile
    ports:
      - "50053:50053"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - GRPC_PORT=50053
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50053"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # 索儿智能体服务
  soer-service:
    build:
      context: ./services/agent-services/soer-service
      dockerfile: Dockerfile
    ports:
      - "50054:50054"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - GRPC_PORT=50054
    depends_on:
      - postgres
      - redis
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50054"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # 健康数据服务
  health-data-service:
    build:
      context: ./services/health-data-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongo:27017/suoke_health_data
    depends_on:
      - postgres
      - redis
      - mongo
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # 区块链服务
  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/suoke_life
      - BLOCKCHAIN_NETWORK=${BLOCKCHAIN_NETWORK}
      - PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
    depends_on:
      - postgres
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # RAG服务
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  suoke-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 