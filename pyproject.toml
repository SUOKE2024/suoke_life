[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "suoke-accessibility-service"
version = "2.0.0"
description = "索克生活无障碍服务 - 提供全方位的AI驱动无障碍功能支持"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
maintainers = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
keywords = ["accessibility", "ai", "health", "suoke", "tcm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.13"
dependencies = [
    # FastAPI 核心框架
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.11.5",
    "pydantic-settings>=2.1.0",
    
    # 异步和并发
    "asyncio-mqtt>=0.16.1",
    "aiofiles>=23.2.1",
    "aioredis>=2.0.1",
    
    # HTTP 客户端
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    
    # 数据库
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.30.0",
    
    # AI 和机器学习
    "torch>=2.4.0",
    "torchvision>=0.19.0",
    "torchaudio>=2.4.0",
    "transformers>=4.45.0",
    "accelerate>=0.34.0",
    "peft>=0.12.0",
    "datasets>=2.21.0",
    "tokenizers>=0.19.0",
    "sentence-transformers>=3.0.0",
    "langchain>=0.2.0",
    "langchain-community>=0.2.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "openai>=1.40.0",
    "anthropic>=0.34.0",
    "google-generativeai>=0.7.0",
    "ollama>=0.3.0",
    # "llama-cpp-python>=0.2.0",  # 需要编译，暂时移除
    "opencv-python>=4.10.0",
    # "openai-whisper>=20231117",  # 暂时移除，Python 3.13兼容性问题
    "ultralytics>=8.2.0",
    "onnx>=1.16.0",
    "onnxruntime>=1.18.0",
    
    # 科学计算和数据处理
    "numpy>=1.26.0",
    "pandas>=2.1.4",
    "scipy>=1.11.4",
    "scikit-learn>=1.3.2",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "jupyter>=1.0.0",
    "ipython>=8.18.0",
    
    # 图像和视频处理 (替代mediapipe)
    "pillow>=10.1.0",
    "imageio>=2.33.0",
    "av>=11.0.0",
    
    # 音频处理
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    
    # 自然语言处理
    "spacy>=3.7.2",
    "nltk>=3.8.1",
    "jieba>=0.42.1",
    "pypinyin>=0.50.0",
    
    # 中医相关 (可选依赖)
    # "tcmpy>=0.1.0",  # 如果可用
    # "acupuncture-points>=1.0.0",  # 如果可用
    
    # 区块链和加密
    "web3>=6.15.1",
    "cryptography>=41.0.8",
    "pycryptodome>=3.19.0",
    
    # 时间序列和预测
    "prophet>=1.1.5",
    "statsmodels>=0.14.1",
    # "pmdarima>=2.0.4",  # 构建问题，暂时移除
    
    # 配置和环境
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "click>=8.1.7",
    
    # 测试和质量
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    
    # 监控和日志
    "loguru>=0.7.2",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    
    # 缓存和存储
    "redis>=5.0.1",
    "pymongo>=4.6.0",
    "elasticsearch>=8.11.0",
    
    # 消息队列
    "celery>=5.3.4",
    "kombu>=5.3.4",
    
    # 工具和实用程序
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "xmltodict>=0.13.0",
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "phonenumbers>=8.13.26",
    "qrcode[pil]>=7.4.2",
    "barcode>=1.0.1",
    "reportlab>=4.0.7",
    "openpyxl>=3.1.2",
    "xlsxwriter>=3.1.9",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "coverage[toml]>=7.3.0",
    
    # 代码质量
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    
    # 文档
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    
    # 调试和分析
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
]

gpu = [
    # GPU 加速版本 (仅Linux)
    "bitsandbytes>=0.43.0; platform_system == 'Linux'",
    "vllm>=0.6.0; platform_system == 'Linux'",
    "tensorrt>=10.0.0; platform_system == 'Linux'",
    "torch[cuda]>=2.4.0; platform_system == 'Linux'",
    "torchvision[cuda]>=0.19.0; platform_system == 'Linux'",
    "torchaudio[cuda]>=2.4.0; platform_system == 'Linux'",
    "cupy-cuda12x>=13.0.0; platform_system == 'Linux'",
    "nvidia-ml-py>=12.560.0; platform_system == 'Linux'",
    "tensorrt-cu12>=10.0.0; platform_system == 'Linux'",
]

media = [
    # 音视频处理 (平台特定)
    "pyaudio>=0.2.11; platform_system != 'Darwin'",
    "face-recognition>=1.3.0; platform_system != 'Darwin'",
    "dlib>=19.24.0; platform_system != 'Darwin'",
]

tcm = [
    # 中医相关 (可选)
    "tcmpy>=0.1.0",
    "acupuncture-points>=1.0.0",
]

production = [
    # 生产环境依赖
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
    "newrelic>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://docs.suoke.life/accessibility"
Repository = "https://github.com/SUOKE2024/suoke_life"
Issues = "https://github.com/SUOKE2024/suoke_life/issues"
Changelog = "https://github.com/SUOKE2024/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
accessibility-service = "accessibility_service.cmd.server.main:main"
accessibility-cli = "accessibility_service.cli:main"

[tool.hatch.version]
path = "accessibility_service/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["accessibility_service"]

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["accessibility_service", "suoke_life"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "torch"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ARG001", "S101"]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*",
    "cv2.*",
    "mediapipe.*",
    "whisper.*",
    "ultralytics.*",
    "librosa.*",
    "soundfile.*",
    "pyaudio.*",
    "jieba.*",
    "spacy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=accessibility_service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "ai: marks tests that require AI models",
]

[tool.coverage.run]
source = ["accessibility_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["test", "tests"]
skips = ["B101", "B601"]

[tool.vulture]
exclude = ["test/", "tests/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["_*", "test_*"]
make_whitelist = true
min_confidence = 60
paths = ["accessibility_service"]
sort_by_size = true
verbose = false
