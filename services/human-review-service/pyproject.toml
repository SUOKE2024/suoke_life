[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "suoke-human-review-service"
version = "1.0.0"
description = "索克生活人工审核服务 - 提供AI辅助的人工审核和质量控制功能"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
maintainers = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
keywords = ["human-review", "ai-assisted", "quality-control", "microservice", "health", "tcm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.13.3"
dependencies = [
    # FastAPI 核心框架
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # gRPC 通信
    "grpcio>=1.68.0",
    "grpcio-tools>=1.68.0",
    "grpcio-reflection>=1.68.0",
    "grpcio-status>=1.68.0",
    "grpcio-health-checking>=1.68.0",
    "protobuf>=5.28.0",
    
    # 异步和并发
    "asyncio-mqtt>=0.16.1",
    "aiofiles>=23.2.1",
    "aioredis>=2.0.1",
    
    # HTTP 客户端
    "httpx>=0.28.0",
    "aiohttp>=3.11.0",
    
    # 数据库
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.30.0",
    "aiosqlite>=0.20.0",
    
    # AI 和机器学习
    "torch>=2.2.1",
    "torchvision>=0.17.1",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.2",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    
    # 图像和文档处理
    "pillow>=10.1.0",
    "opencv-python>=4.8.1",
    "pypdf2>=3.0.1",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    
    # 自然语言处理
    "nltk>=3.8.1",
    "spacy>=3.7.0",
    "jieba>=0.42.1",
    "textblob>=0.17.1",
    
    # 安全和认证
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=43.0.0",
    "python-multipart>=0.0.12",
    
    # 监控和日志
    "prometheus-client>=0.21.0",
    "structlog>=24.4.0",
    "sentry-sdk[fastapi]>=1.38.0",
    
    # OpenTelemetry 可观测性
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-grpc>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    
    # 配置和环境
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "dynaconf>=3.2.6",
    "click>=8.1.7",
    "rich>=13.9.0",
    
    # 工具库
    "email-validator>=2.2.0",
    "python-dateutil>=2.8.2",
    "pytz>=2024.2",
    "tenacity>=9.0.0",
    "orjson>=3.10.0",
    "celery[redis]>=5.3.0",
    "flower>=2.0.1",
    
    # 消息队列
    "pika>=1.3.2",
    "kombu>=5.3.0",
    
    # 文件存储
    "boto3>=1.34.0",
    "minio>=7.2.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "faker>=30.0.0",
    "factory-boy>=3.3.0",
    
    # 代码质量工具
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "bandit>=1.7.10",
    "safety>=3.2.0",
    
    # 开发工具
    "pre-commit>=4.0.0",
    "commitizen>=3.29.0",
    "ipython>=8.29.0",
    "jupyter>=1.0.0",
    
    # 文档生成
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
    
    # 性能测试
    "locust>=2.32.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
]

gpu = [
    # GPU 加速版本
    "torch[cuda]>=2.2.1",
    "torchvision[cuda]>=0.17.1",
    "cupy-cuda12x>=12.3.0",
]

production = [
    # 生产环境依赖
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
    "newrelic>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://docs.suoke.life/human-review"
Repository = "https://github.com/SUOKE2024/suoke_life"
Issues = "https://github.com/SUOKE2024/suoke_life/issues"
Changelog = "https://github.com/SUOKE2024/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
human-review-service = "cmd.server.main:main"
human-review-cli = "pkg.cli:main"

# UV 包管理器配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
]

[tool.hatch.version]
path = "internal/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["internal", "api", "pkg", "cmd"]

# 现代化代码格式化和检查工具配置
[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "S101", # assert 语句在测试中是必要的
    "S104", # 硬编码绑定到所有接口
    "PLR0913", # 太多参数
    "PLR0915", # 太多语句
    "TRY003", # 避免在raise中指定长消息
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "migrations",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ARG001", "S101", "PLR2004"]
"**/test_*.py" = ["ARG001", "S101", "PLR2004"]

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["human_review_service", "suoke_life"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "torch", "celery"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "cv2.*",
    "jieba.*",
    "spacy.*",
    "nltk.*",
    "textblob.*",
    "sentence_transformers.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "PIL.*",
    "pypdf2.*",
    "docx.*",
    "openpyxl.*",
    "celery.*",
    "flower.*",
    "pika.*",
    "kombu.*",
    "boto3.*",
    "minio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=internal",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "ai: marks tests that require AI models",
    "celery: marks tests that require Celery",
]

[tool.coverage.run]
source = ["internal"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["test", "tests"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "internal/__init__.py",
    "pyproject.toml:version"
] 