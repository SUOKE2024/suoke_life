apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-data-service
  namespace: health-data
  labels:
    app.kubernetes.io/name: health-data-service
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: suoke-life
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: health-data-service
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: health-data-service
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: suoke-life
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: health-data-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: health-data-service
        image: health-data-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: grpc
          containerPort: 50051
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: health-data-service-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: health-data-service-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: health-data-service-secrets
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: health-data-service-secrets
              key: jwt-secret-key
        envFrom:
        - configMapRef:
            name: health-data-service-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - health-data-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-data-nginx
  namespace: health-data
  labels:
    app.kubernetes.io/name: health-data-nginx
    app.kubernetes.io/component: proxy
    app.kubernetes.io/part-of: suoke-life
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: health-data-nginx
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: health-data-nginx
        app.kubernetes.io/component: proxy
        app.kubernetes.io/part-of: suoke-life
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-logs
          mountPath: /var/log/nginx
      volumes:
      - name: nginx-config
        configMap:
          name: health-data-service-nginx-config
      - name: nginx-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: health-data-service
  namespace: suoke
  labels:
    app: health-data-service
spec:
  ports:
  - port: 8004
    targetPort: 8004
    name: http
  - port: 50054
    targetPort: 50054
    name: grpc
  selector:
    app: health-data-service
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-data-config
  namespace: suoke
data:
  db_host: "postgres"
  db_port: "5432"
  db_name: "health_data"
---
apiVersion: v1
kind: Secret
metadata:
  name: health-data-secrets
  namespace: suoke
type: Opaque
data:
  db_user: cG9zdGdyZXM=  # postgres
  db_password: cG9zdGdyZXM=  # postgres
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: health-data-service-ingress
  namespace: suoke
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: api.suoke-life.com
    http:
      paths:
      - path: /health-data(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: health-data-service
            port:
              number: 8004
  tls:
  - hosts:
    - api.suoke-life.com
    secretName: suoke-tls-secret 