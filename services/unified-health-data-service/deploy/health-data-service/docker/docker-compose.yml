version: '3.8'

services:
  # 健康数据服务
  health-data-service:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    container_name: health-data-service
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "50051:50051"  # gRPC端口
    environment:
      # 数据库配置
      DATABASE_URL: postgresql+asyncpg://health_data:health_data_password@postgres:5432/health_data_db
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      DATABASE_POOL_TIMEOUT: 30
      DATABASE_POOL_RECYCLE: 3600
      
      # Redis配置
      REDIS_URL: redis://redis:6379/0
      REDIS_POOL_SIZE: 10
      REDIS_TIMEOUT: 5
      
      # API配置
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_GRPC_PORT: 50051
      API_WORKERS: 4
      API_DEBUG: false
      
      # 安全配置
      SECRET_KEY: your-super-secret-key-change-in-production
      JWT_SECRET_KEY: your-jwt-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # 日志配置
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      LOG_FILE: /app/logs/health_data_service.log
      
      # 监控配置
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      
      # 数据处理配置
      PIPELINE_ENABLED: true
      PIPELINE_WORKERS: 2
      PIPELINE_TIMEOUT: 30
      
      # 缓存配置
      CACHE_TTL: 3600
      CACHE_PREFIX: health_data
    volumes:
      - health_data_logs:/app/logs
      - health_data_data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - health_data_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: health-data-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: health_data_db
      POSTGRES_USER: health_data
      POSTGRES_PASSWORD: health_data_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - health_data_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U health_data -d health_data_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: health-data-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - health_data_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: health-data-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - health-data-service
    networks:
      - health_data_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: health-data-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - health_data_network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: health-data-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - health_data_network

  # 数据库迁移服务（一次性运行）
  migration:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    container_name: health-data-migration
    environment:
      DATABASE_URL: postgresql+asyncpg://health_data:health_data_password@postgres:5432/health_data_db
    command: ["alembic", "upgrade", "head"]
    depends_on:
      - postgres
    networks:
      - health_data_network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  health_data_logs:
    driver: local
  health_data_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  health_data_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 