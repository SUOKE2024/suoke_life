version: '3.8'

services:
  # RAG 服务
  rag-service:
    build:
      context: ../../
      dockerfile: Dockerfile
    container_name: suoke-rag-service
    restart: unless-stopped
    depends_on:
      - milvus-standalone
      - redis
    ports:
      - "8000:8000"  # REST API
      - "50051:50051"  # gRPC API
    volumes:
      - ../../:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_TYPE=redis
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GENERATOR_TYPE=${GENERATOR_TYPE:-openai}
      - ENV=development
    networks:
      - suoke-net

  # Milvus 向量数据库（单机版）
  milvus-standalone:
    image: milvusdb/milvus:v2.3.3-latest
    container_name: milvus-standalone
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus-data:/var/lib/milvus
    command: ["milvus", "run", "standalone"]
    networks:
      - suoke-net

  # etcd (用于Milvus)
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command:
      - etcd
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --data-dir=/etcd
    networks:
      - suoke-net

  # MinIO (用于Milvus)
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio-data:/data
    command: minio server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - suoke-net

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    networks:
      - suoke-net

  # redis UI管理工具 (可选)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - suoke-net

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - suoke-net

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - suoke-net

volumes:
  milvus-data:
  etcd-data:
  minio-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  suoke-net:
    driver: bridge 