syntax = "proto3";

package suoke.rag;

option go_package = "github.com/suokelife/rag-service/api/grpc";

// RAG服务定义
service RAGService {
  // 根据查询检索相关文档
  rpc Retrieve(RetrieveRequest) returns (RetrieveResponse) {}
  
  // 根据查询和相关文档生成回答
  rpc Generate(GenerateRequest) returns (GenerateResponse) {}
  
  // 一站式RAG服务（检索+生成）
  rpc Query(QueryRequest) returns (QueryResponse) {}
  
  // 进行流式查询，返回流式回答
  rpc StreamQuery(QueryRequest) returns (stream StreamResponse) {}
  
  // 添加文档到知识库
  rpc AddDocument(AddDocumentRequest) returns (AddDocumentResponse) {}
  
  // 删除知识库中的文档
  rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse) {}
  
  // 获取健康状态
  rpc Health(HealthRequest) returns (HealthResponse) {}
}

// 文档模型
message Document {
  string id = 1;
  string content = 2;
  map<string, string> metadata = 3;
  double score = 4;
  string source = 5;
}

// 文档引用模型
message DocumentReference {
  string id = 1;
  string title = 2;
  string source = 3;
  string url = 4;
  string snippet = 5;
}

// 检索请求
message RetrieveRequest {
  string query = 1;
  int32 top_k = 2;
  repeated string collection_names = 3;
  map<string, string> metadata_filter = 4;
  double score_threshold = 5;
  bool rerank = 6;
  string user_id = 7;
}

// 检索响应
message RetrieveResponse {
  repeated Document documents = 1;
  double latency_ms = 2;
}

// 生成请求
message GenerateRequest {
  string query = 1;
  repeated Document context_documents = 2;
  string system_prompt = 3;
  map<string, string> generation_params = 4;
  string user_id = 5;
}

// 生成响应
message GenerateResponse {
  string answer = 1;
  repeated DocumentReference references = 2;
  double latency_ms = 3;
}

// 查询请求
message QueryRequest {
  string query = 1;
  int32 top_k = 2;
  string system_prompt = 3;
  repeated string collection_names = 4;
  map<string, string> generation_params = 5;
  map<string, string> metadata_filter = 6;
  string user_id = 7;
}

// 查询响应
message QueryResponse {
  string answer = 1;
  repeated DocumentReference references = 2;
  double retrieval_latency_ms = 3;
  double generation_latency_ms = 4;
  double total_latency_ms = 5;
}

// 流式响应
message StreamResponse {
  string answer_fragment = 1;
  bool is_final = 2;
  repeated DocumentReference references = 3;
}

// 添加文档请求
message AddDocumentRequest {
  Document document = 1;
  string collection_name = 2;
  bool reindex = 3;
}

// 添加文档响应
message AddDocumentResponse {
  string document_id = 1;
  bool success = 2;
  string message = 3;
}

// 删除文档请求
message DeleteDocumentRequest {
  string document_id = 1;
  string collection_name = 2;
}

// 删除文档响应
message DeleteDocumentResponse {
  bool success = 1;
  string message = 2;
}

// 健康检查请求
message HealthRequest {}

// 健康检查响应
message HealthResponse {
  enum ServiceStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  
  ServiceStatus status = 1;
  map<string, string> details = 2;
}