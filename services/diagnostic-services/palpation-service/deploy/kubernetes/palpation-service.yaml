apiVersion: v1
kind: ConfigMap
metadata:
  name: palpation-service-config
  namespace: suoke-ai-np
  labels:
    app.kubernetes.io/name: palpation-service
    app.kubernetes.io/part-of: suoke-life
data:
  config.yaml: |
    service:
      name: "palpation-service"
      version: "0.1.0"
      description: "索克生活APP切诊服务"
      host: "0.0.0.0"
      port: 50053
      debug: false

    logging:
      level: "INFO"
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      file: "logs/palpation-service.log"
      max_size_mb: 100
      backup_count: 5

    monitoring:
      prometheus:
        enabled: true
        port: 51053

    performance:
      max_workers: 10
      timeout_seconds: 30
      connection_pool_size: 10

    database:
      uri: "mongodb://suoke:${MONGO_PASSWORD}@mongodb-service:27017/palpation_service?authSource=admin"
      database: "palpation_service"
      collections:
        pulse_records: "pulse_records"
        pulse_features: "pulse_features"
        abdominal_records: "abdominal_records"
        skin_records: "skin_records"
        user_profiles: "user_profiles"

    cache:
      uri: "redis://:${REDIS_PASSWORD}@redis-service:6379/0"
      ttl_seconds: 3600

    pulse_analysis:
      sampling_rate: 1000
      filter:
        low_cutoff: 0.5
        high_cutoff: 20.0
      wavelet:
        wavelet_type: "db4"
        decomposition_level: 5
      models:
        pulse_classifier:
          model_path: "internal/model/weights/pulse_classifier.pkl"
          device: "cuda"
          confidence_threshold: 0.75
        
    abdominal_analysis:
      model_path: "internal/model/weights/abdominal_model.pt"
      device: "cuda"
      confidence_threshold: 0.70
      
    skin_analysis:
      model_path: "internal/model/weights/skin_model.pt"
      device: "cuda"
      confidence_threshold: 0.75

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: palpation-service
  namespace: suoke-ai-np
  labels:
    app.kubernetes.io/name: palpation-service
    app.kubernetes.io/part-of: suoke-life
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: palpation-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: palpation-service
        app.kubernetes.io/part-of: suoke-life
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "51053"
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: suoke-ai-np
      containers:
      - name: palpation-service
        image: suoke/palpation-service:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
            nvidia.com/gpu: 1
          requests:
            cpu: "1"
            memory: 2Gi
        ports:
        - name: grpc
          containerPort: 50053
        - name: metrics
          containerPort: 51053
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: suoke-secrets
              key: mongodb-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: suoke-secrets
              key: redis-password
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: models-volume
          mountPath: /app/internal/model/weights
        - name: logs-volume
          mountPath: /app/logs
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import grpc
              from grpc_health.v1 import health_pb2, health_pb2_grpc
              channel = grpc.insecure_channel('localhost:50053')
              stub = health_pb2_grpc.HealthStub(channel)
              response = stub.Check(health_pb2.HealthCheckRequest(service='palpation_service.PalpationService'))
              assert response.status == health_pb2.HealthCheckResponse.SERVING
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import grpc
              from grpc_health.v1 import health_pb2, health_pb2_grpc
              channel = grpc.insecure_channel('localhost:50053')
              stub = health_pb2_grpc.HealthStub(channel)
              response = stub.Check(health_pb2.HealthCheckRequest(service='palpation_service.PalpationService'))
              assert response.status == health_pb2.HealthCheckResponse.SERVING
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 2
      volumes:
      - name: config-volume
        configMap:
          name: palpation-service-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: palpation-service-models-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: palpation-service-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: palpation-service
  namespace: suoke-ai-np
  labels:
    app.kubernetes.io/name: palpation-service
    app.kubernetes.io/part-of: suoke-life
spec:
  selector:
    app.kubernetes.io/name: palpation-service
  ports:
  - name: grpc
    port: 50053
    targetPort: 50053
  - name: metrics
    port: 51053
    targetPort: 51053
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: palpation-service-models-pvc
  namespace: suoke-ai-np
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: palpation-service-logs-pvc
  namespace: suoke-ai-np
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard-rwo

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: palpation-service-hpa
  namespace: suoke-ai-np
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: palpation-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max 