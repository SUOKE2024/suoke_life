[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "palpation-service"
version = "1.0.0"
description = "索克生活触诊服务 - 基于AI的中医触诊智能分析微服务"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.13.3"
authors = [
    { name = "Suoke Life Team", email = "dev@suokelife.com" }
]
keywords = ["tcm", "palpation", "ai", "health", "microservice", "traditional-chinese-medicine"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]

dependencies = [
    # Web框架
    "fastapi>=0.115.5,<1.0.0",
    "uvicorn[standard]>=0.32.1,<1.0.0",
    
    # 数据验证和设置
    "pydantic>=2.6.0,<3.0.0",
    "pydantic-settings>=2.6.1,<3.0.0",
    
    # HTTP客户端
    "httpx>=0.28.1,<1.0.0",
    
    # 数据库和缓存
    "redis>=5.2.1,<6.0.0",
    "sqlalchemy>=2.0.36,<3.0.0",
    "asyncpg>=0.30.0,<1.0.0",
    "alembic>=1.14.0,<2.0.0",
    
    # 配置和环境
    "python-dotenv>=1.0.1,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "toml>=0.10.2,<1.0.0",
    
    # 日志和监控
    "loguru>=0.7.2,<1.0.0",
    "structlog>=24.4.0,<25.0.0",
    "prometheus-client>=0.21.0,<1.0.0",
    
    # 重试和容错
    "tenacity>=9.0.0,<10.0.0",
    
    # 科学计算和机器学习
    "numpy>=2.1.3,<3.0.0",
    "scipy>=1.14.1,<2.0.0",
    "scikit-learn>=1.5.2,<2.0.0",
    "pandas>=2.2.3,<3.0.0",
    
    # 可视化
    "matplotlib>=3.9.2,<4.0.0",
    "seaborn>=0.13.2,<1.0.0",
    "plotly>=5.24.1,<6.0.0",
    
    # 图像处理
    "opencv-python>=4.10.0,<5.0.0",
    "pillow>=11.0.0,<12.0.0",
    
    # 异步文件操作
    "aiofiles>=24.1.0,<25.0.0",
    
    # 文件监控
    "watchdog>=6.0.0,<7.0.0",
    
    # JSON Schema验证
    "jsonschema>=4.24.0,<5.0.0",
    
    # 异步HTTP
    "aiohttp>=3.12.2,<4.0.0",
    
    # 时间处理
    "arrow>=1.3.0,<2.0.0",
    
    # 加密和安全
    "cryptography>=43.0.3,<44.0.0",
    
    # 消息队列
    "celery>=5.4.0,<6.0.0",
    
    # 健康检查
    "healthcheck>=1.3.3,<2.0.0",
    
    # CLI 工具
    "click>=8.1.7,<9.0.0",
    "rich>=13.9.4,<14.0.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=8.3.4,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pytest-xdist>=3.6.0,<4.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "pytest-timeout>=2.3.1,<3.0.0",
    
    # 代码覆盖率
    "coverage[toml]>=7.6.9,<8.0.0",
    
    # 代码格式化和检查
    "ruff>=0.8.4,<1.0.0",
    "black>=24.10.0,<25.0.0",
    "isort>=5.13.2,<6.0.0",
    
    # 类型检查
    "mypy>=1.13.0,<2.0.0",
    "types-pyyaml>=6.0.12.20240917,<7.0.0",
    "types-redis>=4.6.0.20241004,<5.0.0",
    "types-toml>=0.10.8.20240310,<1.0.0",
    
    # Git钩子
    "pre-commit>=4.0.1,<5.0.0",
    
    # 安全检查
    "bandit>=1.8.0,<2.0.0",
    "safety>=3.5.0,<4.0.0",
    
    # 性能分析
    "memory-profiler>=0.61.0,<1.0.0",
    
    # 调试工具
    "ipdb>=0.13.13,<1.0.0",
    "rich>=13.9.4,<14.0.0",
]

test = [
    "pytest>=8.3.4,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "httpx>=0.28.1,<1.0.0",
    "faker>=33.1.0,<34.0.0",
    "factory-boy>=3.3.1,<4.0.0",
]

docs = [
    "mkdocs>=1.6.1,<2.0.0",
    "mkdocs-material>=9.5.47,<10.0.0",
    "mkdocstrings[python]>=0.27.2,<1.0.0",
    "mkdocs-gen-files>=0.5.0,<1.0.0",
    "mkdocs-literate-nav>=0.6.1,<1.0.0",
    "mkdocs-section-index>=0.3.9,<1.0.0",
]

production = [
    "gunicorn>=23.0.0,<24.0.0",
    "gevent>=24.11.1,<25.0.0",
]

[project.urls]
Homepage = "https://github.com/suokelife/suoke_life"
Documentation = "https://docs.suokelife.com/services/palpation"
Repository = "https://github.com/suokelife/suoke_life"
Issues = "https://github.com/suokelife/suoke_life/issues"
Changelog = "https://github.com/suokelife/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
palpation-service = "palpation_service.main:main"
palpation-dev = "palpation_service.cli:dev_main"

# 构建配置
[tool.hatch.version]
path = "palpation_service/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["palpation_service"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.pytest_cache",
    "/.ruff_cache",
    "/.mypy_cache",
    "/htmlcov",
    "/.coverage",
    "/coverage.xml",
]

# Ruff 配置 (替代 Black + isort + flake8)
[tool.ruff]
target-version = "py313"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",    # flake8-quotes
    "FLY",  # flynt
    "PERF", # perflint
    "RUF",  # ruff-specific rules
    "S",    # bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TRY",  # tryceratops
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "NPY",  # numpy
    "AIR",  # airflow
    "ASYNC", # flake8-async
    "DTZ",  # flake8-datetimez
    "LOG",  # flake8-logging
]

ignore = [
    "E501",    # line too long, handled by formatter
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "W191",    # indentation contains tabs
    "S101",    # use of assert detected
    "S104",    # possible binding to all interfaces
    "S108",    # probable insecure usage of temp file/directory
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "FBT001",  # boolean positional arg in function definition
    "FBT002",  # boolean default arg in function definition
    "A003",    # builtin attribute shadowing
    "TRY003",  # avoid specifying long messages outside the exception class
    "EM101",   # exception must not use a string literal
    "EM102",   # exception must not use an f-string literal
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"test_*.py" = ["ARG001", "S101", "PLR2004", "S106", "S105"]
"tests/*.py" = ["ARG001", "S101", "PLR2004", "S106", "S105"]
"conftest.py" = ["ARG001"]
"**/migrations/*.py" = ["ERA001"]

[tool.ruff.lint.isort]
known-first-party = ["palpation_service"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy 配置
[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

# 插件
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

# 第三方库类型忽略
[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "scipy.*",
    "redis.*",
    "celery.*",
    "prometheus_client.*",
    "watchdog.*",
    "aiofiles.*",
]
ignore_missing_imports = true

# Pydantic 插件配置
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=palpation_service",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--maxfail=3",
    "-ra",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
    "smoke: marks tests as smoke tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage 配置
[tool.coverage.run]
source = ["palpation_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/conftest.py",
    "*/cli.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit 配置
[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv"]
skips = ["B101", "B601", "B311"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
