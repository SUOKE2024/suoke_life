# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import look_service_pb2 as look__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in look_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LookServiceStub(object):
    """定义望诊服务接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeTongue = channel.unary_unary(
                '/look_service.LookService/AnalyzeTongue',
                request_serializer=look__service__pb2.TongueAnalysisRequest.SerializeToString,
                response_deserializer=look__service__pb2.TongueAnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeFace = channel.unary_unary(
                '/look_service.LookService/AnalyzeFace',
                request_serializer=look__service__pb2.FaceAnalysisRequest.SerializeToString,
                response_deserializer=look__service__pb2.FaceAnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeBody = channel.unary_unary(
                '/look_service.LookService/AnalyzeBody',
                request_serializer=look__service__pb2.BodyAnalysisRequest.SerializeToString,
                response_deserializer=look__service__pb2.BodyAnalysisResponse.FromString,
                _registered_method=True)
        self.GetAnalysisHistory = channel.unary_unary(
                '/look_service.LookService/GetAnalysisHistory',
                request_serializer=look__service__pb2.AnalysisHistoryRequest.SerializeToString,
                response_deserializer=look__service__pb2.AnalysisHistoryResponse.FromString,
                _registered_method=True)
        self.CompareAnalysis = channel.unary_unary(
                '/look_service.LookService/CompareAnalysis',
                request_serializer=look__service__pb2.CompareAnalysisRequest.SerializeToString,
                response_deserializer=look__service__pb2.CompareAnalysisResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/look_service.LookService/HealthCheck',
                request_serializer=look__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=look__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class LookServiceServicer(object):
    """定义望诊服务接口
    """

    def AnalyzeTongue(self, request, context):
        """舌象分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeFace(self, request, context):
        """面色分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeBody(self, request, context):
        """形体姿态分析
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalysisHistory(self, request, context):
        """获取历史分析记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompareAnalysis(self, request, context):
        """比较两次分析结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LookServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeTongue': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeTongue,
                    request_deserializer=look__service__pb2.TongueAnalysisRequest.FromString,
                    response_serializer=look__service__pb2.TongueAnalysisResponse.SerializeToString,
            ),
            'AnalyzeFace': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeFace,
                    request_deserializer=look__service__pb2.FaceAnalysisRequest.FromString,
                    response_serializer=look__service__pb2.FaceAnalysisResponse.SerializeToString,
            ),
            'AnalyzeBody': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeBody,
                    request_deserializer=look__service__pb2.BodyAnalysisRequest.FromString,
                    response_serializer=look__service__pb2.BodyAnalysisResponse.SerializeToString,
            ),
            'GetAnalysisHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnalysisHistory,
                    request_deserializer=look__service__pb2.AnalysisHistoryRequest.FromString,
                    response_serializer=look__service__pb2.AnalysisHistoryResponse.SerializeToString,
            ),
            'CompareAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareAnalysis,
                    request_deserializer=look__service__pb2.CompareAnalysisRequest.FromString,
                    response_serializer=look__service__pb2.CompareAnalysisResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=look__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=look__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'look_service.LookService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('look_service.LookService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LookService(object):
    """定义望诊服务接口
    """

    @staticmethod
    def AnalyzeTongue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/AnalyzeTongue',
            look__service__pb2.TongueAnalysisRequest.SerializeToString,
            look__service__pb2.TongueAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/AnalyzeFace',
            look__service__pb2.FaceAnalysisRequest.SerializeToString,
            look__service__pb2.FaceAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeBody(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/AnalyzeBody',
            look__service__pb2.BodyAnalysisRequest.SerializeToString,
            look__service__pb2.BodyAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAnalysisHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/GetAnalysisHistory',
            look__service__pb2.AnalysisHistoryRequest.SerializeToString,
            look__service__pb2.AnalysisHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompareAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/CompareAnalysis',
            look__service__pb2.CompareAnalysisRequest.SerializeToString,
            look__service__pb2.CompareAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/look_service.LookService/HealthCheck',
            look__service__pb2.HealthCheckRequest.SerializeToString,
            look__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
