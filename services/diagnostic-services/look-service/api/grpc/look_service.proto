syntax = "proto3";

package look_service;

option go_package = "github.com/SUOKE2024/suoke_life/look-service/api/grpc";

// 定义望诊服务接口
service LookService {
  // 舌象分析
  rpc AnalyzeTongue (TongueAnalysisRequest) returns (TongueAnalysisResponse);
  
  // 面色分析
  rpc AnalyzeFace (FaceAnalysisRequest) returns (FaceAnalysisResponse);
  
  // 形体姿态分析
  rpc AnalyzeBody (BodyAnalysisRequest) returns (BodyAnalysisResponse);
  
  // 获取历史分析记录
  rpc GetAnalysisHistory (AnalysisHistoryRequest) returns (AnalysisHistoryResponse);
  
  // 比较两次分析结果
  rpc CompareAnalysis (CompareAnalysisRequest) returns (CompareAnalysisResponse);
  
  // 健康检查
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse);
}

// 分析类型枚举
enum AnalysisType {
  BASIC = 0;        // 基础分析
  COMPREHENSIVE = 1; // 全面分析
  SPECIALIZED = 2;  // 专项分析
}

// 舌象分析请求
message TongueAnalysisRequest {
  bytes image = 1;                // 舌象图像二进制数据
  string user_id = 2;             // 用户ID
  AnalysisType analysis_type = 3; // 分析类型
  bool save_result = 4;           // 是否保存分析结果
  map<string, string> metadata = 5; // 元数据
}

// 舌象分析响应
message TongueAnalysisResponse {
  string request_id = 1;               // 请求ID
  string tongue_color = 2;             // 舌色
  string tongue_shape = 3;             // 舌形
  string coating_color = 4;            // 苔色
  string coating_distribution = 5;     // 苔布
  repeated string features = 6;        // 特征列表
  repeated FeatureLocation locations = 7;  // 特征位置
  repeated ConstitutionCorrelation body_constitution = 8; // 体质关联
  map<string, float> metrics = 9;      // 量化指标
  string analysis_summary = 10;        // 分析总结
  string analysis_id = 11;             // 分析记录ID
  int64 timestamp = 12;                // 时间戳
}

// 特征位置
message FeatureLocation {
  string feature_name = 1;       // 特征名称
  float x_min = 2;               // 左上角x坐标
  float y_min = 3;               // 左上角y坐标
  float x_max = 4;               // 右下角x坐标
  float y_max = 5;               // 右下角y坐标
  float confidence = 6;          // 置信度
}

// 体质关联
message ConstitutionCorrelation {
  string constitution_type = 1;  // 体质类型
  float confidence = 2;          // 置信度
  string description = 3;        // 描述
}

// 面色分析请求
message FaceAnalysisRequest {
  bytes image = 1;                // 面部图像二进制数据
  string user_id = 2;             // 用户ID
  AnalysisType analysis_type = 3; // 分析类型
  bool save_result = 4;           // 是否保存分析结果
  map<string, string> metadata = 5; // 元数据
}

// 面色分析响应
message FaceAnalysisResponse {
  string request_id = 1;               // 请求ID
  string face_color = 2;               // 整体面色
  repeated FaceRegionAnalysis regions = 3; // 区域分析
  repeated string features = 4;        // 特征列表
  repeated ConstitutionCorrelation body_constitution = 5; // 体质关联
  repeated OrganCorrelation organ_correlations = 6; // 脏腑关联
  string analysis_summary = 7;         // 分析总结
  string analysis_id = 8;              // 分析记录ID
  int64 timestamp = 9;                 // 时间戳
}

// 面部区域分析
message FaceRegionAnalysis {
  string region_name = 1;       // 区域名称
  string color = 2;             // 颜色
  string feature = 3;           // 特征
  float confidence = 4;         // 置信度
}

// 脏腑关联
message OrganCorrelation {
  string organ_name = 1;        // 脏腑名称
  string status = 2;            // 状态
  float confidence = 3;         // 置信度
  string description = 4;       // 描述
}

// 形体姿态分析请求
message BodyAnalysisRequest {
  bytes image = 1;                // 全身图像二进制数据
  string user_id = 2;             // 用户ID
  AnalysisType analysis_type = 3; // 分析类型
  bool save_result = 4;           // 是否保存分析结果
  map<string, string> metadata = 5; // 元数据
}

// 形体姿态分析响应
message BodyAnalysisResponse {
  string request_id = 1;               // 请求ID
  string body_type = 2;                // 体型
  repeated BodyFeature features = 3;   // 特征列表
  repeated PostureAnalysis posture = 4; // 姿态分析
  repeated ConstitutionCorrelation body_constitution = 5; // 体质关联
  string analysis_summary = 6;         // 分析总结
  string analysis_id = 7;              // 分析记录ID
  int64 timestamp = 8;                 // 时间戳
}

// 体态特征
message BodyFeature {
  string feature_name = 1;       // 特征名称
  string value = 2;              // 特征值
  float confidence = 3;          // 置信度
}

// 姿态分析
message PostureAnalysis {
  string posture_aspect = 1;     // 姿态方面
  string status = 2;             // 状态
  float confidence = 3;          // 置信度
  string suggestion = 4;         // 建议
}

// 历史分析请求
message AnalysisHistoryRequest {
  string user_id = 1;             // 用户ID
  string analysis_type = 2;       // 分析类型: "tongue", "face", "body"
  int32 limit = 3;                // 返回记录数量限制
  int64 start_time = 4;           // 开始时间戳
  int64 end_time = 5;             // 结束时间戳
}

// 历史分析响应
message AnalysisHistoryResponse {
  repeated AnalysisRecord records = 1; // 历史记录
  int32 total_count = 2;              // 总记录数
}

// 分析记录
message AnalysisRecord {
  string analysis_id = 1;          // 分析ID
  string analysis_type = 2;        // 分析类型
  int64 timestamp = 3;             // 时间戳
  string summary = 4;              // 摘要
  bytes thumbnail = 5;             // 缩略图
}

// 比较分析请求
message CompareAnalysisRequest {
  string user_id = 1;              // 用户ID
  string analysis_type = 2;        // 分析类型: "tongue", "face", "body"
  string first_analysis_id = 3;    // 第一个分析ID
  string second_analysis_id = 4;   // 第二个分析ID
}

// 比较分析响应
message CompareAnalysisResponse {
  repeated FeatureComparison feature_comparisons = 1; // 特征比较
  repeated string improvements = 2;                  // 改善项
  repeated string deteriorations = 3;                // 恶化项
  repeated string unchanged = 4;                     // 未变项
  string comparison_summary = 5;                     // 比较总结
}

// 特征比较
message FeatureComparison {
  string feature_name = 1;       // 特征名称
  string first_value = 2;        // 第一个值
  string second_value = 3;       // 第二个值
  float change_percentage = 4;   // 变化百分比
  string change_direction = 5;   // 变化方向: "improved", "deteriorated", "unchanged"
}

// 健康检查请求
message HealthCheckRequest {
  bool include_details = 1;      // 是否包含详细信息
}

// 健康检查响应
message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  Status status = 1;               // 服务状态
  map<string, string> details = 2; // 详细状态信息
} 