[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "look-service"
version = "1.0.0"
description = "Look service for TCM visual diagnosis"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Suoke Life Team", email = "dev@suokelife.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.13.3"
dependencies = [
    # Web framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # HTTP client
    "httpx>=0.28.0",
    
    # Database
    "asyncpg>=0.30.0",
    "redis>=5.2.0",
    "motor>=3.6.0",
    
    # Image processing
    "pillow>=11.0.0",
    "opencv-python>=4.10.0",
    "numpy>=2.2.0",
    
    # Machine learning
    "onnxruntime>=1.20.0",
    "scikit-learn>=1.6.0",
    
    # Logging and monitoring
    "structlog>=24.4.0",
    "loguru>=0.7.2",
    "prometheus-client>=0.21.0",
    
    # Utilities
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.0",
    
    # Code quality
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    
    # Security
    "safety>=3.2.0",
    "bandit>=1.8.0",
    
    # Type stubs
    "types-redis>=4.6.0",
    "types-pillow>=10.2.0",
]

gpu = [
    "onnxruntime-gpu>=1.20.0",
]

cloud = [
    "boto3>=1.35.0",
    "google-cloud-storage>=2.18.0",
    "azure-storage-blob>=12.23.0",
]

[project.urls]
Homepage = "https://github.com/suokelife/look-service"
Repository = "https://github.com/suokelife/look-service.git"
Issues = "https://github.com/suokelife/look-service/issues"

[project.scripts]
look-service = "look_service.cmd.server:main"

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG001", # unused function argument (common in API handlers)
    "ARG002", # unused method argument
    "B904",  # raise from within except (not always needed)
    "E402",  # module level import not at top (needed for path manipulation)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["look_service"]

# MyPy configuration
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "onnxruntime.*",
    "sklearn.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["look_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Hatch environments
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=look_service --cov-report=term-missing {args:tests}"
cov-report = "coverage report"
cov-html = "coverage html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:look_service tests}"
style = [
    "ruff check {args:.}",
    "ruff format --check --diff {args:.}",
]
fmt = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]
