# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in inquiry_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class InquiryServiceStub(object):
    """问诊服务接口定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartInquirySession = channel.unary_unary(
                '/inquiry.InquiryService/StartInquirySession',
                request_serializer=inquiry__service__pb2.StartSessionRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.SessionResponse.FromString,
                _registered_method=True)
        self.InteractWithUser = channel.unary_stream(
                '/inquiry.InquiryService/InteractWithUser',
                request_serializer=inquiry__service__pb2.InteractionRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.InteractionResponse.FromString,
                _registered_method=True)
        self.EndInquirySession = channel.unary_unary(
                '/inquiry.InquiryService/EndInquirySession',
                request_serializer=inquiry__service__pb2.EndSessionRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.InquirySummary.FromString,
                _registered_method=True)
        self.AnalyzeMedicalHistory = channel.unary_unary(
                '/inquiry.InquiryService/AnalyzeMedicalHistory',
                request_serializer=inquiry__service__pb2.MedicalHistoryRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.MedicalHistoryAnalysis.FromString,
                _registered_method=True)
        self.ExtractSymptoms = channel.unary_unary(
                '/inquiry.InquiryService/ExtractSymptoms',
                request_serializer=inquiry__service__pb2.SymptomsExtractionRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.SymptomsResponse.FromString,
                _registered_method=True)
        self.MapToTCMPatterns = channel.unary_unary(
                '/inquiry.InquiryService/MapToTCMPatterns',
                request_serializer=inquiry__service__pb2.TCMPatternMappingRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.TCMPatternResponse.FromString,
                _registered_method=True)
        self.BatchAnalyzeInquiryData = channel.unary_unary(
                '/inquiry.InquiryService/BatchAnalyzeInquiryData',
                request_serializer=inquiry__service__pb2.BatchInquiryRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.BatchInquiryResponse.FromString,
                _registered_method=True)
        self.AssessHealthRisks = channel.unary_unary(
                '/inquiry.InquiryService/AssessHealthRisks',
                request_serializer=inquiry__service__pb2.HealthRiskRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.HealthRiskResponse.FromString,
                _registered_method=True)

class InquiryServiceServicer(object):
    """问诊服务接口定义
    """

    def StartInquirySession(self, request, context):
        """开始问诊会话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InteractWithUser(self, request, context):
        """问诊互动 - 流式响应，用于连续对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndInquirySession(self, request, context):
        """结束问诊会话并获取汇总结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeMedicalHistory(self, request, context):
        """分析用户病史
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractSymptoms(self, request, context):
        """提取症状信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapToTCMPatterns(self, request, context):
        """中医症状匹配
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchAnalyzeInquiryData(self, request, context):
        """批量分析健康数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssessHealthRisks(self, request, context):
        """健康风险评估
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_InquiryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartInquirySession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartInquirySession,
                    request_deserializer=inquiry__service__pb2.StartSessionRequest.FromString,
                    response_serializer=inquiry__service__pb2.SessionResponse.SerializeToString,
            ),
            'InteractWithUser': grpc.unary_stream_rpc_method_handler(
                    servicer.InteractWithUser,
                    request_deserializer=inquiry__service__pb2.InteractionRequest.FromString,
                    response_serializer=inquiry__service__pb2.InteractionResponse.SerializeToString,
            ),
            'EndInquirySession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndInquirySession,
                    request_deserializer=inquiry__service__pb2.EndSessionRequest.FromString,
                    response_serializer=inquiry__service__pb2.InquirySummary.SerializeToString,
            ),
            'AnalyzeMedicalHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeMedicalHistory,
                    request_deserializer=inquiry__service__pb2.MedicalHistoryRequest.FromString,
                    response_serializer=inquiry__service__pb2.MedicalHistoryAnalysis.SerializeToString,
            ),
            'ExtractSymptoms': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractSymptoms,
                    request_deserializer=inquiry__service__pb2.SymptomsExtractionRequest.FromString,
                    response_serializer=inquiry__service__pb2.SymptomsResponse.SerializeToString,
            ),
            'MapToTCMPatterns': grpc.unary_unary_rpc_method_handler(
                    servicer.MapToTCMPatterns,
                    request_deserializer=inquiry__service__pb2.TCMPatternMappingRequest.FromString,
                    response_serializer=inquiry__service__pb2.TCMPatternResponse.SerializeToString,
            ),
            'BatchAnalyzeInquiryData': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchAnalyzeInquiryData,
                    request_deserializer=inquiry__service__pb2.BatchInquiryRequest.FromString,
                    response_serializer=inquiry__service__pb2.BatchInquiryResponse.SerializeToString,
            ),
            'AssessHealthRisks': grpc.unary_unary_rpc_method_handler(
                    servicer.AssessHealthRisks,
                    request_deserializer=inquiry__service__pb2.HealthRiskRequest.FromString,
                    response_serializer=inquiry__service__pb2.HealthRiskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inquiry.InquiryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('inquiry.InquiryService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.
class InquiryService(object):
    """问诊服务接口定义
    """

    @staticmethod
    def StartInquirySession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/StartInquirySession',
            inquiry__service__pb2.StartSessionRequest.SerializeToString,
            inquiry__service__pb2.SessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InteractWithUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/inquiry.InquiryService/InteractWithUser',
            inquiry__service__pb2.InteractionRequest.SerializeToString,
            inquiry__service__pb2.InteractionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndInquirySession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/EndInquirySession',
            inquiry__service__pb2.EndSessionRequest.SerializeToString,
            inquiry__service__pb2.InquirySummary.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeMedicalHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/AnalyzeMedicalHistory',
            inquiry__service__pb2.MedicalHistoryRequest.SerializeToString,
            inquiry__service__pb2.MedicalHistoryAnalysis.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractSymptoms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/ExtractSymptoms',
            inquiry__service__pb2.SymptomsExtractionRequest.SerializeToString,
            inquiry__service__pb2.SymptomsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MapToTCMPatterns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/MapToTCMPatterns',
            inquiry__service__pb2.TCMPatternMappingRequest.SerializeToString,
            inquiry__service__pb2.TCMPatternResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchAnalyzeInquiryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/BatchAnalyzeInquiryData',
            inquiry__service__pb2.BatchInquiryRequest.SerializeToString,
            inquiry__service__pb2.BatchInquiryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssessHealthRisks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry.InquiryService/AssessHealthRisks',
            inquiry__service__pb2.HealthRiskRequest.SerializeToString,
            inquiry__service__pb2.HealthRiskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
