version: '3.8'

services:
  # 问诊服务
  inquiry-service:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: inquiry-service
    ports:
      - "8080:8080"  # REST API
      - "50051:50051"  # gRPC
      - "9090:9090"  # Metrics
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://inquiry_user:inquiry_pass@postgres:5432/inquiry_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ../config:/app/config:ro
      - ../logs:/app/logs
      - ../data:/app/data:ro
    depends_on:
      - postgres
      - redis
    networks:
      - inquiry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: inquiry-postgres
    environment:
      - POSTGRES_DB=inquiry_db
      - POSTGRES_USER=inquiry_user
      - POSTGRES_PASSWORD=inquiry_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../migrations/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - inquiry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inquiry_user -d inquiry_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: inquiry-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
      - ../config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - inquiry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: inquiry-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - inquiry-service
    networks:
      - inquiry-network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: inquiry-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - inquiry-network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: inquiry-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - inquiry-network
    restart: unless-stopped

  # Jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: inquiry-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - inquiry-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  inquiry-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 