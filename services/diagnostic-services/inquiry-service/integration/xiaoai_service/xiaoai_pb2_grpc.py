"""
xiaoai_pb2_grpc - 索克生活项目模块
"""

import grpc

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

class XiaoAIServiceStub(object):
    """小艾服务接口定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IntegrateFourDiagnosis = channel.unary_unary(
                '/xiaoai.XiaoAIService/IntegrateFourDiagnosis',
                request_serializer=xiaoai__pb2.IntegrateDiagnosisRequest.SerializeToString,
                response_deserializer=xiaoai__pb2.IntegrateDiagnosisResponse.FromString,
                )
        self.AnalyzeConstitution = channel.unary_unary(
                '/xiaoai.XiaoAIService/AnalyzeConstitution',
                request_serializer=xiaoai__pb2.ConstitutionAnalysisRequest.SerializeToString,
                response_deserializer=xiaoai__pb2.ConstitutionAnalysisResponse.FromString,
                )

class XiaoAIServiceServicer(object):
    """小艾服务接口定义
    """

    def IntegrateFourDiagnosis(self, request, context):
        """整合四诊数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeConstitution(self, request, context):
        """分析体质
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_XiaoAIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IntegrateFourDiagnosis': grpc.unary_unary_rpc_method_handler(
                    servicer.IntegrateFourDiagnosis,
                    request_deserializer=xiaoai__pb2.IntegrateDiagnosisRequest.FromString,
                    response_serializer=xiaoai__pb2.IntegrateDiagnosisResponse.SerializeToString,
            ),
            'AnalyzeConstitution': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeConstitution,
                    request_deserializer=xiaoai__pb2.ConstitutionAnalysisRequest.FromString,
                    response_serializer=xiaoai__pb2.ConstitutionAnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xiaoai.XiaoAIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.
class XiaoAIService(object):
    """小艾服务接口定义
    """

    @staticmethod
    def IntegrateFourDiagnosis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xiaoai.XiaoAIService/IntegrateFourDiagnosis',
            xiaoai__pb2.IntegrateDiagnosisRequest.SerializeToString,
            xiaoai__pb2.IntegrateDiagnosisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeConstitution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xiaoai.XiaoAIService/AnalyzeConstitution',
            xiaoai__pb2.ConstitutionAnalysisRequest.SerializeToString,
            xiaoai__pb2.ConstitutionAnalysisResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)