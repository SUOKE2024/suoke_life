[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "listen-service"
version = "1.0.0"
description = "索克生活闻诊服务 - 基于AI的中医闻诊音频分析服务"
readme = "README.md"
authors = [
    {name = "Song Xu", email = "song.xu@icloud.com"}
]
maintainers = [
    {name = "Song Xu", email = "song.xu@icloud.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Typing :: Typed",
]
requires-python = ">=3.13.3"
dependencies = [
    # Web框架和异步
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "httpx>=0.28.0",
    "aiohttp>=3.10.0",
    
    # 数据验证和序列化
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # gRPC 和 protobuf
    "grpcio>=1.68.0",
    "grpcio-tools>=1.68.0",
    "grpcio-health-checking>=1.68.0",
    "grpcio-reflection>=1.68.0",
    "protobuf>=5.29.0",
    
    # 音频处理
    "numpy>=2.1.0",
    "scipy>=1.14.0",
    "librosa>=0.10.2",
    "soundfile>=0.12.1",
    "pydub>=0.25.1",
    
    # 机器学习
    "scikit-learn>=1.5.0",
    "pandas>=2.2.0",
    "torch>=2.5.0",
    
    # 数据库和缓存
    "redis>=5.2.0",
    "aioredis>=2.0.1",
    "pymongo>=4.10.0",
    
    # 日志和监控
    "loguru>=0.7.2",
    "structlog>=24.4.0",
    "prometheus-client>=0.21.0",
    
    # 工具库
    "python-dotenv>=1.0.1",
    "python-multipart>=0.0.12",
    "click>=8.1.7",
    "psutil>=6.1.0",
    "aiofiles>=24.1.0",
    
    # 安全
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=43.0.0",
    
    # 性能优化
    "uvloop>=0.21.0; sys_platform != 'win32'",
    "orjson>=3.10.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    
    # 代码质量工具
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "bandit>=1.7.10",
    
    # 开发工具
    "ipython>=8.29.0",
    "jupyter>=1.1.0",
    "rich>=13.9.0",
    
    # 测试数据生成
    "factory-boy>=3.3.1",
    "faker>=33.0.0",
    
    # 性能分析
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.1",
    "faker>=33.0.0",
]

docs = [
    "sphinx>=8.1.0",
    "sphinx-rtd-theme>=3.0.0",
    "sphinx-autodoc-typehints>=2.4.0",
    "myst-parser>=4.0.0",
    "sphinx-click>=6.0.0",
]

gpu = [
    "torch>=2.5.0",
    "torchaudio>=2.5.0",
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://github.com/SUOKE2024/suoke_life/blob/main/README.md"
Repository = "https://github.com/SUOKE2024/suoke_life"
"Bug Tracker" = "https://github.com/SUOKE2024/suoke_life/issues"
Changelog = "https://github.com/SUOKE2024/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
listen-service = "listen_service.cmd.server:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["listen_service*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
listen_service = ["py.typed", "*.pyi"]

# Ruff 配置 - 现代化的 Python linter 和 formatter
[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S603",  # subprocess call
    "S607",  # starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101", "B011", "T20"]
"scripts/*" = ["T20"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy 配置
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "grpc.*",
    "redis.*",
    "aioredis.*",
    "prometheus_client.*",
    "scipy.*",
    "sklearn.*",
    "torch.*",
    "pydub.*",
    "pymongo.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=listen_service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
    "gpu: marks tests that require GPU",
    "benchmark: marks performance benchmark tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage 配置
[tool.coverage.run]
source = ["listen_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit 安全检查配置
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

# UV 配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]
