[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "listen-service"
version = "1.0.0"
description = "索克生活闻诊服务 - 基于AI的中医闻诊音频分析服务"
readme = "README.md"
authors = [
    {name = "Song Xu", email = "song.xu@icloud.com"}
]
maintainers = [
    {name = "Song Xu", email = "song.xu@icloud.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.13.3"
dependencies = [
    # Web框架
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # 数据验证和序列化
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # 异步和网络
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    
    # 缓存
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    
    # gRPC
    "grpcio>=1.59.0",
    "grpcio-tools>=1.59.0",
    "protobuf>=4.25.0",
    
    # 音频处理
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    
    # 机器学习
    "scikit-learn>=1.3.0",
    "pandas>=2.1.0",
    
    # 日志和监控
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # 工具库
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "click>=8.1.0",
    "psutil>=5.9.0",
    
    # 安全
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    
    # 代码质量工具
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    
    # 开发工具
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    
    # 测试数据生成
    "factory-boy>=3.3.0",
    "faker>=19.12.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "factory-boy>=3.3.0",
    "faker>=19.12.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://github.com/SUOKE2024/suoke_life/blob/main/README.md"
Repository = "https://github.com/SUOKE2024/suoke_life"
"Bug Tracker" = "https://github.com/SUOKE2024/suoke_life/issues"

[project.scripts]
listen-service = "listen_service.cmd.server:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["listen_service*"]

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "grpc.*",
    "redis.*",
    "aioredis.*",
    "prometheus_client.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
]

[tool.coverage.run]
source = ["listen_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
