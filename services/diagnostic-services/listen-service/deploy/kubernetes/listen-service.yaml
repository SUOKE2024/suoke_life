---
# 闻诊服务Kubernetes部署配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: listen-service-config
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
data:
  # 基础配置 - 将覆盖容器内的默认配置
  config.yaml: |
    service:
      name: "listen-service"
      version: "1.0.0"
      env: "${ENVIRONMENT}"
      log_level: "info"
    
    server:
      host: "0.0.0.0"
      port: 50052
      max_workers: 20
    
    audio_processing:
      default_sample_rate: 16000
      supported_formats: ["wav", "mp3", "flac", "ogg", "m4a"]
      temp_dir: "/tmp/listen_service"

---
apiVersion: v1
kind: Secret
metadata:
  name: listen-service-secrets
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
type: Opaque
data:
  # 敏感配置，使用base64加密
  # 这些值应当通过CI/CD系统在部署时生成
  mongo-uri: ${MONGO_URI_BASE64}
  redis-password: ${REDIS_PASSWORD_BASE64}
  jwt-secret: ${JWT_SECRET_BASE64}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: listen-service
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: listen-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: listen-service
        tier: diagnostic-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: listen-service
        image: ${DOCKER_REGISTRY}/suoke/listen-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
            nvidia.com/gpu: 1
        ports:
        - name: grpc
          containerPort: 50052
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: environment
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: listen-service-secrets
              key: mongo-uri
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: redis-host
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: listen-service-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: listen-service-secrets
              key: jwt-secret
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: jaeger-endpoint
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config/config.yaml
          subPath: config.yaml
        - name: models-volume
          mountPath: /opt/suoke/models
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import grpc
              from api.grpc import listen_service_pb2_grpc, listen_service_pb2
              channel = grpc.insecure_channel('localhost:50052')
              stub = listen_service_pb2_grpc.ListenServiceStub(channel)
              response = stub.HealthCheck(listen_service_pb2.HealthCheckRequest())
              exit(0 if response.status == 1 else 1)
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import grpc
              from api.grpc import listen_service_pb2_grpc, listen_service_pb2
              channel = grpc.insecure_channel('localhost:50052')
              stub = listen_service_pb2_grpc.ListenServiceStub(channel)
              response = stub.HealthCheck(listen_service_pb2.HealthCheckRequest())
              exit(0 if response.status == 1 else 1)
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - python
            - -c
            - |
              import grpc
              from api.grpc import listen_service_pb2_grpc, listen_service_pb2
              channel = grpc.insecure_channel('localhost:50052')
              stub = listen_service_pb2_grpc.ListenServiceStub(channel)
              response = stub.HealthCheck(listen_service_pb2.HealthCheckRequest())
              exit(0 if response.status == 1 else 1)
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 5"]
      volumes:
      - name: config-volume
        configMap:
          name: listen-service-config
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}
      - name: models-volume
        persistentVolumeClaim:
          claimName: listen-service-models-pvc
      imagePullSecrets:
      - name: registry-credentials
      terminationGracePeriodSeconds: 30
      nodeSelector:
        gpu: "true"
        
---
apiVersion: v1
kind: Service
metadata:
  name: listen-service
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 50052
    targetPort: 50052
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: listen-service

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: listen-service-models-pvc
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-nfs-storage

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: listen-service-hpa
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: listen-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: listen-service-pdb
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: listen-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: listen-service-network-policy
  namespace: suoke
  labels:
    app: listen-service
    tier: diagnostic-service
spec:
  podSelector:
    matchLabels:
      app: listen-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          tier: gateway
    - podSelector:
        matchLabels:
          app: xiaoai-service
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 50052
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: mongodb
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: redis
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app: prometheus-pushgateway
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: inquiry-service
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: look-service
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: palpation-service
    - namespaceSelector:
        matchLabels:
          name: suoke
      podSelector:
        matchLabels:
          app: jaeger 