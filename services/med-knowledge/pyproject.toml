[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "med-knowledge"
version = "0.1.0"
description = "索克生活医学知识服务 - 基于知识图谱的中医智能诊断服务"
readme = "README.md"
requires-python = ">=3.13.3"
license = {text = "MIT"}
authors = [
    {name = "Suoke Life Team", email = "dev@suokelife.com"},
]
keywords = ["tcm", "knowledge-graph", "medical", "ai", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.115.0,<1.0.0",
    "uvicorn[standard]>=0.32.0,<1.0.0",
    "pydantic>=2.10.0,<3.0.0",
    "pydantic-settings>=2.6.0,<3.0.0",
    "neo4j==5.17.0",
    "redis>=5.0.1,<6.0.0",
    "python-dotenv==1.0.1",
    "pyyaml==6.0.1",
    "prometheus-client==0.20.0",
    "prometheus-fastapi-instrumentator==6.1.0",
    "structlog==24.1.0",
    "loguru>=0.7.0,<1.0.0",
    "python-json-logger==2.0.7",
    "tenacity==8.2.3",
    "typer==0.9.0",
    "httpx==0.27.0",
    "grpcio>=1.66.0,<2.0.0",
    "grpcio-tools>=1.66.0,<2.0.0",
    "protobuf>=4.25.0,<6.0.0",
    "jinja2==3.1.3",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-multipart==0.0.9",
    "slowapi==0.1.9",
    "cachetools==5.3.3",
    "celery==5.3.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "asyncmock>=0.4.2",
    "httpx>=0.27.0",
    "mypy>=1.8.0",
    "black>=24.2.0",
    "ruff>=0.1.0",
    "pre-commit>=3.6.2",
    "types-redis>=4.6.0.20240218",
    "types-PyYAML>=6.0.12.12",
]
test = [
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "asyncmock>=0.4.2",
    "httpx>=0.27.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
med-knowledge = "app.main:app"

[project.urls]
Homepage = "https://github.com/suokelife/suoke_life"
Documentation = "https://docs.suokelife.com/med-knowledge"
Repository = "https://github.com/suokelife/suoke_life"
Issues = "https://github.com/suokelife/suoke_life/issues"

# UV 配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "asyncmock>=0.4.2",
    "httpx>=0.27.0",
    "mypy>=1.8.0",
    "black>=24.2.0",
    "ruff>=0.1.0",
    "pre-commit>=3.6.2",
    "types-redis>=4.6.0.20240218",
    "types-PyYAML>=6.0.12.12",
]

# Ruff 配置
[tool.ruff]
target-version = "py313"
line-length = 100
extend-exclude = [
    "migrations",
    "app/api/grpc/generated",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # 暂时忽略异常链问题
    "ARG001", # 暂时忽略未使用参数
    "ARG002", # 暂时忽略未使用方法参数
    "RUF006", # 暂时忽略任务引用问题
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true

# Black 配置
[tool.black]
target-version = ['py313']
line-length = 88
skip-string-normalization = false
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# MyPy 配置
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "redis.*",
    "prometheus_client.*",
    "prometheus_fastapi_instrumentator.*",
    "structlog.*",
    "tenacity.*",
    "grpcio.*",
    "protobuf.*",
    "jose.*",
    "passlib.*",
    "slowapi.*",
    "celery.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=30",  # 临时降低覆盖率要求
]
testpaths = ["test"]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage 配置
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "app/api/grpc/generated/*",  # 排除生成的文件
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 30  # 临时降低覆盖率要求
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]