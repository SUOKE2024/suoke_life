apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-model-service
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-model-service
  template:
    metadata:
      labels:
        app: ai-model-service
        component: ai-infrastructure
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-model-service
      containers:
      - name: ai-model-service
        image: suoke/ai-model-service:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: APP_NAME
          value: "AI Model Service"
        - name: APP_VERSION
          value: "v1.0.0"
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8080"
        - name: KUBERNETES__NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES__IN_CLUSTER
          value: "true"
        - name: MONITORING__ENABLED
          value: "true"
        - name: MONITORING__METRICS_PORT
          value: "9090"
        - name: MONITORING__LOG_LEVEL
          value: "INFO"
        - name: MONITORING__JSON_LOGS
          value: "true"
        envFrom:
        - configMapRef:
            name: ai-model-service-config
        - secretRef:
            name: ai-model-service-secrets
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: ai-model-service-config
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: ai-model-service
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: ai-model-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-model-service
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ai-model-service
  labels:
    app: ai-model-service
    component: ai-infrastructure
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ai-model-service
  labels:
    app: ai-model-service
    component: ai-infrastructure
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ai-model-service
subjects:
- kind: ServiceAccount
  name: ai-model-service
  namespace: suoke-life

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-model-service-config
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure
data:
  config.yaml: |
    app_name: "AI Model Service"
    app_version: "v1.0.0"
    debug: false
    
    host: "0.0.0.0"
    port: 8080
    
    kubernetes:
      namespace: "suoke-life"
      in_cluster: true
      timeout: 60
    
    monitoring:
      enabled: true
      metrics_port: 9090
      health_check_interval: 30
      log_level: "INFO"
      json_logs: true
    
    default_model_resources:
      cpu: "1"
      memory: "2Gi"
      nvidia.com/gpu: "0"
    
    default_scaling_config:
      min_replicas: 1
      max_replicas: 5
      target_cpu_utilization: 70

---
apiVersion: v1
kind: Secret
metadata:
  name: ai-model-service-secrets
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure
type: Opaque
data:
  # Base64编码的密钥，实际部署时需要替换
  MODEL_REGISTRY__USERNAME: ""
  MODEL_REGISTRY__PASSWORD: ""
  SECURITY__JWT_SECRET: ""
  SECURITY__API_KEY: ""

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-model-service
  namespace: suoke-life
  labels:
    app: ai-model-service
    component: ai-infrastructure
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-model-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60 