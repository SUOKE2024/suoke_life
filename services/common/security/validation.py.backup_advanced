"""
validation - 索克生活项目模块
"""

from datetime import datetime
from typing import Any, Dict, List, Optional
import html
import re



class InputValidator:
    """输入验证器"""

    @staticmethod
    def validate_email(email: str) - > bool:
        """验证邮箱格式"""
        pattern = r'^[a - zA - Z0 - 9._% + -] + @[a - zA - Z0 - 9. - ] + \.[a - zA - Z]{2,}$'
        return bool(re.match(pattern, email))

    @staticmethod
    def validate_phone(phone: str) - > bool:
        """验证手机号格式"""
        pattern = r'^1[3 - 9]\d{9}$'
        return bool(re.match(pattern, phone))

    @staticmethod
    def sanitize_html(text: str) - > str:
        """清理HTML内容"""
        return html.escape(text)

    @staticmethod
    def validate_sql_injection(text: str) - > bool:
        """检查SQL注入"""
        dangerous_patterns = [
            r'union\s + select',
            r'drop\s + table',
            r'delete\s + from',
            r'insert\s + into',
            r'update\s + set',
            r'exec\s * \(',
            r'script\s * >',
        ]

        text_lower = text.lower()
        for pattern in dangerous_patterns:
            if re.search(pattern, text_lower):
                return False
        return True

    @staticmethod
    def validate_xss(text: str) - > bool:
        """检查XSS攻击"""
        dangerous_patterns = [
            r'<script',
            r'javascript:',
            r'onload\s *= ',
            r'onerror\s *= ',
            r'onclick\s *= ',
        ]

        text_lower = text.lower()
        for pattern in dangerous_patterns:
            if re.search(pattern, text_lower):
                return False
        return True

    @classmethod
    def validate_input(cls, data: Dict[str, Any]) - > Dict[str, Any]:
        """验证输入数据"""
        errors = []

        for key, value in data.items():
            if isinstance(value, str):
                # 清理HTML
                data[key] = cls.sanitize_html(value)

                # 检查SQL注入
                if not cls.validate_sql_injection(value):
                    errors.append(f"{key}: 包含危险的SQL语句")

                # 检查XSS
                if not cls.validate_xss(value):
                    errors.append(f"{key}: 包含危险的脚本内容")

        if errors:
            raise ValueError(f"输入验证失败: {'; '.join(errors)}")

        return data
