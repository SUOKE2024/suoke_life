"""
rbac - 索克生活项目模块
"""

from enum import Enum
from typing import List, Dict, Set



class Permission(Enum):
    """权限枚举"""
    READ = "read"
    WRITE = "write"
    DELETE = "delete"
    ADMIN = "admin"

class Role:
    """角色类"""

    def __init__(self, name: str, permissions: List[Permission]):
        """TODO: 添加文档字符串"""
        self.name = name
        self.permissions = set(permissions)

    def has_permission(self, permission: Permission) - > bool:
        """检查是否有权限"""
        return permission in self.permissions

class RBACManager:
    """基于角色的访问控制管理器"""

    def __init__(self) - > None:
        """TODO: 添加文档字符串"""
        self.roles: Dict[str, Role] = {}
        self.user_roles: Dict[str, Set[str]] = {}

        # 初始化默认角色
        self._init_default_roles()

    def _init_default_roles(self) - > None:
        """初始化默认角色"""
        self.roles["admin"] = Role("admin", [Permission.READ, Permission.WRITE, Permission.DELETE, Permission.ADMIN])
        self.roles["user"] = Role("user", [Permission.READ])
        self.roles["doctor"] = Role("doctor", [Permission.READ, Permission.WRITE])

    def assign_role(self, user_id: str, role_name: str):
        """分配角色"""
        if user_id not in self.user_roles:
            self.user_roles[user_id] = set()
        self.user_roles[user_id].add(role_name)

    def check_permission(self, user_id: str, permission: Permission) - > bool:
        """检查用户权限"""
        if user_id not in self.user_roles:
            return False

        for role_name in self.user_roles[user_id]:
            if role_name in self.roles:
                role = self.roles[role_name]
                if role.has_permission(permission):
                    return True

        return False
