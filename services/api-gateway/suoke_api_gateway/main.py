#!/usr/bin/env python3
"""
Á¥¢ÂÖãÁîüÊ¥ª API ÁΩëÂÖ≥‰∏ªÁ®ãÂ∫è

Êèê‰æõÂëΩ‰ª§Ë°åÊé•Âè£ÂêØÂä®ÂíåÁÆ°ÁêÜ API ÁΩëÂÖ≥ÊúçÂä°
"""

import asyncio
import signal
import sys
from pathlib import Path
from typing import Optional

import click
import httpx
import uvicorn
from rich.console import Console
from rich.table import Table

from .core.app import create_app, create_dev_app
from .core.config import Settings, get_settings, create_settings_from_file
from .core.logging import get_logger, setup_logging

console = Console()
logger = get_logger(__name__)


@click.group()
@click.version_option()
def cli() -> None:
    """Á¥¢ÂÖãÁîüÊ¥ª API ÁΩëÂÖ≥ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑"""
    pass


@cli.command()
@click.option(
    "--host",
    default="0.0.0.0",
    help="ÁõëÂê¨Âú∞ÂùÄ",
    show_default=True,
)
@click.option(
    "--port",
    default=8000,
    type=int,
    help="ÁõëÂê¨Á´ØÂè£",
    show_default=True,
)
@click.option(
    "--workers",
    default=1,
    type=int,
    help="Â∑•‰ΩúËøõÁ®ãÊï∞",
    show_default=True,
)
@click.option(
    "--reload",
    is_flag=True,
    help="ÂêØÁî®Ëá™Âä®ÈáçËΩΩÔºàÂºÄÂèëÊ®°ÂºèÔºâ",
)
@click.option(
    "--config",
    type=click.Path(exists=True),
    help="ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ",
)
def serve(host: str, port: int, workers: int, reload: bool, config: Optional[str]) -> None:
    """ÂêØÂä® API ÁΩëÂÖ≥ÊúçÂä°"""
    try:
        # Âä†ËΩΩÈÖçÁΩÆ
        if config:
            settings = create_settings_from_file(Path(config))
        else:
            settings = get_settings()
        
        # ËÆæÁΩÆÊó•Âøó
        setup_logging(settings)
        
        # ÂàõÂª∫Â∫îÁî®
        app = create_app(settings)
        
        # ÊòæÁ§∫ÂêØÂä®‰ø°ÊÅØ
        _show_startup_info(host, port, workers, reload)
        
        # ÂêØÂä®ÊúçÂä°Âô®
        uvicorn.run(
            "suoke_api_gateway.main:app",
            host=host,
            port=port,
            workers=workers if not reload else 1,
            reload=reload,
            log_config=None,  # ‰ΩøÁî®Êàë‰ª¨Ëá™Â∑±ÁöÑÊó•ÂøóÈÖçÁΩÆ
            access_log=False,  # ÈÄöËøá‰∏≠Èó¥‰ª∂ËÆ∞ÂΩïËÆøÈóÆÊó•Âøó
        )
        
    except Exception as e:
        console.print(f"[red]ÂêØÂä®Â§±Ë¥•: {e}[/red]")
        sys.exit(1)


@cli.command()
@click.option(
    "--host",
    default="0.0.0.0",
    help="ÁõëÂê¨Âú∞ÂùÄ",
    show_default=True,
)
@click.option(
    "--port",
    default=8000,
    type=int,
    help="ÁõëÂê¨Á´ØÂè£",
    show_default=True,
)
@click.option(
    "--config",
    type=click.Path(exists=True),
    help="ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ",
)
def dev(host: str, port: int, config: Optional[str]) -> None:
    """ÂêØÂä®ÂºÄÂèëÊ®°ÂºèÊúçÂä°Âô®"""
    try:
        # Âä†ËΩΩÈÖçÁΩÆ
        if config:
            settings = create_settings_from_file(Path(config))
        else:
            settings = get_settings()
        
        # Âº∫Âà∂ÂºÄÂèëÊ®°ÂºèËÆæÁΩÆ
        settings.environment = "development"
        settings.log_level = "DEBUG"
        
        # ËÆæÁΩÆÊó•Âøó
        setup_logging(settings)
        
        # ÂàõÂª∫ÂºÄÂèëÂ∫îÁî®
        app = create_dev_app(settings)
        
        # ÊòæÁ§∫ÂºÄÂèëÊ®°Âºè‰ø°ÊÅØ
        _show_dev_info(host, port)
        
        # ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®
        uvicorn.run(
            app,
            host=host,
            port=port,
            reload=True,
            log_config=None,
            access_log=False,
        )
        
    except Exception as e:
        console.print(f"[red]ÂºÄÂèëÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•: {e}[/red]")
        sys.exit(1)


@cli.command()
@click.option(
    "--url",
    default="http://localhost:8000",
    help="API ÁΩëÂÖ≥Âú∞ÂùÄ",
    show_default=True,
)
@click.option(
    "--timeout",
    default=10,
    type=int,
    help="ËØ∑Ê±ÇË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºâ",
    show_default=True,
)
def health(url: str, timeout: int) -> None:
    """Ê£ÄÊü• API ÁΩëÂÖ≥ÂÅ•Â∫∑Áä∂ÊÄÅ"""
    try:
        with console.status("[bold green]Ê£ÄÊü•ÂÅ•Â∫∑Áä∂ÊÄÅ..."):
            response = httpx.get(f"{url}/health", timeout=timeout)
            
        if response.status_code == 200:
            data = response.json()
            _show_health_status(data)
        else:
            console.print(f"[red]ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•: HTTP {response.status_code}[/red]")
            sys.exit(1)
            
    except httpx.TimeoutException:
        console.print(f"[red]ÂÅ•Â∫∑Ê£ÄÊü•Ë∂ÖÊó∂: {timeout}Áßí[/red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•: {e}[/red]")
        sys.exit(1)


@cli.command()
@click.option(
    "--url",
    default="http://localhost:8000",
    help="API ÁΩëÂÖ≥Âú∞ÂùÄ",
    show_default=True,
)
@click.option(
    "--timeout",
    default=10,
    type=int,
    help="ËØ∑Ê±ÇË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºâ",
    show_default=True,
)
def metrics(url: str, timeout: int) -> None:
    """Ëé∑Âèñ API ÁΩëÂÖ≥ÊåáÊ†á"""
    try:
        with console.status("[bold green]Ëé∑ÂèñÊåáÊ†áÊï∞ÊçÆ..."):
            response = httpx.get(f"{url}/metrics", timeout=timeout)
            
        if response.status_code == 200:
            data = response.json()
            _show_metrics(data)
        else:
            console.print(f"[red]ÊåáÊ†áËé∑ÂèñÂ§±Ë¥•: HTTP {response.status_code}[/red]")
            sys.exit(1)
            
    except httpx.TimeoutException:
        console.print(f"[red]ÊåáÊ†áËé∑ÂèñË∂ÖÊó∂: {timeout}Áßí[/red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]ÊåáÊ†áËé∑ÂèñÂ§±Ë¥•: {e}[/red]")
        sys.exit(1)


def _show_startup_info(host: str, port: int, workers: int, reload: bool) -> None:
    """ÊòæÁ§∫ÂêØÂä®‰ø°ÊÅØ"""
    table = Table(title="üöÄ Á¥¢ÂÖãÁîüÊ¥ª API ÁΩëÂÖ≥ÂêØÂä®‰ø°ÊÅØ")
    table.add_column("ÈÖçÁΩÆÈ°π", style="cyan")
    table.add_column("ÂÄº", style="green")
    
    table.add_row("ÁõëÂê¨Âú∞ÂùÄ", f"{host}:{port}")
    table.add_row("Â∑•‰ΩúËøõÁ®ã", str(workers))
    table.add_row("Ëá™Âä®ÈáçËΩΩ", "ÊòØ" if reload else "Âê¶")
    table.add_row("Ê®°Âºè", "ÂºÄÂèë" if reload else "Áîü‰∫ß")
    
    console.print(table)
    console.print(f"\nüåê ËÆøÈóÆÂú∞ÂùÄ: [link]http://{host}:{port}[/link]")
    console.print(f"üìö API ÊñáÊ°£: [link]http://{host}:{port}/docs[/link]")
    console.print(f"‚ù§Ô∏è  ÂÅ•Â∫∑Ê£ÄÊü•: [link]http://{host}:{port}/health[/link]")
    console.print(f"üìä ÊåáÊ†áÁõëÊéß: [link]http://{host}:{port}/metrics[/link]")


def _show_dev_info(host: str, port: int) -> None:
    """ÊòæÁ§∫ÂºÄÂèëÊ®°Âºè‰ø°ÊÅØ"""
    console.print("[bold yellow]üîß ÂºÄÂèëÊ®°ÂºèÂêØÂä®[/bold yellow]")
    console.print(f"üåê ËÆøÈóÆÂú∞ÂùÄ: [link]http://{host}:{port}[/link]")
    console.print(f"üìö API ÊñáÊ°£: [link]http://{host}:{port}/docs[/link]")
    console.print(f"üîÑ Ëá™Âä®ÈáçËΩΩ: Â∑≤ÂêØÁî®")
    console.print(f"üìù Êó•ÂøóÁ∫ßÂà´: DEBUG")


def _show_health_status(data: dict) -> None:
    """ÊòæÁ§∫ÂÅ•Â∫∑Áä∂ÊÄÅ"""
    status = data.get("status", "unknown")
    timestamp = data.get("timestamp", "")
    
    if status == "healthy":
        console.print(f"[green]‚úÖ Á≥ªÁªüÂÅ•Â∫∑ ({timestamp})[/green]")
    else:
        console.print(f"[red]‚ùå Á≥ªÁªüÂºÇÂ∏∏ ({timestamp})[/red]")
    
    # ÊòæÁ§∫ÊúçÂä°Áä∂ÊÄÅ
    services = data.get("services", {})
    if services:
        table = Table(title="ÊúçÂä°Áä∂ÊÄÅ")
        table.add_column("ÊúçÂä°Âêç", style="cyan")
        table.add_column("Áä∂ÊÄÅ", style="green")
        table.add_column("ÂÅ•Â∫∑Á´ØÁÇπ", style="yellow")
        table.add_column("ÊÄªÁ´ØÁÇπ", style="blue")
        
        for service_name, service_data in services.items():
            service_status = service_data.get("status", "unknown")
            healthy_count = service_data.get("healthy_endpoints", 0)
            total_count = service_data.get("total_endpoints", 0)
            
            status_icon = "‚úÖ" if service_status == "healthy" else "‚ùå"
            table.add_row(
                service_name,
                f"{status_icon} {service_status}",
                str(healthy_count),
                str(total_count),
            )
        
        console.print(table)


def _show_metrics(data: dict) -> None:
    """ÊòæÁ§∫ÊåáÊ†á‰ø°ÊÅØ"""
    table = Table(title="üìä Á≥ªÁªüÊåáÊ†á")
    table.add_column("ÊåáÊ†á", style="cyan")
    table.add_column("ÂÄº", style="green")
    
    # Âü∫Á°ÄÊåáÊ†á
    if "total_requests" in data:
        table.add_row("ÊÄªËØ∑Ê±ÇÊï∞", str(data["total_requests"]))
    if "success_rate" in data:
        rate = data["success_rate"] * 100
        table.add_row("ÊàêÂäüÁéá", f"{rate:.2f}%")
    if "average_response_time" in data:
        table.add_row("Âπ≥ÂùáÂìçÂ∫îÊó∂Èó¥", f"{data['average_response_time']:.3f}s")
    if "requests_per_second" in data:
        table.add_row("ÊØèÁßíËØ∑Ê±ÇÊï∞", f"{data['requests_per_second']:.2f}")
    
    # Á≥ªÁªüÊåáÊ†á
    system = data.get("system", {})
    if system:
        if "cpu_percent" in system:
            table.add_row("CPU ‰ΩøÁî®Áéá", f"{system['cpu_percent']:.1f}%")
        if "memory_percent" in system:
            table.add_row("ÂÜÖÂ≠ò‰ΩøÁî®Áéá", f"{system['memory_percent']:.1f}%")
        if "disk_percent" in system:
            table.add_row("Á£ÅÁõò‰ΩøÁî®Áéá", f"{system['disk_percent']:.1f}%")
    
    console.print(table)


def main() -> None:
    """‰∏ªÂáΩÊï∞"""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]Áî®Êà∑‰∏≠Êñ≠Êìç‰Ωú[/yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"[red]Á®ãÂ∫èÂºÇÂ∏∏: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    main()
