syntax = "proto3";

package api_gateway;

option go_package = "github.com/SUOKE2024/api-gateway/api/grpc";
option java_multiple_files = true;
option java_package = "life.suoke.api.gateway";
option java_outer_classname = "ApiGatewayProto";

// 健康检查请求
message HealthCheckRequest {
  // 可选的服务名称，用于检查特定服务
  string service_name = 1;
}

// 健康检查响应
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  
  // 服务状态
  ServingStatus status = 1;
  
  // 额外信息
  string message = 2;
}

// 通用代理请求
message ProxyRequest {
  // 目标服务名称
  string service = 1;
  
  // 请求路径
  string path = 2;
  
  // HTTP方法
  string method = 3;
  
  // 请求头
  map<string, string> headers = 4;
  
  // 请求体
  bytes body = 5;
  
  // 查询参数
  map<string, string> query_params = 6;
}

// 通用代理响应
message ProxyResponse {
  // 状态码
  int32 status_code = 1;
  
  // 响应头
  map<string, string> headers = 2;
  
  // 响应体
  bytes body = 3;
  
  // 错误信息（如果有）
  string error = 4;
}

// 获取路由信息请求
message GetRoutesRequest {
  // 可选过滤条件
  string service_name = 1;
}

// 路由信息
message RouteInfo {
  // 路由名称
  string name = 1;
  
  // 路径前缀
  string prefix = 2;
  
  // 目标服务
  string service = 3;
  
  // 是否需要认证
  bool auth_required = 4;
}

// 获取路由信息响应
message GetRoutesResponse {
  // 路由列表
  repeated RouteInfo routes = 1;
}

// 获取服务状态请求
message GetServiceStatusRequest {
  // 服务名称列表
  repeated string service_names = 1;
}

// 服务状态
message ServiceStatus {
  // 服务名称
  string name = 1;
  
  // 是否可用
  bool available = 2;
  
  // 端点数量
  int32 endpoint_count = 3;
  
  // 健康端点数量
  int32 healthy_endpoint_count = 4;
}

// 获取服务状态响应
message GetServiceStatusResponse {
  // 服务状态列表
  repeated ServiceStatus statuses = 1;
}

// ApiGateway服务定义
service ApiGateway {
  // 健康检查
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse);
  
  // 代理请求（通用）
  rpc ProxyRequest (ProxyRequest) returns (ProxyResponse);
  
  // 获取路由信息
  rpc GetRoutes (GetRoutesRequest) returns (GetRoutesResponse);
  
  // 获取服务状态
  rpc GetServiceStatus (GetServiceStatusRequest) returns (GetServiceStatusResponse);
} 