version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: suoke_postgres
    environment:
      POSTGRES_DB: suoke_life
      POSTGRES_USER: suoke_user
      POSTGRES_PASSWORD: suoke_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U suoke_user -d suoke_life"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - suoke_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: suoke_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - suoke_network

  # 认证服务
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: suoke_auth_service
    environment:
      # 数据库配置
      DATABASE_URL: postgresql+asyncpg://suoke_user:suoke_password@postgres:5432/suoke_life
      
      # Redis配置
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # JWT配置
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # 邮件配置
      EMAIL_PROVIDER: smtp
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
      EMAIL_FROM: noreply@suokelife.com
      EMAIL_FROM_NAME: 索克生活
      
      # 应用配置
      APP_NAME: 索克生活认证服务
      APP_VERSION: 1.0.0
      DEBUG: false
      ENVIRONMENT: development
      
      # 安全配置
      ALLOWED_HOSTS: "*"
      CORS_ORIGINS: "http://localhost:3000,http://localhost:8080"
      
      # 监控配置
      ENABLE_METRICS: true
      METRICS_PORT: 9090
    ports:
      - "8001:8000"
      - "9091:9090"  # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./auth-service/logs:/app/logs
    networks:
      - suoke_network

  # 用户服务
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: suoke_user_service
    environment:
      # 数据库配置
      DATABASE_URL: postgresql+asyncpg://suoke_user:suoke_password@postgres:5432/suoke_life
      
      # Redis配置
      REDIS_URL: redis://:redis_password@redis:6379/1
      
      # 认证服务配置
      AUTH_SERVICE_URL: http://auth-service:8000
      AUTH_SERVICE_TIMEOUT: 30
      
      # 应用配置
      APP_NAME: 索克生活用户服务
      APP_VERSION: 1.0.0
      DEBUG: false
      ENVIRONMENT: development
      
      # 缓存配置
      CACHE_TTL: 300
      CACHE_MAX_CONNECTIONS: 20
      
      # 性能配置
      DB_POOL_SIZE: 20
      DB_MAX_OVERFLOW: 30
      DB_POOL_TIMEOUT: 30
      DB_POOL_RECYCLE: 3600
      
      # 监控配置
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      
      # 分析配置
      ENABLE_ANALYTICS: true
      ML_MODEL_PATH: /app/models
    ports:
      - "8002:8000"
      - "9092:9090"  # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./user-service/logs:/app/logs
      - ./user-service/models:/app/models
    networks:
      - suoke_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: suoke_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - suoke_network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: suoke_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - suoke_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: suoke_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - user-service
    networks:
      - suoke_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  suoke_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 