apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-service
  namespace: suoke-life
  labels:
    app: blockchain-service
    service: blockchain
spec:
  replicas: 3
  selector:
    matchLabels:
      app: blockchain-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: blockchain-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: blockchain-service
        image: ${DOCKER_REGISTRY}/blockchain-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 50055
          name: grpc
        - containerPort: 8080
          name: metrics
        env:
        - name: CONFIG_FILE
          value: "/app/config/prod.yaml"
        - name: LOG_LEVEL
          value: "INFO"
        - name: NETWORK_TYPE
          valueFrom:
            configMapKeyRef:
              name: blockchain-config
              key: network_type
        - name: NODE_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: blockchain-secrets
              key: node_endpoint
        - name: CHAIN_ID
          valueFrom:
            configMapKeyRef:
              name: blockchain-config
              key: chain_id
        - name: WALLET_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: blockchain-secrets
              key: wallet_private_key
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: contracts-volume
          mountPath: /app/internal/blockchain/contracts
        - name: logs-volume
          mountPath: /app/logs
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import socket
              sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              sock.connect(('localhost', 50055))
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import socket
              sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              sock.connect(('localhost', 50055))
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        startupProbe:
          exec:
            command:
            - python
            - -c
            - |
              import socket
              sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
              sock.connect(('localhost', 50055))
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 30
      volumes:
      - name: config-volume
        configMap:
          name: blockchain-service-config
      - name: contracts-volume
        configMap:
          name: blockchain-contracts
      - name: logs-volume
        emptyDir: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-service
  namespace: suoke-life
  labels:
    app: blockchain-service
spec:
  type: ClusterIP
  selector:
    app: blockchain-service
  ports:
  - port: 50055
    targetPort: 50055
    name: grpc
  - port: 8080
    targetPort: 8080
    name: metrics
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-service-config
  namespace: suoke-life
data:
  prod.yaml: |
    server:
      port: 50055
      max_workers: 10
      max_message_length: 100 * 1024 * 1024  # 100MB
    
    blockchain:
      network_type: ${NETWORK_TYPE}
      node:
        endpoint: ${NODE_ENDPOINT}
        chain_id: ${CHAIN_ID}
        is_poa: true
      wallet:
        use_keystore_file: false
        private_key: ${WALLET_PRIVATE_KEY}
        gas_limit: 5000000
      contracts:
        health_data: ${HEALTH_DATA_CONTRACT}
        zkp_verifier: ${ZKP_VERIFIER_CONTRACT}
        access_control: ${ACCESS_CONTROL_CONTRACT}
        factory: ${CONTRACT_FACTORY_ADDRESS}
        artifacts_dir: "/app/internal/blockchain/contracts"
      events:
        poll_interval: 5
    
    zkp:
      verifier_configs_dir: "/app/config/verifiers"
    
    logging:
      level: ${LOG_LEVEL}
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      file: "/app/logs/blockchain-service.log"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-config
  namespace: suoke-life
data:
  network_type: "ethereum"
  chain_id: "1"
  poll_interval: "5"
---
apiVersion: v1
kind: Secret
metadata:
  name: blockchain-secrets
  namespace: suoke-life
type: Opaque
data:
  node_endpoint: ${BASE64_NODE_ENDPOINT}
  wallet_private_key: ${BASE64_WALLET_PRIVATE_KEY}
  health_data_contract: ${BASE64_HEALTH_DATA_CONTRACT}
  zkp_verifier_contract: ${BASE64_ZKP_VERIFIER_CONTRACT}
  access_control_contract: ${BASE64_ACCESS_CONTROL_CONTRACT}
  contract_factory_address: ${BASE64_CONTRACT_FACTORY_ADDRESS}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blockchain-service-hpa
  namespace: suoke-life
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blockchain-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blockchain-service-network-policy
  namespace: suoke-life
spec:
  podSelector:
    matchLabels:
      app: blockchain-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: suoke-life
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 50055
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.0.0/16
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blockchain-service-pdb
  namespace: suoke-life
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: blockchain-service 