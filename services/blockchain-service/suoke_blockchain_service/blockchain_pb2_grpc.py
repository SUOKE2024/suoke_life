# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import blockchain_pb2 as blockchain__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in blockchain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BlockchainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreHealthData = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/StoreHealthData',
                request_serializer=blockchain__pb2.StoreHealthDataRequest.SerializeToString,
                response_deserializer=blockchain__pb2.StoreHealthDataResponse.FromString,
                _registered_method=True)
        self.VerifyHealthData = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/VerifyHealthData',
                request_serializer=blockchain__pb2.VerifyHealthDataRequest.SerializeToString,
                response_deserializer=blockchain__pb2.VerifyHealthDataResponse.FromString,
                _registered_method=True)
        self.VerifyWithZKP = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/VerifyWithZKP',
                request_serializer=blockchain__pb2.VerifyWithZKPRequest.SerializeToString,
                response_deserializer=blockchain__pb2.VerifyWithZKPResponse.FromString,
                _registered_method=True)
        self.GetHealthDataRecords = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/GetHealthDataRecords',
                request_serializer=blockchain__pb2.GetHealthDataRecordsRequest.SerializeToString,
                response_deserializer=blockchain__pb2.GetHealthDataRecordsResponse.FromString,
                _registered_method=True)
        self.AuthorizeAccess = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/AuthorizeAccess',
                request_serializer=blockchain__pb2.AuthorizeAccessRequest.SerializeToString,
                response_deserializer=blockchain__pb2.AuthorizeAccessResponse.FromString,
                _registered_method=True)
        self.RevokeAccess = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/RevokeAccess',
                request_serializer=blockchain__pb2.RevokeAccessRequest.SerializeToString,
                response_deserializer=blockchain__pb2.RevokeAccessResponse.FromString,
                _registered_method=True)
        self.GetBlockchainStatus = channel.unary_unary(
                '/suokelife.blockchain.BlockchainService/GetBlockchainStatus',
                request_serializer=blockchain__pb2.GetBlockchainStatusRequest.SerializeToString,
                response_deserializer=blockchain__pb2.GetBlockchainStatusResponse.FromString,
                _registered_method=True)


class BlockchainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreHealthData(self, request, context):
        """存储健康数据到区块链
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyHealthData(self, request, context):
        """验证健康数据完整性
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyWithZKP(self, request, context):
        """使用零知识证明验证健康数据属性
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHealthDataRecords(self, request, context):
        """获取用户健康数据记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeAccess(self, request, context):
        """授权访问健康数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeAccess(self, request, context):
        """撤销访问授权
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockchainStatus(self, request, context):
        """获取区块链节点状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockchainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreHealthData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreHealthData,
                    request_deserializer=blockchain__pb2.StoreHealthDataRequest.FromString,
                    response_serializer=blockchain__pb2.StoreHealthDataResponse.SerializeToString,
            ),
            'VerifyHealthData': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyHealthData,
                    request_deserializer=blockchain__pb2.VerifyHealthDataRequest.FromString,
                    response_serializer=blockchain__pb2.VerifyHealthDataResponse.SerializeToString,
            ),
            'VerifyWithZKP': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyWithZKP,
                    request_deserializer=blockchain__pb2.VerifyWithZKPRequest.FromString,
                    response_serializer=blockchain__pb2.VerifyWithZKPResponse.SerializeToString,
            ),
            'GetHealthDataRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHealthDataRecords,
                    request_deserializer=blockchain__pb2.GetHealthDataRecordsRequest.FromString,
                    response_serializer=blockchain__pb2.GetHealthDataRecordsResponse.SerializeToString,
            ),
            'AuthorizeAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthorizeAccess,
                    request_deserializer=blockchain__pb2.AuthorizeAccessRequest.FromString,
                    response_serializer=blockchain__pb2.AuthorizeAccessResponse.SerializeToString,
            ),
            'RevokeAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeAccess,
                    request_deserializer=blockchain__pb2.RevokeAccessRequest.FromString,
                    response_serializer=blockchain__pb2.RevokeAccessResponse.SerializeToString,
            ),
            'GetBlockchainStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockchainStatus,
                    request_deserializer=blockchain__pb2.GetBlockchainStatusRequest.FromString,
                    response_serializer=blockchain__pb2.GetBlockchainStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'suokelife.blockchain.BlockchainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('suokelife.blockchain.BlockchainService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BlockchainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreHealthData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/StoreHealthData',
            blockchain__pb2.StoreHealthDataRequest.SerializeToString,
            blockchain__pb2.StoreHealthDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyHealthData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/VerifyHealthData',
            blockchain__pb2.VerifyHealthDataRequest.SerializeToString,
            blockchain__pb2.VerifyHealthDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyWithZKP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/VerifyWithZKP',
            blockchain__pb2.VerifyWithZKPRequest.SerializeToString,
            blockchain__pb2.VerifyWithZKPResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHealthDataRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/GetHealthDataRecords',
            blockchain__pb2.GetHealthDataRecordsRequest.SerializeToString,
            blockchain__pb2.GetHealthDataRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthorizeAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/AuthorizeAccess',
            blockchain__pb2.AuthorizeAccessRequest.SerializeToString,
            blockchain__pb2.AuthorizeAccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/RevokeAccess',
            blockchain__pb2.RevokeAccessRequest.SerializeToString,
            blockchain__pb2.RevokeAccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockchainStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/suokelife.blockchain.BlockchainService/GetBlockchainStatus',
            blockchain__pb2.GetBlockchainStatusRequest.SerializeToString,
            blockchain__pb2.GetBlockchainStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
