syntax = "proto3";

package suokelife.blockchain;

option go_package = "github.com/suoke-life/blockchain-service/api/grpc";

service BlockchainService {
  // 存储健康数据到区块链
  rpc StoreHealthData(StoreHealthDataRequest) returns (StoreHealthDataResponse);
  
  // 验证健康数据完整性
  rpc VerifyHealthData(VerifyHealthDataRequest) returns (VerifyHealthDataResponse);
  
  // 使用零知识证明验证健康数据属性
  rpc VerifyWithZKP(VerifyWithZKPRequest) returns (VerifyWithZKPResponse);
  
  // 获取用户健康数据记录
  rpc GetHealthDataRecords(GetHealthDataRecordsRequest) returns (GetHealthDataRecordsResponse);
  
  // 授权访问健康数据
  rpc AuthorizeAccess(AuthorizeAccessRequest) returns (AuthorizeAccessResponse);
  
  // 撤销访问授权
  rpc RevokeAccess(RevokeAccessRequest) returns (RevokeAccessResponse);
  
  // 获取区块链节点状态
  rpc GetBlockchainStatus(GetBlockchainStatusRequest) returns (GetBlockchainStatusResponse);
}

// 存储健康数据请求
message StoreHealthDataRequest {
  string user_id = 1;
  string data_type = 2; // 例如：体重、血压、五诊数据等
  bytes data_hash = 3;  // 数据哈希
  bytes encrypted_data = 4; // 加密后的数据
  map<string, string> metadata = 5; // 元数据
  int64 timestamp = 6;
}

// 存储健康数据响应
message StoreHealthDataResponse {
  string transaction_id = 1; // 区块链交易ID
  string block_hash = 2;     // 区块哈希
  bool success = 3;
  string message = 4;
}

// 验证健康数据请求
message VerifyHealthDataRequest {
  string transaction_id = 1;
  bytes data_hash = 2;
}

// 验证健康数据响应
message VerifyHealthDataResponse {
  bool valid = 1;
  string message = 2;
  int64 verification_timestamp = 3;
}

// 零知识证明验证请求
message VerifyWithZKPRequest {
  string user_id = 1;
  string verifier_id = 2; // 验证者ID
  string data_type = 3;
  bytes proof = 4;        // 零知识证明
  bytes public_inputs = 5; // 公共输入
}

// 零知识证明验证响应
message VerifyWithZKPResponse {
  bool valid = 1;
  string message = 2;
  map<string, string> verification_details = 3;
}

// 获取健康数据记录请求
message GetHealthDataRecordsRequest {
  string user_id = 1;
  string data_type = 2; // 可选，特定类型的数据
  int64 start_time = 3; // 可选，开始时间戳
  int64 end_time = 4;   // 可选，结束时间戳
  int32 page = 5;       // 分页
  int32 page_size = 6;  // 每页大小
}

// 健康数据记录
message HealthDataRecord {
  string transaction_id = 1;
  string data_type = 2;
  bytes data_hash = 3;
  map<string, string> metadata = 4;
  int64 timestamp = 5;
  string block_hash = 6;
}

// 获取健康数据记录响应
message GetHealthDataRecordsResponse {
  repeated HealthDataRecord records = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// 授权访问请求
message AuthorizeAccessRequest {
  string user_id = 1;          // 数据所有者
  string authorized_id = 2;    // 被授权方ID
  repeated string data_types = 3; // 授权的数据类型
  int64 expiration_time = 4;   // 授权过期时间
  map<string, string> access_policies = 5; // 访问策略
}

// 授权访问响应
message AuthorizeAccessResponse {
  string authorization_id = 1;
  bool success = 2;
  string message = 3;
}

// 撤销访问请求
message RevokeAccessRequest {
  string authorization_id = 1;
  string user_id = 2;
  string revocation_reason = 3; // 可选
}

// 撤销访问响应
message RevokeAccessResponse {
  bool success = 1;
  string message = 2;
  int64 revocation_timestamp = 3;
}

// 获取区块链状态请求
message GetBlockchainStatusRequest {
  bool include_node_info = 1; // 是否包含节点信息
}

// 获取区块链状态响应
message GetBlockchainStatusResponse {
  int64 current_block_height = 1;
  int32 connected_nodes = 2;
  string consensus_status = 3;
  double sync_percentage = 4;
  map<string, string> node_info = 5; // 如果请求中include_node_info=true
  int64 last_block_timestamp = 6;
} 