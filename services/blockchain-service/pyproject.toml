[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "suoke-blockchain-service"
version = "1.0.0"
description = "索克生活区块链服务 - 健康数据的区块链存储、验证和访问控制"
readme = "README.md"
license = { text = "Proprietary" }
authors = [
    { name = "SuoKe Life Team", email = "dev@suoke.life" }
]
maintainers = [
    { name = "SuoKe Life Team", email = "dev@suoke.life" }
]
keywords = ["blockchain", "health", "data", "privacy", "zkp", "suoke"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.13.3"

dependencies = [
    # 核心 Web 框架
    "fastapi>=0.115.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "uvicorn[standard]>=0.32.0",
    # gRPC 通信
    "grpcio>=1.68.0",
    "grpcio-tools>=1.68.0",
    "grpcio-health-checking>=1.68.0",
    "grpcio-reflection>=1.68.0",
    "protobuf>=5.28.0",
    # 区块链相关
    "web3>=7.5.0",
    "py-solc-x>=2.0.3",
    "eth-account>=0.13.0",
    "eth-utils>=5.1.0",
    "eth-typing>=5.0.0",
    # 数据库
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    # 缓存
    "redis[hiredis]>=5.2.0",
    "aioredis>=2.0.1",
    # 加密和安全
    "cryptography>=43.0.0",
    "pyjwt>=2.10.0",
    "passlib[bcrypt]>=1.7.4",
    # IPFS 集成
    "ipfshttpclient>=0.8.0a2",
    "aiofiles>=24.1.0",
    # 零知识证明
    "py-ecc>=7.0.1",
    "coincurve>=20.0.0",
    # 监控和日志
    "prometheus-client>=0.21.0",
    "opentelemetry-api>=1.28.0",
    "opentelemetry-sdk>=1.28.0",
    "opentelemetry-instrumentation-fastapi>=0.49b0",
    "structlog>=24.4.0",
    # 工具库
    "tenacity>=9.0.0",
    "httpx>=0.28.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    # 测试
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.0",
    
    # 代码质量
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "isort>=5.13.0",
    "pre-commit>=4.0.0",
    
    # 文档
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
]

[project.scripts]
blockchain-service = "blockchain_service.main:main"

[project.urls]
Homepage = "https://github.com/suoke-life/suoke-blockchain-service"
Documentation = "https://docs.suoke.life/blockchain-service"
Repository = "https://github.com/suoke-life/suoke-blockchain-service"
Issues = "https://github.com/suoke-life/suoke-blockchain-service/issues"

# Hatchling 配置
[tool.hatch.version]
path = "blockchain_service/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["blockchain_service"]

# Ruff 配置 (替代 flake8, isort, 部分 pylint)
[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["blockchain_service"]

# Black 配置
[tool.black]
target-version = ['py313']
line-length = 100
skip-string-normalization = true

# MyPy 配置
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "web3.*",
    "eth_account.*",
    "eth_utils.*",
    "ipfshttpclient.*",
    "py_ecc.*",
    "coincurve.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=blockchain_service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage 配置
[tool.coverage.run]
source = ["blockchain_service"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
]

# Pre-commit hooks 配置在 .pre-commit-config.yaml 文件中定义