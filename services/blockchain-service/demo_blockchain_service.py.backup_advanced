"""
demo_blockchain_service - 索克生活项目模块
"""

from datetime import datetime, timedelta
from suoke_blockchain_service.config import settings
from suoke_blockchain_service.database import init_database, close_database
from suoke_blockchain_service.logging import configure_logging, get_logger
from suoke_blockchain_service.service import get_blockchain_service
from typing import Dict, Any
import asyncio
import json
import uuid

#! / usr / bin / env python3
"""
Blockchain Service 功能演示脚本

演示区块链服务的核心功能，包括数据存储、验证、访问控制等。
"""


# 导入服务模块

logger = get_logger(__name__)

class BlockchainServiceDemo:
    """区块链服务演示类"""

    def __init__(self) - > None:
        """TODO: 添加文档字符串"""
        self.service = get_blockchain_service()
        self.demo_user_id = "demo - user - " + str(uuid.uuid4())[:8]
        self.demo_grantee_id = "demo - grantee - " + str(uuid.uuid4())[:8]

    async def demo_health_data_storage(self) - > Dict[str, Any]:
        """演示健康数据存储功能"""
        print("\n === 演示1: 健康数据存储 === ")

        # 准备示例健康数据
        health_data = {
            "user_id": self.demo_user_id,
            "timestamp": datetime.now().isoformat(),
            "data_type": "heart_rate",
            "measurements": {
                "heart_rate": 72,
                "blood_pressure": {"systolic": 120, "diastolic": 80},
                "temperature": 36.5,
                "weight": 70.5
            },
            "device_info": {
                "device_id": "smartwatch - 001",
                "manufacturer": "HealthTech",
                "model": "HT - Watch - Pro",
                "firmware_version": "2.1.0"
            },
            "location": {
                "latitude": 39.9042,
                "longitude": 116.4074,
                "accuracy": 10
            },
            "metadata": {
                "session_id": str(uuid.uuid4()),
                "quality_score": 0.95,
                "notes": "Regular morning measurement"
            }
        }

        print(f"📊 存储用户 {self.demo_user_id} 的健康数据...")
        print(f"📋 数据类型: {health_data['data_type']}")
        print(f"📏 数据大小: {len(json.dumps(health_data))} bytes")

        try:
            # 调用存储服务
            result = await self.service.store_health_data(
                user_id = self.demo_user_id,
                data = health_data,
                data_type = "heart_rate",
                permissions = {
                    "read": ["doctor", "emergency"],
                    "write": ["self"],
                    "share": ["family"]
                }
            )

            print(f"✅ 存储成功!")
            print(f"📝 记录ID: {result['record_id']}")
            print(f"🔗 交易ID: {result['transaction_id']}")
            print(f"🔒 数据哈希: {result['data_hash'][:16]}...")
            print(f"🌐 IPFS哈希: {result['ipfs_hash']}")
            print(f"🔐 零知识证明: {'已生成' if result['zkp_proof'] else '未生成'}")

            return result

        except Exception as e:
            print(f"❌ 存储失败: {str(e)}")
            return {}

    async def demo_health_data_verification(self, record_id: str) - > Dict[str, Any]:
        """演示健康数据验证功能"""
        print("\n === 演示2: 健康数据验证 === ")

        print(f"🔍 验证记录 {record_id}...")

        try:
            # 调用验证服务
            result = await self.service.verify_health_data(
                record_id = record_id,
                user_id = self.demo_user_id
            )

            print(f"📊 验证结果:")
            print(f"  🔗 区块链验证: {'✅ 通过' if result['blockchain_valid'] else '❌ 失败'}")
            print(f"  🔐 零知识证明: {'✅ 通过' if result['zkp_valid'] else '❌ 失败'}")
            print(f"  🌐 IPFS完整性: {'✅ 通过' if result['ipfs_valid'] else '❌ 失败'}")
            print(f"  🎯 综合验证: {'✅ 通过' if result['overall_valid'] else '❌ 失败'}")
            print(f"  ⏰ 验证时间: {result['verified_at']}")

            return result

        except Exception as e:
            print(f"❌ 验证失败: {str(e)}")
            return {}

    async def demo_access_control(self, record_id: str) - > Dict[str, Any]:
        """演示访问控制功能"""
        print("\n === 演示3: 访问控制 === ")

        # 授权访问
        print(f"🔑 授权用户 {self.demo_grantee_id} 访问记录 {record_id}...")

        try:
            # 授权访问
            grant_result = await self.service.grant_access(
                owner_id = self.demo_user_id,
                grantee_id = self.demo_grantee_id,
                record_id = record_id,
                access_level = "read",
                expires_at = datetime.now() + timedelta(hours = 24),
                permissions = {
                    "read_data": True,
                    "read_metadata": True,
                    "download": False,
                    "share": False
                }
            )

            print(f"✅ 授权成功!")
            print(f"🆔 授权ID: {grant_result['grant_id']}")
            print(f"🔗 交易哈希: {grant_result.get('transaction_hash', 'N / A')}")
            print(f"📅 过期时间: {grant_result['expires_at']}")

            # 查询访问授权
            print(f"\n📋 查询用户 {self.demo_user_id} 的授权列表...")
            grants = await self.service.get_access_grants(
                user_id = self.demo_user_id,
                as_owner = True,
                active_only = True
            )

            print(f"📊 找到 {len(grants)} 个有效授权:")
            for grant in grants:
                print(f"  👤 被授权者: {grant['grantee_id']}")
                print(f"  🔒 访问级别: {grant['access_level']}")
                print(f"  📅 授权时间: {grant['granted_at']}")
                print(f"  ⏰ 过期时间: {grant['expires_at'] or '永不过期'}")

            # 撤销访问
            print(f"\n🚫 撤销用户 {self.demo_grantee_id} 的访问权限...")
            revoke_result = await self.service.revoke_access(
                owner_id = self.demo_user_id,
                grantee_id = self.demo_grantee_id,
                record_id = record_id,
                reason = "演示完成"
            )

            print(f"✅ 撤销成功!")
            print(f"🆔 授权ID: {revoke_result['grant_id']}")
            print(f"📅 撤销时间: {revoke_result['revoked_at']}")
            print(f"📝 撤销原因: {revoke_result['reason']}")

            return {
                "grant_result": grant_result,
                "grants": grants,
                "revoke_result": revoke_result
            }

        except Exception as e:
            print(f"❌ 访问控制操作失败: {str(e)}")
            return {}

    async def demo_data_query(self) - > Dict[str, Any]:
        """演示数据查询功能"""
        print("\n === 演示4: 数据查询 === ")

        print(f"📋 查询用户 {self.demo_user_id} 的健康记录...")

        try:
            # 查询健康记录
            records = await self.service.get_health_records(
                user_id = self.demo_user_id,
                data_type = "heart_rate",
                limit = 10,
                offset = 0
            )

            print(f"📊 查询结果:")
            print(f"  📝 总记录数: {records['total_count']}")
            print(f"  📄 当前页记录: {len(records['records'])}")
            print(f"  📖 是否有更多: {records['has_more']}")

            for i, record in enumerate(records['records'], 1):
                print(f"\n  📋 记录 {i}:")
                print(f"    🆔 ID: {record['id']}")
                print(f"    📊 数据类型: {record['data_type']}")
                print(f"    🔒 数据哈希: {record['data_hash'][:16]}...")
                print(f"    📅 创建时间: {record['created_at']}")
                print(f"    🔗 交易状态: {record['transaction_status'] or 'N / A'}")
                print(f"    🔐 零知识证明: {'✅' if record['has_zkp'] else '❌'}")

            return records

        except Exception as e:
            print(f"❌ 查询失败: {str(e)}")
            return {}

    async def run_demo(self) - > None:
        """运行完整演示"""
        print("🚀 开始 Blockchain Service 功能演示")
        print(" = " * 50)

        try:
            # 演示1: 数据存储
            storage_result = await self.demo_health_data_storage()
            if not storage_result:
                print("❌ 数据存储演示失败，终止演示")
                return

            record_id = storage_result['record_id']

            # 演示2: 数据验证
            await self.demo_health_data_verification(record_id)

            # 演示3: 访问控制
            await self.demo_access_control(record_id)

            # 演示4: 数据查询
            await self.demo_data_query()

            print("\n" + " = " * 50)
            print("🎉 演示完成! 所有核心功能运行正常")
            print("\n📊 演示总结:")
            print("✅ 健康数据存储 - 支持加密存储和IPFS分布式存储")
            print("✅ 数据完整性验证 - 多层验证机制确保数据可信")
            print("✅ 访问权限控制 - 细粒度权限管理和时间限制")
            print("✅ 数据查询服务 - 高效的数据检索和分页支持")
            print("✅ 区块链集成 - 不可篡改的数据存证和审计")
            print("✅ 零知识证明 - 隐私保护的数据验证")

        except Exception as e:
            print(f"\n❌ 演示过程中发生错误: {str(e)}")
            logger.exception("演示失败")

async def main() - > None:
    """主函数"""
    # 配置日志
    configure_logging()

    print(f"🔧 配置信息:")
    print(f"  📱 应用名称: {settings.app_name}")
    print(f"  🔧 环境: {settings.environment}")
    print(f"  🐛 调试模式: {settings.debug}")
    print(f"  🗄️ 数据库: {settings.database.host}:{settings.database.port}")
    print(f"  🌐 IPFS节点: {settings.ipfs.node_url}")
    print(f"  ⛓️ 区块链节点: {settings.blockchain.eth_node_url}")

    try:
        # 初始化数据库
        print("\n🔄 初始化数据库连接...")
        await init_database()
        print("✅ 数据库连接成功")

        # 运行演示
        demo = BlockchainServiceDemo()
        await demo.run_demo()

    except Exception as e:
        print(f"\n❌ 初始化失败: {str(e)}")
        logger.exception("初始化失败")
    finally:
        # 清理资源
        print("\n🧹 清理资源...")
        await close_database()
        print("✅ 资源清理完成")

if __name__ == "__main__":
    asyncio.run(main())