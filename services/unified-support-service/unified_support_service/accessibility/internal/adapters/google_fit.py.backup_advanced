"""
google_fit - 索克生活项目模块
"""

from ..model.health_data import ActivityData, DataSource, HeartRateData, SleepData
from ..model.user_integration import PlatformType
from .base import AuthenticationError, AuthResult, BaseAdapter, SyncResult
from datetime import date, datetime, timedelta
from typing import Any
from urllib.parse import urlencode
import httpx

"""
Google Fit Platform Adapter
"""





class GoogleFitAdapter(BaseAdapter):
    """Google Fit平台适配器"""

    BASE_URL = "https: / /www.googleapis.com"
    AUTH_URL = "https: / /accounts.google.com / o / oauth2 / v2 / auth"
    TOKEN_URL = "https: / /oauth2.googleapis.com / token"

    def _get_platform_type(self) - > PlatformType:
        """TODO: 添加文档字符串"""
        return PlatformType.GOOGLE_FIT

    def _get_platform_name(self) - > str:
        """TODO: 添加文档字符串"""
        return "Google Fit"

    def get_required_scopes(self) - > list[str]:
        """TODO: 添加文档字符串"""
        return [
            "https: / /www.googleapis.com / auth / fitness.activity.read",
            "https: / /www.googleapis.com / auth / fitness.body.read",
            "https: / /www.googleapis.com / auth / fitness.sleep.read",
            "https: / /www.googleapis.com / auth / fitness.heart_rate.read"
        ]

    async def get_auth_url(self, user_id: str, redirect_uri: str, scopes: list[str]) - > str:
        """获取Google OAuth授权URL"""
        params = {
            "client_id": self.config["client_id"],
            "redirect_uri": redirect_uri,
            "scope": " ".join(scopes or self.get_required_scopes()),
            "response_type": "code",
            "access_type": "offline",
            "prompt": "consent",
            "state": f"user_id:{user_id}"
        }

        return f"{self.AUTH_URL}?{urlencode(params)}"

    async def handle_auth_callback(self, code: str, state: str) - > AuthResult:
        """处理Google OAuth回调"""
        try:
            # 交换授权码获取访问令牌
            token_data = {
                "client_id": self.config["client_id"],
                "client_secret": self.config["client_secret"],
                "code": code,
                "grant_type": "authorization_code",
                "redirect_uri": self.config["redirect_uri"]
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(self.TOKEN_URL, data = token_data)

                if response.status_code ! = 200:
                    return AuthResult(
                        success = False,
                        error_message = f"获取访问令牌失败: {response.text}"
                    )

                token_info = response.json()

                # 获取用户信息
                user_info = await self.get_user_info(token_info["access_token"])

                expires_at = None
                if "expires_in" in token_info:
                    expires_at = datetime.now() + timedelta(seconds = token_info["expires_in"])

                return AuthResult(
                    success = True,
                    access_token = token_info["access_token"],
                    refresh_token = token_info.get("refresh_token"),
                    expires_at = expires_at,
                    platform_user_id = user_info.get("id"),
                    platform_username = user_info.get("email"),
                    scopes = token_info.get("scope", "").split()
                )

        except Exception as e:
            self.logger.error(f"处理Google Fit认证回调失败: {str(e)}")
            return AuthResult(
                success = False,
                error_message = f"认证失败: {str(e)}"
            )

    async def refresh_token(self, refresh_token: str) - > AuthResult:
        """刷新Google访问令牌"""
        try:
            token_data = {
                "client_id": self.config["client_id"],
                "client_secret": self.config["client_secret"],
                "refresh_token": refresh_token,
                "grant_type": "refresh_token"
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(self.TOKEN_URL, data = token_data)

                if response.status_code ! = 200:
                    return AuthResult(
                        success = False,
                        error_message = f"刷新令牌失败: {response.text}"
                    )

                token_info = response.json()

                expires_at = None
                if "expires_in" in token_info:
                    expires_at = datetime.now() + timedelta(seconds = token_info["expires_in"])

                return AuthResult(
                    success = True,
                    access_token = token_info["access_token"],
                    refresh_token = refresh_token,  # 保持原有的refresh_token
                    expires_at = expires_at
                )

        except Exception as e:
            self.logger.error(f"刷新Google Fit令牌失败: {str(e)}")
            return AuthResult(
                success = False,
                error_message = f"刷新令牌失败: {str(e)}"
            )

    async def revoke_access(self, access_token: str) - > bool:
        """撤销Google访问权限"""
        try:
            revoke_url = f"https: / /oauth2.googleapis.com / revoke?token = {access_token}"

            async with httpx.AsyncClient() as client:
                response = await client.post(revoke_url)
                return response.status_code == 200

        except Exception as e:
            self.logger.error(f"撤销Google Fit访问权限失败: {str(e)}")
            return False

    async def get_user_info(self, access_token: str) - > dict[str, Any]:
        """获取Google用户信息"""
        try:
            headers = {"Authorization": f"Bearer {access_token}"}

            async with httpx.AsyncClient() as client:
                response = await client.get(
                    "https: / /www.googleapis.com / oauth2 / v2 / userinfo",
                    headers = headers
                )

                if response.status_code ! = 200:
                    self._handle_api_error(response.status_code, response.text)

                return response.json()

        except Exception as e:
            self.logger.error(f"获取Google用户信息失败: {str(e)}")
            raise AuthenticationError(f"获取用户信息失败: {str(e)}")

    async def sync_activity_data(
        self,
        access_token: str,
        start_date: date,
        end_date: date
    ) - > SyncResult:
        """同步Google Fit活动数据"""
        try:
            headers = {"Authorization": f"Bearer {access_token}"}

            # 转换日期为纳秒时间戳
            start_time_ns = int(datetime.combine(start_date, datetime.min.time()).timestamp() * 1000000000)
            end_time_ns = int(datetime.combine(end_date, datetime.max.time()).timestamp() * 1000000000)

            # 构建数据源请求
            request_body = {
                "aggregateBy": [
                    {"dataTypeName": "com.google.step_count.delta"},
                    {"dataTypeName": "com.google.distance.delta"},
                    {"dataTypeName": "com.google.calories.expended"},
                    {"dataTypeName": "com.google.active_minutes"}
                ],
                "bucketByTime": {"durationMillis": 86400000},  # 1天
                "startTimeMillis": start_time_ns / / 1000000,
                "endTimeMillis": end_time_ns / / 1000000
            }

            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.BASE_URL} / fitness / v1 / users / me / dataset:aggregate",
                    headers = headers,
                    json = request_body
                )

                if response.status_code ! = 200:
                    self._handle_api_error(response.status_code, response.text)

                data = response.json()

                # 处理返回的数据
                activity_records = []
                for bucket in data.get("bucket", []):
                    record_date = datetime.fromtimestamp(
                        bucket["startTimeMillis"] / 1000
                    ).date()

                    activity_data = {
                        "record_date": record_date,
                        "steps": 0,
                        "distance": 0.0,
                        "calories": 0.0,
                        "active_minutes": 0
                    }

                    for dataset in bucket.get("dataset", []):
                        data_type = dataset.get("dataSourceId", "")

                        for point in dataset.get("point", []):
                            for value in point.get("value", []):
                                if "step_count" in data_type:
                                    activity_data["steps"] + = value.get("intVal", 0)
                                elif "distance" in data_type:
                                    activity_data["distance"] + = value.get("fpVal", 0.0) / 1000  # 转换为公里
                                elif "calories" in data_type:
                                    activity_data["calories"] + = value.get("fpVal", 0.0)
                                elif "active_minutes" in data_type:
                                    activity_data["active_minutes"] + = value.get("intVal", 0)

                    activity_records.append(activity_data)

                return SyncResult(
                    success = True,
                    synced_count = len(activity_records),
                    last_sync_time = datetime.now(),
                    data = activity_records
                )

        except Exception as e:
            self.logger.error(f"同步Google Fit活动数据失败: {str(e)}")
            return SyncResult(
                success = False,
                error_message = f"同步活动数据失败: {str(e)}"
            )

    async def sync_sleep_data(
        self,
        access_token: str,
        start_date: date,
        end_date: date
    ) - > SyncResult:
        """同步Google Fit睡眠数据"""
        try:
            headers = {"Authorization": f"Bearer {access_token}"}

            # Google Fit的睡眠数据API
            start_time_ns = int(datetime.combine(start_date, datetime.min.time()).timestamp() * 1000000000)
            end_time_ns = int(datetime.combine(end_date, datetime.max.time()).timestamp() * 1000000000)

            url = f"{self.BASE_URL} / fitness / v1 / users / me / dataSources / derived:com.google.sleep.segment:com.google.android.gms:merged / datasets / {start_time_ns} - {end_time_ns}"

            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers = headers)

                if response.status_code ! = 200:
                    self._handle_api_error(response.status_code, response.text)

                data = response.json()

                # 处理睡眠数据
                sleep_records = []
                for point in data.get("point", []):
                    sleep_start = datetime.fromtimestamp(
                        int(point["startTimeNanos"]) / 1000000000
                    )
                    sleep_end = datetime.fromtimestamp(
                        int(point["endTimeNanos"]) / 1000000000
                    )

                    sleep_duration = int((sleep_end - sleep_start).total_seconds() / 60)  # 分钟

                    sleep_data = {
                        "sleep_date": sleep_start.date(),
                        "sleep_start": sleep_start,
                        "sleep_end": sleep_end,
                        "total_sleep_time": sleep_duration,
                        "sleep_efficiency": 0.85,  # Google Fit可能不提供详细数据
                        "sleep_score": 75.0
                    }

                    sleep_records.append(sleep_data)

                return SyncResult(
                    success = True,
                    synced_count = len(sleep_records),
                    last_sync_time = datetime.now(),
                    data = sleep_records
                )

        except Exception as e:
            self.logger.error(f"同步Google Fit睡眠数据失败: {str(e)}")
            return SyncResult(
                success = False,
                error_message = f"同步睡眠数据失败: {str(e)}"
            )

    async def sync_heart_rate_data(
        self,
        access_token: str,
        start_date: date,
        end_date: date
    ) - > SyncResult:
        """同步Google Fit心率数据"""
        try:
            headers = {"Authorization": f"Bearer {access_token}"}

            start_time_ns = int(datetime.combine(start_date, datetime.min.time()).timestamp() * 1000000000)
            end_time_ns = int(datetime.combine(end_date, datetime.max.time()).timestamp() * 1000000000)

            url = f"{self.BASE_URL} / fitness / v1 / users / me / dataSources / derived:com.google.heart_rate.bpm:com.google.android.gms:merged / datasets / {start_time_ns} - {end_time_ns}"

            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers = headers)

                if response.status_code ! = 200:
                    self._handle_api_error(response.status_code, response.text)

                data = response.json()

                # 处理心率数据
                heart_rate_records = []
                for point in data.get("point", []):
                    record_time = datetime.fromtimestamp(
                        int(point["startTimeNanos"]) / 1000000000
                    )

                    for value in point.get("value", []):
                        heart_rate_data = {
                            "record_date": record_time.date(),
                            "record_time": record_time,
                            "heart_rate": int(value.get("fpVal", 0)),
                            "heart_rate_type": "resting"
                        }

                        heart_rate_records.append(heart_rate_data)

                return SyncResult(
                    success = True,
                    synced_count = len(heart_rate_records),
                    last_sync_time = datetime.now(),
                    data = heart_rate_records
                )

        except Exception as e:
            self.logger.error(f"同步Google Fit心率数据失败: {str(e)}")
            return SyncResult(
                success = False,
                error_message = f"同步心率数据失败: {str(e)}"
            )

    def _normalize_activity_data(self, raw_data: dict[str, Any], user_id: str) - > ActivityData:
        """标准化Google Fit活动数据"""
        return ActivityData(
            user_id = user_id,
            source = DataSource.GOOGLE_FIT,
            record_date = raw_data["record_date"],
            steps = raw_data.get("steps", 0),
            distance = raw_data.get("distance", 0.0),
            calories = raw_data.get("calories", 0.0),
            active_minutes = raw_data.get("active_minutes", 0),
            metadata = {"platform": "google_fit", "raw_data": raw_data}
        )

    def _normalize_sleep_data(self, raw_data: dict[str, Any], user_id: str) - > SleepData:
        """标准化Google Fit睡眠数据"""
        return SleepData(
            user_id = user_id,
            source = DataSource.GOOGLE_FIT,
            sleep_date = raw_data["sleep_date"],
            sleep_start = raw_data.get("sleep_start"),
            sleep_end = raw_data.get("sleep_end"),
            total_sleep_time = raw_data.get("total_sleep_time", 0),
            sleep_efficiency = raw_data.get("sleep_efficiency", 0.0),
            sleep_score = raw_data.get("sleep_score", 0.0),
            metadata = {"platform": "google_fit", "raw_data": raw_data}
        )

    def _normalize_heart_rate_data(self, raw_data: dict[str, Any], user_id: str) - > HeartRateData:
        """标准化Google Fit心率数据"""
        return HeartRateData(
            user_id = user_id,
            source = DataSource.GOOGLE_FIT,
            record_date = raw_data["record_date"],
            record_time = raw_data["record_time"],
            heart_rate = raw_data["heart_rate"],
            heart_rate_type = raw_data.get("heart_rate_type", "resting"),
            metadata = {"platform": "google_fit", "raw_data": raw_data}
        )
