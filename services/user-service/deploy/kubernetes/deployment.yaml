apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: suoke-life
  labels:
    app: user-service
    tier: backend
    part-of: suoke-life
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: user-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      containers:
      - name: user-service
        image: ${IMAGE_REGISTRY}/suoke-life/user-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
        - name: grpc
          containerPort: 50051
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        env:
        - name: USER_DB_PATH
          value: /data/user_service.db
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: suoke-environment
              key: environment
        - name: USER_SERVICE_VERSION
          valueFrom:
            configMapKeyRef:
              name: user-service-config
              key: version
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: user-service-secrets
              key: jwt-secret
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /data
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /health
            port: http
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: user-service-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: user-service-data
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: suoke-life
  labels:
    app: user-service
spec:
  selector:
    app: user-service
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 50051
    targetPort: grpc
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-service-ingress
  namespace: suoke-life
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.suoke.life
    secretName: api-suoke-life-tls
  rules:
  - host: api.suoke.life
    http:
      paths:
      - path: /users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: suoke-life
data:
  version: "1.0.0"
  config.yaml: |
    server:
      host: "0.0.0.0"
      port: 8000
      expose_docs: false
      cors:
        enabled: true
        origins:
          - "https://app.suoke.life"
          - "https://suoke.life"
    
    grpc:
      enabled: true
      port: 50051
    
    database:
      path: "/data/user_service.db"
      audit_log_path: "/data/user_audit_logs.db"
      pool_size: 20
      timeout: 30
    
    security:
      rbac:
        enabled: true
        excluded_paths:
          - "/health"
          - "/metrics"
          - "/docs"
          - "/redoc"
          - "/openapi.json"
      rate_limit:
        enabled: true
    
    logging:
      level: "INFO"
      log_to_file: true
      log_dir: "/data/logs"
      rotation:
        max_bytes: 10485760  # 10MB
        backup_count: 10
---
apiVersion: v1
kind: Secret
metadata:
  name: user-service-secrets
  namespace: suoke-life
type: Opaque
data:
  jwt-secret: c2Vj{{ "cmV0LXBhc3N3b3JkLWZvci1kZXYtZW52aXJvbm1lbnQtb25seS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==" | b64encode | b64encode }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-service-data
  namespace: suoke-life
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service-hpa
  namespace: suoke-life
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 30
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max 