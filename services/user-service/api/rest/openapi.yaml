openapi: 3.0.0
info:
  title: 索克生活用户服务 API
  description: 用户服务提供用户管理、身份验证、健康数据关联等功能
  version: 1.0.0
  contact:
    name: 索克生活开发团队
    email: dev@suoke.life
servers:
  - url: https://api.suoke.life/v1
    description: 生产环境
  - url: https://dev.api.suoke.life/v1
    description: 开发环境
paths:
  /users:
    post:
      summary: 创建新用户
      description: 注册新用户并返回用户信息
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 用户创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: 用户名或邮箱已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: 获取用户列表
      description: 获取用户列表，支持分页和过滤
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: page
          in: query
          description: 页码，从1开始
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 每页条目数
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: 按用户状态过滤
          schema:
            type: string
            enum: [active, inactive, banned, pending]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 用户列表获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /users/{userId}:
    get:
      summary: 获取用户详情
      description: 获取指定用户的详细信息
      operationId: getUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 用户信息获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    put:
      summary: 更新用户信息
      description: 更新指定用户的信息
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 用户信息更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete:
      summary: 删除用户
      description: 删除指定用户
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '204':
          description: 用户删除成功
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /users/{userId}/health-summary:
    get:
      summary: 获取用户健康摘要
      description: 获取用户当前健康状况的摘要数据
      operationId: getUserHealthSummary
      tags:
        - health
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 健康摘要获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/preferences:
    put:
      summary: 更新用户偏好设置
      description: 更新用户偏好设置
      operationId: updateUserPreferences
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesRequest'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 偏好设置更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/devices:
    post:
      summary: 绑定设备
      description: 为用户绑定新设备
      operationId: bindDevice
      tags:
        - devices
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindDeviceRequest'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: 设备绑定成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BindDeviceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    get:
      summary: 获取用户设备列表
      description: 获取用户绑定的所有设备列表
      operationId: getUserDevices
      tags:
        - devices
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 设备列表获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/devices/{deviceId}:
    delete:
      summary: 解绑设备
      description: 解除用户与设备的绑定关系
      operationId: unbindDevice
      tags:
        - devices
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
        - name: deviceId
          in: path
          required: true
          description: 设备ID
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '204':
          description: 设备解绑成功
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/verify:
    post:
      summary: 验证用户身份
      description: 验证用户身份并返回权限信息
      operationId: verifyUserIdentity
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                token:
                  type: string
              required:
                - userId
                - token
      responses:
        '200':
          description: 验证成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: 验证失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        phone:
          type: string
        fullName:
          type: string
        password:
          type: string
          format: password
          minLength: 8
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - username
        - email
        - password
    
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        phone:
          type: string
        fullName:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
    
    User:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        fullName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, banned, pending]
        metadata:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            type: string
            enum: [user, admin, doctor, researcher]
        preferences:
          type: object
          additionalProperties:
            type: string
      required:
        - userId
        - username
        - email
        - status
        - createdAt
        - updatedAt
    
    HealthSummary:
      type: object
      properties:
        userId:
          type: string
        dominantConstitution:
          type: string
          enum: [balanced, qi_deficiency, yang_deficiency, yin_deficiency, phlegm_dampness, damp_heat, blood_stasis, qi_depression, special]
        recentMetrics:
          type: array
          items:
            $ref: '#/components/schemas/HealthMetric'
        lastAssessmentDate:
          type: string
          format: date-time
        healthScore:
          type: integer
          minimum: 0
          maximum: 100
        constitutionScores:
          type: object
          additionalProperties:
            type: number
            format: float
      required:
        - userId
        - healthScore
    
    HealthMetric:
      type: object
      properties:
        metricName:
          type: string
        value:
          type: number
          format: float
        unit:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - metricName
        - value
        - timestamp
    
    UpdatePreferencesRequest:
      type: object
      properties:
        preferences:
          type: object
          additionalProperties:
            type: string
      required:
        - preferences
    
    BindDeviceRequest:
      type: object
      properties:
        deviceId:
          type: string
        deviceType:
          type: string
        deviceName:
          type: string
        deviceMetadata:
          type: object
          additionalProperties:
            type: string
      required:
        - deviceId
        - deviceType
    
    BindDeviceResponse:
      type: object
      properties:
        success:
          type: boolean
        bindingId:
          type: string
        bindingTime:
          type: string
          format: date-time
      required:
        - success
        - bindingId
        - bindingTime
    
    Device:
      type: object
      properties:
        deviceId:
          type: string
        deviceType:
          type: string
        deviceName:
          type: string
        bindingTime:
          type: string
          format: date-time
        bindingId:
          type: string
        isActive:
          type: boolean
        lastActiveTime:
          type: string
          format: date-time
        deviceMetadata:
          type: object
          additionalProperties:
            type: string
      required:
        - deviceId
        - deviceType
        - bindingTime
        - bindingId
        - isActive
    
    VerifyUserResponse:
      type: object
      properties:
        isValid:
          type: boolean
        roles:
          type: array
          items:
            type: string
            enum: [user, admin, doctor, researcher]
        permissions:
          type: object
          additionalProperties:
            type: string
      required:
        - isValid
    
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        requestId:
          type: string
      required:
        - code
        - message
        - requestId
  
  responses:
    BadRequest:
      description: 请求参数有误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: 没有操作权限
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 