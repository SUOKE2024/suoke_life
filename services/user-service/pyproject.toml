[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "suoke-user-service"
version = "2.0.0"
description = "索克生活用户服务 - 提供统一的用户管理和档案功能"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
maintainers = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
keywords = ["user", "profile", "microservice", "health", "tcm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.13.3"
dependencies = [
    # Web框架 - 使用最新稳定版本
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # gRPC - 更新到最新版本
    "grpcio>=1.68.0",
    "grpcio-tools>=1.68.0",
    "grpcio-reflection>=1.68.0",
    "grpcio-status>=1.68.0",
    "grpcio-health-checking>=1.68.0",
    "protobuf>=5.28.0",
    
    # 数据库 - 使用最新版本
    "aiosqlite>=0.20.0",
    "asyncpg>=0.30.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.1",
    
    # 缓存 - 更新Redis版本
    "redis[hiredis]>=5.2.0",
    "aiocache>=0.12.3",
    
    # 认证和安全 - 更新安全库
    "passlib[bcrypt]>=1.7.4",
    "pyjwt>=2.10.0",
    "cryptography>=43.0.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    
    # 数据验证
    "email-validator>=2.2.0",
    
    # HTTP客户端 - 更新版本
    "httpx>=0.28.0",
    "aiohttp>=3.11.0",
    
    # 日志和监控 - 使用最新版本
    "structlog>=24.4.0",
    "prometheus-client>=0.21.0",
    
    # OpenTelemetry 可观测性
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-grpc>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    
    # 配置管理 - 更新版本
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "dynaconf>=3.2.6",
    
    # 工具库 - 更新版本
    "click>=8.1.7",
    "python-dateutil>=2.8.2",
    "pytz>=2024.2",
    "rich>=13.9.0",
    "tenacity>=9.0.0",
    "orjson>=3.10.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架 - 使用最新版本
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "faker>=30.0.0",
    "httpx>=0.28.0",
    "requests>=2.32.0",
    
    # 代码质量工具 - 现代化工具链
    "ruff>=0.8.0",  # 替代 flake8, isort 的现代工具
    "mypy>=1.13.0",
    "black>=24.10.0",
    "bandit>=1.7.10",
    "safety>=3.2.0",
    
    # 开发工具
    "pre-commit>=4.0.0",
    "commitizen>=3.29.0",
    "rich>=13.9.0",
    "ipython>=8.29.0",
    
    # 文档生成
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
    
    # 性能测试
    "locust>=2.32.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=20.0.0",
    "httpx>=0.28.0",
]

docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "mkdocstrings[python]>=0.26.0",
]

[project.urls]
Homepage = "https://github.com/suoke-life/suoke-life"
Documentation = "https://docs.suoke.life"
Repository = "https://github.com/suoke-life/suoke-life"
Issues = "https://github.com/suoke-life/suoke-life/issues"

[project.scripts]
user-service = "cmd.server.main:main"

# UV 包管理器配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
]

[tool.hatch.version]
path = "internal/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["internal", "api", "pkg", "cmd"]

# 现代化代码格式化和检查工具配置
[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "S101", # assert 语句在测试中是必要的
    "S104", # 硬编码绑定到所有接口
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "migrations",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"test/**/*.py" = ["S101", "S106", "S108"]
"tests/**/*.py" = ["S101", "S106", "S108"]

[tool.ruff.isort]
known-first-party = ["internal", "api", "pkg", "cmd"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "aiosqlite.*",
    "grpc.*",
    "prometheus_client.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=internal",
    "--cov=api",
    "--cov=pkg",
    "--cov=cmd",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["test", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["internal", "api", "pkg", "cmd"]
omit = [
    "*/tests/*",
    "*/test/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test", "migrations", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    "venv",
    ".venv",
    "build",
    "dist",
]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:S101",
]

 