# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from api import corn_maze_pb2 as api_dot_grpc_dot_corn__maze__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in api/grpc/corn_maze_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CornMazeServiceStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMaze = channel.unary_unary(
                '/cornmaze.CornMazeService/CreateMaze',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.CreateMazeRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.MazeResponse.FromString,
                _registered_method=True)
        self.GetMaze = channel.unary_unary(
                '/cornmaze.CornMazeService/GetMaze',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.GetMazeRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.MazeResponse.FromString,
                _registered_method=True)
        self.MoveInMaze = channel.unary_unary(
                '/cornmaze.CornMazeService/MoveInMaze',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.MoveRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.MoveResponse.FromString,
                _registered_method=True)
        self.GetUserProgress = channel.unary_unary(
                '/cornmaze.CornMazeService/GetUserProgress',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.UserProgressRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.UserProgressResponse.FromString,
                _registered_method=True)
        self.ListMazeTemplates = channel.unary_unary(
                '/cornmaze.CornMazeService/ListMazeTemplates',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesResponse.FromString,
                _registered_method=True)
        self.RecordMazeCompletion = channel.unary_unary(
                '/cornmaze.CornMazeService/RecordMazeCompletion',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionResponse.FromString,
                _registered_method=True)
        self.GetKnowledgeNode = channel.unary_unary(
                '/cornmaze.CornMazeService/GetKnowledgeNode',
                request_serializer=api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeRequest.SerializeToString,
                response_deserializer=api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeResponse.FromString,
                _registered_method=True)


class CornMazeServiceServicer:
    """Missing associated documentation comment in .proto file."""

    def CreateMaze(self, request, context):
        """创建新迷宫
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMaze(self, request, context):
        """获取迷宫信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveInMaze(self, request, context):
        """用户在迷宫中移动
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserProgress(self, request, context):
        """获取用户在迷宫中的进度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMazeTemplates(self, request, context):
        """获取可用的迷宫模板
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordMazeCompletion(self, request, context):
        """记录用户完成迷宫挑战
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKnowledgeNode(self, request, context):
        """获取健康知识节点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CornMazeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMaze': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMaze,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.CreateMazeRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.MazeResponse.SerializeToString,
            ),
            'GetMaze': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaze,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.GetMazeRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.MazeResponse.SerializeToString,
            ),
            'MoveInMaze': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveInMaze,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.MoveRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.MoveResponse.SerializeToString,
            ),
            'GetUserProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserProgress,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.UserProgressRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.UserProgressResponse.SerializeToString,
            ),
            'ListMazeTemplates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMazeTemplates,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesResponse.SerializeToString,
            ),
            'RecordMazeCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordMazeCompletion,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionResponse.SerializeToString,
            ),
            'GetKnowledgeNode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKnowledgeNode,
                    request_deserializer=api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeRequest.FromString,
                    response_serializer=api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cornmaze.CornMazeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cornmaze.CornMazeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CornMazeService:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateMaze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/CreateMaze',
            api_dot_grpc_dot_corn__maze__pb2.CreateMazeRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.MazeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMaze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/GetMaze',
            api_dot_grpc_dot_corn__maze__pb2.GetMazeRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.MazeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MoveInMaze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/MoveInMaze',
            api_dot_grpc_dot_corn__maze__pb2.MoveRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.MoveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/GetUserProgress',
            api_dot_grpc_dot_corn__maze__pb2.UserProgressRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.UserProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMazeTemplates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/ListMazeTemplates',
            api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.ListMazeTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordMazeCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/RecordMazeCompletion',
            api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.RecordMazeCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKnowledgeNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cornmaze.CornMazeService/GetKnowledgeNode',
            api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeRequest.SerializeToString,
            api_dot_grpc_dot_corn__maze__pb2.KnowledgeNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
