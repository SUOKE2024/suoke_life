# RAG服务默认配置
service:
  name: rag-service
  version: 1.0.0
  description: 索克生活APP的检索增强生成服务，提供知识检索和生成增强能力

server:
  host: 0.0.0.0
  port: 8076
  debug: false
  workers: 4
  timeout: 60
  cors:
    enabled: true
    origins:
      - "*"

logging:
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: logs/rag-service.log
  max_size: 10485760  # 10MB
  backup_count: 5

# 标准数据库配置
database:
  # 主数据库配置（用于元数据和索引管理）
  primary:
    type: postgresql
    host: ${DB_HOST:-localhost}
    port: ${DB_PORT:-5432}
    username: ${DB_USER:-postgres}
    password: ${DB_PASS:-postgres}
    database: ${DB_NAME:-rag_service}
    
    # 连接池配置
    pool:
      min_size: 5
      max_size: ${DB_POOL_SIZE:-20}
      max_overflow: ${DB_MAX_OVERFLOW:-10}
      timeout: ${DB_POOL_TIMEOUT:-30}
      recycle: ${DB_POOL_RECYCLE:-3600}
      use_lifo: true
      echo: ${DB_ECHO:-false}
    
    # 性能优化参数
    optimization:
      prepared_statement_cache_size: 100
      statement_timeout: 30000
      idle_in_transaction_session_timeout: 60000
      effective_cache_size: "4GB"
      maintenance_work_mem: "64MB"
      max_parallel_workers_per_gather: 2
      enable_partitionwise_join: true
    
    # 连接参数
    options:
      application_name: "rag_service"
      client_encoding: "UTF8"
      connect_timeout: 10
      keepalives: 1
      keepalives_idle: 60
    
    # 事务隔离级别
    isolation_level: "READ COMMITTED"
  
  # 只读副本配置（用于读写分离）
  replicas:
    enabled: ${DB_REPLICAS_ENABLED:-false}
    strategy: "round_robin"
    nodes:
      - host: ${DB_REPLICA1_HOST}
        port: ${DB_REPLICA1_PORT:-5432}
        username: ${DB_REPLICA1_USER:-postgres}
        password: ${DB_REPLICA1_PASS:-postgres}
        database: ${DB_REPLICA1_NAME:-rag_service}
        pool:
          min_size: 2
          max_size: ${DB_REPLICA1_POOL_SIZE:-10}
          max_overflow: 5
          timeout: 20
  
  # 向量数据库配置（核心存储组件）
  vector:
    type: ${VECTOR_DB_TYPE:-milvus}  # 可选: milvus, qdrant, pgvector
    
    # Milvus配置
    milvus:
      host: ${MILVUS_HOST:-localhost}
      port: ${MILVUS_PORT:-19530}
      use_secure: ${MILVUS_SECURE:-false}
      user: ${MILVUS_USER:-}
      password: ${MILVUS_PASS:-}
      default_collection: rag_vectors
      dimension: 768
      metric_type: "IP"  # 内积相似度
      partition_key: "namespace"
      replica_number: ${MILVUS_REPLICA_NUMBER:-1}
      index_config:
        index_type: "HNSW"
        metric_type: "IP"
        params:
          M: 8
          efConstruction: 64
      
    # Qdrant配置（备选）
    qdrant:
      url: ${QDRANT_URL:-http://localhost:6333}
      api_key: ${QDRANT_API_KEY:-}
      default_collection: rag_vectors
      dimension: 768
      distance: "Cosine"  # 余弦相似度
      
    # PGVector配置（基于PostgreSQL的向量扩展，备选）
    pgvector:
      host: ${PGVECTOR_HOST:-localhost}
      port: ${PGVECTOR_PORT:-5432}
      username: ${PGVECTOR_USER:-postgres}
      password: ${PGVECTOR_PASS:-postgres}
      database: ${PGVECTOR_DB:-rag_vectors}
      table: embeddings
      dimension: 768
      index_type: "ivfflat"  # 可选: ivfflat, hnsw
  
  # 文档存储配置（存储原始内容）
  document_store:
    type: ${DOC_STORE_TYPE:-postgres}  # 可选: postgres, mongodb, s3
    
    # MongoDB配置（备选）
    mongodb:
      uri: ${MONGODB_URI:-mongodb://localhost:27017}
      database: ${MONGODB_DB:-rag_documents}
      collection: documents
      min_pool_size: 5
      max_pool_size: 20
  
  # SQLite配置（用于本地存储和缓存）
  sqlite:
    path: ${SQLITE_PATH:-data/local.db}
    journal_mode: "WAL"
    synchronous: "NORMAL"
    busy_timeout: 5000
    cache_size: 2000
    temp_store: "MEMORY"
  
  # 缓存配置
  cache:
    type: redis
    host: ${REDIS_HOST:-localhost}
    port: ${REDIS_PORT:-6379}
    db: ${REDIS_DB:-0}
    password: ${REDIS_PASS}
    ttl: ${REDIS_TTL:-3600}
    key_prefix: "rag:"
    
    # Redis连接池配置
    pool:
      min_idle: 5
      max_idle: 20
      max_active: 50
      max_wait: 3000
      timeout: 2000
    
    # 本地缓存配置（双层缓存）
    local:
      enabled: true
      max_size: 10000
      ttl: 300
  
  # 监控配置
  monitoring:
    query_timeout_threshold: 1000
    slow_query_log: true
    slow_query_threshold: 500
    connection_stats: true
    query_stats: true

# RAG配置
rag:
  embedding:
    model: ${EMBEDDING_MODEL:-text-embedding-3-large}
    dimension: 768
    batch_size: 32
    max_tokens: 8192
  
  chunking:
    chunk_size: 1000
    chunk_overlap: 200
    chunk_strategy: "sentence"  # 分句策略
  
  retrieval:
    strategy: "hybrid"  # 混合检索策略
    vector_weight: 0.7
    bm25_weight: 0.3
    max_results: 10
    min_relevance_score: 0.75
  
  reranking:
    enabled: ${RERANKER_ENABLED:-true}
    model: ${RERANKER_MODEL:-cohere-rerank}
    top_k: 5
  
  generation:
    model: ${GENERATION_MODEL:-gpt-4o-mini}
    api_key: ${OPENAI_API_KEY}
    api_base: ${OPENAI_API_BASE:-https://api.openai.com/v1}
    max_tokens: 1024
    temperature: 0.7
    system_prompt_template: "config/prompts/rag_system_prompt.txt"
    user_prompt_template: "config/prompts/rag_user_prompt.txt"

# 索引配置
indexing:
  scheduler:
    enabled: true
    interval: 3600  # 每小时
  
  sources:
    - name: med_knowledge
      type: api
      url: ${MED_KNOWLEDGE_URL:-http://localhost:8075/api/v1/documents}
      auth_type: api_key
      auth_key: ${MED_KNOWLEDGE_API_KEY}
      batch_size: 100
      
    - name: tcm_dataset
      type: file
      path: data/tcm_dataset
      glob_pattern: "**/*.json"
      format: json
    
    - name: health_regulations
      type: web
      urls:
        - https://www.example.com/health/regulations
      crawler_depth: 2
      excluded_patterns:
        - "/irrelevant/"
        - "/404/"

# 安全配置
security:
  jwt:
    secret: ${JWT_SECRET}
    algorithm: HS256
    expires: 3600  # 1小时
  
  api_keys:
    enabled: true
    header_name: X-API-Key
  
  rate_limiting:
    enabled: true
    max_requests: 100
    time_window: 60  # 每分钟

# 可观测性配置
telemetry:
  tracing:
    enabled: ${TRACING_ENABLED:-false}
    exporter: otlp
    endpoint: ${OTLP_ENDPOINT:-localhost:4317}
    service_name: rag-service
    environment: ${SERVICE_ENV:-development}
  
  metrics:
    enabled: ${METRICS_ENABLED:-true}
    exporter: prometheus
    endpoint: ${METRICS_ENDPOINT:-localhost:9090}
    export_interval: 15  # 秒