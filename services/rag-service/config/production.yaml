# RAG服务生产环境配置
# 此配置针对生产环境进行了优化，包含安全、性能和可靠性设置

# 服务基础配置
service:
  name: "rag-service"
  version: "1.0.0"
  environment: "production"
  debug: false
  
# 服务器配置
server:
  host: "0.0.0.0"
  port: 8076
  workers: 4  # 根据CPU核心数调整
  max_connections: 1000
  keepalive_timeout: 65
  request_timeout: 300  # 5分钟超时
  max_request_size: 10485760  # 10MB
  
# 安全配置
security:
  api_keys:
    enabled: true
    header_name: "X-API-Key"
    required_endpoints:
      - "/api/v1/query"
      - "/api/v1/documents"
      - "/api/v1/tcm/*"
  
  rate_limiting:
    enabled: true
    default_limit: 100  # 每分钟100次请求
    burst_limit: 200
    window_seconds: 60
    
  cors:
    enabled: true
    allow_origins:
      - "https://suoke.life"
      - "https://api.suoke.life"
      - "https://admin.suoke.life"
    allow_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allow_headers: ["*"]
    allow_credentials: true
    
  ssl:
    enabled: true
    cert_file: "/etc/ssl/certs/rag-service.crt"
    key_file: "/etc/ssl/private/rag-service.key"
    
# 数据库配置
database:
  # PostgreSQL主数据库
  primary:
    host: "${DB_HOST}"
    port: 5432
    database: "${DB_NAME}"
    username: "${DB_USER}"
    password: "${DB_PASSWORD}"
    pool_size: 20
    max_overflow: 30
    pool_timeout: 30
    pool_recycle: 3600
    echo: false
    
  # 只读副本（可选）
  replica:
    enabled: true
    host: "${DB_REPLICA_HOST}"
    port: 5432
    database: "${DB_NAME}"
    username: "${DB_REPLICA_USER}"
    password: "${DB_REPLICA_PASSWORD}"
    pool_size: 10
    max_overflow: 20

# 向量数据库配置
vector_db:
  # Milvus配置
  milvus:
    host: "${MILVUS_HOST}"
    port: 19530
    username: "${MILVUS_USER}"
    password: "${MILVUS_PASSWORD}"
    secure: true
    timeout: 30
    pool_size: 10
    
    # 集合配置
    collections:
      default:
        dimension: 1536
        metric_type: "COSINE"
        index_type: "IVF_FLAT"
        nlist: 1024
        
      tcm_knowledge:
        dimension: 1536
        metric_type: "COSINE"
        index_type: "HNSW"
        M: 16
        efConstruction: 200
        
      medical_guidelines:
        dimension: 1536
        metric_type: "COSINE"
        index_type: "IVF_SQ8"
        nlist: 2048

# 缓存配置
cache:
  # Redis配置
  redis:
    host: "${REDIS_HOST}"
    port: 6379
    password: "${REDIS_PASSWORD}"
    db: 0
    ssl: true
    ssl_cert_reqs: "required"
    ssl_ca_certs: "/etc/ssl/certs/ca-certificates.crt"
    
    # 连接池配置
    pool:
      max_connections: 50
      retry_on_timeout: true
      socket_timeout: 5
      socket_connect_timeout: 5
      
    # 集群配置（如果使用Redis集群）
    cluster:
      enabled: false
      nodes:
        - "${REDIS_NODE1_HOST}:6379"
        - "${REDIS_NODE2_HOST}:6379"
        - "${REDIS_NODE3_HOST}:6379"
      
  # 本地缓存配置
  local:
    enabled: true
    max_size: 1000
    ttl: 3600  # 1小时
    
  # 缓存策略
  strategies:
    query_cache:
      enabled: true
      ttl: 1800  # 30分钟
      max_size: 10000
      
    embedding_cache:
      enabled: true
      ttl: 86400  # 24小时
      max_size: 50000
      
    document_cache:
      enabled: true
      ttl: 3600  # 1小时
      max_size: 5000

# AI模型配置
models:
  # 嵌入模型
  embedding:
    primary:
      name: "text-embedding-3-large"
      provider: "openai"
      api_key: "${OPENAI_API_KEY}"
      api_base: "https://api.openai.com/v1"
      max_tokens: 8192
      batch_size: 100
      timeout: 30
      retry_attempts: 3
      
    fallback:
      name: "bge-large-zh-v1.5"
      provider: "local"
      model_path: "/models/bge-large-zh-v1.5"
      device: "cuda"
      batch_size: 32
      
  # 生成模型
  generation:
    primary:
      name: "gpt-4-turbo"
      provider: "openai"
      api_key: "${OPENAI_API_KEY}"
      api_base: "https://api.openai.com/v1"
      max_tokens: 4096
      temperature: 0.7
      timeout: 60
      retry_attempts: 3
      
    fallback:
      name: "qwen2-7b-instruct"
      provider: "local"
      model_path: "/models/qwen2-7b-instruct"
      device: "cuda"
      max_tokens: 2048
      temperature: 0.7
      
  # 中医专用模型
  tcm:
    syndrome_analysis:
      name: "tcm-syndrome-bert"
      provider: "local"
      model_path: "/models/tcm-syndrome-bert"
      device: "cuda"
      
    herb_recommendation:
      name: "tcm-herb-gpt"
      provider: "local"
      model_path: "/models/tcm-herb-gpt"
      device: "cuda"

# 检索配置
retrieval:
  # 混合检索配置
  hybrid:
    enabled: true
    vector_weight: 0.7
    keyword_weight: 0.3
    
  # 重排序配置
  reranking:
    enabled: true
    model: "bge-reranker-large"
    top_k: 100  # 重排序前的候选数量
    final_k: 10  # 最终返回数量
    
  # 查询扩展
  query_expansion:
    enabled: true
    methods: ["synonym", "tcm_concept"]
    max_expansions: 5

# 生成配置
generation:
  # 默认参数
  default_params:
    max_tokens: 2048
    temperature: 0.7
    top_p: 0.9
    frequency_penalty: 0.0
    presence_penalty: 0.0
    
  # 流式生成
  streaming:
    enabled: true
    chunk_size: 1024
    
  # 内容过滤
  content_filter:
    enabled: true
    blocked_patterns:
      - "医疗广告"
      - "药品销售"
      - "未经验证的治疗方法"

# 监控配置
monitoring:
  # Prometheus指标
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
    
  # 健康检查
  health_check:
    enabled: true
    path: "/health"
    interval: 30
    timeout: 10
    
  # 日志配置
  logging:
    level: "INFO"
    format: "json"
    file: "/var/log/rag-service/app.log"
    max_size: "100MB"
    backup_count: 10
    
    # 结构化日志
    structured:
      enabled: true
      include_trace_id: true
      include_user_id: true
      
  # 分布式追踪
  tracing:
    enabled: true
    service_name: "rag-service"
    jaeger:
      agent_host: "${JAEGER_AGENT_HOST}"
      agent_port: 6831
      
  # 错误报告
  error_reporting:
    enabled: true
    sentry:
      dsn: "${SENTRY_DSN}"
      environment: "production"
      sample_rate: 0.1

# 性能优化配置
performance:
  # 并发控制
  concurrency:
    max_concurrent_queries: 100
    max_concurrent_embeddings: 50
    max_concurrent_generations: 20
    
  # 批处理
  batching:
    enabled: true
    embedding_batch_size: 100
    max_wait_time: 100  # 毫秒
    
  # 预加载
  preload:
    models: true
    embeddings: false
    
  # 内存管理
  memory:
    max_heap_size: "8G"
    gc_threshold: 0.8

# 数据管理配置
data:
  # 文档存储
  storage:
    type: "s3"
    s3:
      bucket: "${S3_BUCKET}"
      region: "${S3_REGION}"
      access_key: "${S3_ACCESS_KEY}"
      secret_key: "${S3_SECRET_KEY}"
      endpoint: "${S3_ENDPOINT}"
      
  # 备份配置
  backup:
    enabled: true
    schedule: "0 2 * * *"  # 每天凌晨2点
    retention_days: 30
    
  # 数据同步
  sync:
    enabled: true
    sources:
      - name: "tcm_knowledge_base"
        type: "database"
        schedule: "0 */6 * * *"  # 每6小时同步一次
        
      - name: "medical_guidelines"
        type: "api"
        schedule: "0 0 * * 0"  # 每周同步一次

# 中医特色配置
tcm:
  # 知识图谱
  knowledge_graph:
    enabled: true
    neo4j:
      uri: "${NEO4J_URI}"
      username: "${NEO4J_USER}"
      password: "${NEO4J_PASSWORD}"
      
  # 辨证分析
  syndrome_analysis:
    enabled: true
    confidence_threshold: 0.7
    max_syndromes: 3
    
  # 方剂推荐
  formula_recommendation:
    enabled: true
    safety_check: true
    interaction_check: true
    
  # 穴位推荐
  acupoint_recommendation:
    enabled: true
    meridian_analysis: true

# 多模态配置
multimodal:
  # 图像处理
  image:
    enabled: true
    max_size: "10MB"
    supported_formats: ["jpg", "jpeg", "png", "webp"]
    
    # 图像分析模型
    analysis_models:
      tongue_diagnosis:
        enabled: true
        model_path: "/models/tongue-diagnosis"
        
      pulse_diagnosis:
        enabled: true
        model_path: "/models/pulse-diagnosis"
        
  # 音频处理
  audio:
    enabled: true
    max_duration: 300  # 5分钟
    supported_formats: ["wav", "mp3", "m4a"]

# 部署配置
deployment:
  # 容器配置
  container:
    image: "suoke/rag-service:1.0.0"
    resources:
      requests:
        cpu: "2"
        memory: "4Gi"
      limits:
        cpu: "4"
        memory: "8Gi"
        
  # Kubernetes配置
  kubernetes:
    namespace: "suoke-production"
    replicas: 3
    
    # 服务发现
    service_discovery:
      enabled: true
      consul:
        host: "${CONSUL_HOST}"
        port: 8500
        
    # 负载均衡
    load_balancer:
      type: "nginx"
      algorithm: "round_robin"
      health_check: true

# 环境变量映射
env_vars:
  # 数据库
  DB_HOST: "prod-postgres.suoke.internal"
  DB_NAME: "rag_service_prod"
  DB_USER: "rag_service"
  DB_PASSWORD: "{{ vault.db_password }}"
  DB_REPLICA_HOST: "prod-postgres-replica.suoke.internal"
  DB_REPLICA_USER: "rag_service_readonly"
  DB_REPLICA_PASSWORD: "{{ vault.db_replica_password }}"
  
  # 向量数据库
  MILVUS_HOST: "prod-milvus.suoke.internal"
  MILVUS_USER: "rag_service"
  MILVUS_PASSWORD: "{{ vault.milvus_password }}"
  
  # 缓存
  REDIS_HOST: "prod-redis.suoke.internal"
  REDIS_PASSWORD: "{{ vault.redis_password }}"
  
  # AI服务
  OPENAI_API_KEY: "{{ vault.openai_api_key }}"
  
  # 存储
  S3_BUCKET: "suoke-rag-data-prod"
  S3_REGION: "us-west-2"
  S3_ACCESS_KEY: "{{ vault.s3_access_key }}"
  S3_SECRET_KEY: "{{ vault.s3_secret_key }}"
  S3_ENDPOINT: "https://s3.us-west-2.amazonaws.com"
  
  # 监控
  JAEGER_AGENT_HOST: "prod-jaeger.suoke.internal"
  SENTRY_DSN: "{{ vault.sentry_dsn }}"
  
  # 中医知识图谱
  NEO4J_URI: "bolt://prod-neo4j.suoke.internal:7687"
  NEO4J_USER: "rag_service"
  NEO4J_PASSWORD: "{{ vault.neo4j_password }}"
  
  # 服务发现
  CONSUL_HOST: "prod-consul.suoke.internal" 