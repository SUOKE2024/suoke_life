---
apiVersion: v1
kind: Namespace
metadata:
  name: rag-service
  labels:
    app: rag-service
    version: v2.0.0

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rag-config
  namespace: rag-service
data:
  # 服务配置
  SERVICE_NAME: "rag-service"
  SERVICE_VERSION: "v2.0.0"
  SERVICE_PORT: "8085"
  LOG_LEVEL: "INFO"
  
  # 向量数据库配置
  MILVUS_HOST: "milvus"
  MILVUS_PORT: "19530"
  COLLECTION_NAME: "rag_documents"
  
  # 分片配置
  SHARDING_ENABLED: "true"
  SHARDING_STRATEGY: "consistent_hash"
  SHARD_COUNT: "8"
  REPLICATION_FACTOR: "2"
  
  # 索引配置
  DEFAULT_INDEX_TYPE: "HNSW"
  HNSW_M: "16"
  HNSW_EF_CONSTRUCTION: "200"
  
  # 缓存配置
  MULTI_LEVEL_CACHE: "true"
  L1_CACHE_SIZE_MB: "1024"
  L2_CACHE_SIZE_MB: "4096"
  L3_CACHE_SIZE_GB: "10"
  CACHE_TTL_QUERY: "300"
  CACHE_TTL_EMBEDDING: "3600"
  CACHE_TTL_DOCUMENT: "86400"
  
  # 推理配置
  BATCH_SIZE: "32"
  MAX_BATCH_WAIT_MS: "50"
  PARALLEL_INFERENCE: "true"
  NUM_WORKERS: "4"
  
  # Redis配置
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_DB: "4"
  
  # 生成器配置
  GENERATOR_TYPE: "openai"
  MODEL_NAME: "gpt-3.5-turbo"

---
apiVersion: v1
kind: Secret
metadata:
  name: rag-secrets
  namespace: rag-service
type: Opaque
stringData:
  # OpenAI API密钥
  OPENAI_API_KEY: "your-openai-api-key"
  
  # Redis密码
  REDIS_PASSWORD: "redis_password"
  
  # Milvus认证
  MILVUS_USERNAME: "root"
  MILVUS_PASSWORD: "milvus_password"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-service
  namespace: rag-service
  labels:
    app: rag-service
    version: v2.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rag-service
  template:
    metadata:
      labels:
        app: rag-service
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/api/v1/rag/metrics"
    spec:
      serviceAccountName: rag-service
      containers:
      - name: rag-service
        image: suoke-life/rag-service:v2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8085
          name: http
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: rag-config
        - secretRef:
            name: rag-secrets
        resources:
          requests:
            cpu: 1000m
            memory: 4Gi
            nvidia.com/gpu: 1  # GPU请求（如果使用本地模型）
          limits:
            cpu: 4000m
            memory: 16Gi
            nvidia.com/gpu: 1  # GPU限制
        livenessProbe:
          httpGet:
            path: /health
            port: 8085
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8085
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8085
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: model-cache
          mountPath: /models
        - name: document-cache
          mountPath: /cache
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: document-cache
        emptyDir:
          sizeLimit: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: rag-service
  namespace: rag-service
  labels:
    app: rag-service
spec:
  type: ClusterIP
  ports:
  - port: 8085
    targetPort: 8085
    protocol: TCP
    name: http
  selector:
    app: rag-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rag-service
  namespace: rag-service

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rag-service
  namespace: rag-service
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rag-service
  namespace: rag-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rag-service
subjects:
- kind: ServiceAccount
  name: rag-service
  namespace: rag-service

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rag-service-hpa
  namespace: rag-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rag-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: rag_queue_size
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rag-service-pdb
  namespace: rag-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: rag-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rag-service-netpol
  namespace: rag-service
spec:
  podSelector:
    matchLabels:
      app: rag-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: api-gateway
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8085
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: vector-database
    ports:
    - protocol: TCP
      port: 19530  # Milvus
  - to:
    - namespaceSelector:
        matchLabels:
          name: data-storage
    ports:
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS for OpenAI API

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: rag-service
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rag-service
  namespace: rag-service
  labels:
    app: rag-service
spec:
  selector:
    matchLabels:
      app: rag-service
  endpoints:
  - port: http
    path: /api/v1/rag/metrics
    interval: 30s
    scrapeTimeout: 10s

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rag-grafana-dashboard
  namespace: rag-service
  labels:
    grafana_dashboard: "1"
data:
  rag-dashboard.json: |
    {
      "dashboard": {
        "title": "RAG Service Dashboard",
        "panels": [
          {
            "title": "Total Queries",
            "targets": [
              {
                "expr": "rag_total_queries"
              }
            ]
          },
          {
            "title": "Query Rate",
            "targets": [
              {
                "expr": "rate(rag_total_queries[5m])"
              }
            ]
          },
          {
            "title": "Cache Hit Rate",
            "targets": [
              {
                "expr": "rag_cache_hit_rate"
              }
            ]
          },
          {
            "title": "Average Latency",
            "targets": [
              {
                "expr": "rag_average_latency_ms"
              }
            ]
          },
          {
            "title": "Shard Document Distribution",
            "targets": [
              {
                "expr": "rag_shard_document_count"
              }
            ]
          },
          {
            "title": "Queue Sizes",
            "targets": [
              {
                "expr": "rag_queue_size"
              }
            ]
          },
          {
            "title": "Batch Processing Rate",
            "targets": [
              {
                "expr": "rate(rag_batch_processed[5m])"
              }
            ]
          },
          {
            "title": "Cache Sizes by Level",
            "targets": [
              {
                "expr": "rag_cache_size"
              }
            ]
          }
        ]
      }
    }

---
# Milvus向量数据库部署（用于开发/测试）
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: milvus
  namespace: rag-service
spec:
  serviceName: milvus
  replicas: 1
  selector:
    matchLabels:
      app: milvus
  template:
    metadata:
      labels:
        app: milvus
    spec:
      containers:
      - name: milvus
        image: milvusdb/milvus:latest
        command: ["milvus", "run", "standalone"]
        ports:
        - containerPort: 19530
          name: grpc
        - containerPort: 9091
          name: metrics
        env:
        - name: ETCD_ENDPOINTS
          value: "etcd:2379"
        - name: MINIO_ADDRESS
          value: "minio:9000"
        volumeMounts:
        - name: data
          mountPath: /var/lib/milvus
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: milvus
  namespace: rag-service
spec:
  type: ClusterIP
  ports:
  - port: 19530
    targetPort: 19530
    name: grpc
  - port: 9091
    targetPort: 9091
    name: metrics
  selector:
    app: milvus

---
# 配置优先级类
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: rag-high-priority
value: 1000
globalDefault: false
description: "高优先级类，用于RAG服务的关键组件" 