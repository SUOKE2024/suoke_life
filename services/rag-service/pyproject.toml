[project]
name = "rag-service"
version = "1.2.0"
description = "RAG服务 - 苏柯生命平台的知识增强检索生成服务，专注于中医智慧数字化"
authors = [
    {name = "Suoke Life Team", email = "team@suokelife.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13.3"
keywords = ["rag", "ai", "tcm", "health", "knowledge-retrieval"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # 核心框架
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.25.0",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    
    # gRPC
    "grpcio>=1.62.0",
    "grpcio-tools>=1.62.0",
    "grpcio-reflection>=1.62.0",
    
    # HTTP客户端
    "httpx>=0.26.0",
    "aiohttp>=3.9.1",
    
    # 向量数据库
    "qdrant-client>=1.7.0",
    "pymilvus>=2.3.4",
    "weaviate-client>=3.25.0",
    
    # 机器学习和NLP
    "torch>=2.1.0",
    "sentence-transformers>=2.2.2",
    "transformers>=4.36.0",
    "accelerate>=0.24.0",
    "optimum>=1.16.0",
    "onnxruntime>=1.16.0",
    
    # LLM集成
    "openai>=1.10.0",
    "tiktoken>=0.5.2",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-community>=0.0.10",
    
    # 中医特色NLP
    "jieba>=0.42.1",
    "pkuseg>=0.0.25",
    "spacy>=3.7.0",
    
    # 数据处理
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.4.0",
    "rank-bm25>=0.2.2",
    
    # 存储和缓存
    "redis[hiredis]>=5.0.1",
    "motor>=3.3.2",
    "pymongo>=4.6.1",
    "diskcache>=5.6.3",
    "cachetools>=5.3.2",
    
    # 异步和并发
    "asyncio-pool>=0.6.0",
    "aiofiles>=23.2.1",
    "aiokafka>=0.8.1",
    
    # 配置和环境
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "dynaconf>=3.2.4",
    
    # 序列化
    "orjson>=3.9.10",
    "msgpack>=1.0.7",
    
    # 工具库
    "tenacity>=8.2.3",
    "rich>=13.7.0",
    "tqdm>=4.66.1",
    "click>=8.1.7",
    
    # 可观测性
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-grpc>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "prometheus-client>=0.19.0",
    "loguru>=0.7.2",
    
    # 安全
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=42.0.0",
    
    # 依赖注入
    "dependency-injector>=4.41.0",
    
    # 性能优化
    "uvloop>=0.19.0; sys_platform != 'win32'",
]

[project.optional-dependencies]
dev = [
    # 测试
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
    
    # 代码质量
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    
    # 类型检查
    "types-pyyaml>=6.0.12.12",
    "types-redis>=4.6.0.11",
    "types-requests>=2.31.0.10",
    
    # 开发工具
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/SuokeLife/suoke_life"
Documentation = "https://docs.suokelife.com"
Repository = "https://github.com/SuokeLife/suoke_life"
Issues = "https://github.com/SuokeLife/suoke_life/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "types-pyyaml>=6.0.12.12",
    "types-redis>=4.6.0.11",
    "types-requests>=2.31.0.10",
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "S101",   # use of assert
    "TRY003", # avoid specifying long messages outside exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "pymilvus.*",
    "weaviate.*",
    "sentence_transformers.*",
    "transformers.*",
    "jieba.*",
    "pkuseg.*",
    "spacy.*",
    "rank_bm25.*",
    "motor.*",
    "diskcache.*",
    "asyncio_pool.*",
    "dynaconf.*",
    "msgpack.*",
    "dependency_injector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["services"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"] 