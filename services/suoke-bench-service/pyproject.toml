[project]
name = "suoke-bench-service"
version = "0.1.0"
description = "索克生活APP专属评测系统"
authors = [
    {name = "Suoke Life Team", email = "team@suoke.life"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13.3"
keywords = ["benchmark", "evaluation", "ai", "health", "suoke"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "pydantic>=2.5.3",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "PyYAML>=6.0.1",
    "numpy>=1.26.3",
    "pandas>=2.2.0",
    "scikit-learn>=1.4.0",
    "scipy>=1.12.0",
    "SQLAlchemy>=2.0.25",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    "prometheus-client>=0.19.0",
    "python-json-logger>=2.0.7",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "grpcio>=1.60.0",
    "grpcio-tools>=1.60.0",
    "protobuf>=4.25.2",
    "aiohttp>=3.9.1",
    "httpx>=0.26.0",
    "psutil>=5.9.7",
    "plotly>=5.18.0",
    "dash>=2.14.2",
    "bokeh>=3.3.3",
    "seaborn>=0.13.1",
    # "pysnark>=0.4.0",  # 暂时注释，等待Python 3.13支持
    # "zokrates>=0.7.13",  # 暂时注释，等待Python 3.13支持
    "onnxruntime>=1.16.3",
    # "tensorflow-lite>=2.14.0",  # 暂时注释，等待Python 3.13支持
    # "tflite-runtime>=2.14.0",  # 暂时注释，等待Python 3.13支持
    "torch>=2.1.2",
    "torchvision>=0.16.2",
    "torchaudio>=2.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.92.1",
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/SuokeLife/suoke_life"
Documentation = "https://docs.suokelife.com"
Repository = "https://github.com/SuokeLife/suoke_life"
Issues = "https://github.com/SuokeLife/suoke_life/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.92.1",
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "S101",   # use of assert
    "TRY003", # avoid specifying long messages outside exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "google.protobuf.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "pysnark.*",
    "zokrates.*",
    "plotly.*",
    "dash.*",
    "bokeh.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=internal",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["internal"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]