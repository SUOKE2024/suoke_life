name: Auth Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/auth-service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/auth-service/**'

jobs:
  lint:
    name: Code Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/auth-service
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black mypy
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Format with black
        run: |
          black --check .
      - name: Type check with mypy
        run: |
          mypy --ignore-missing-imports internal cmd

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: services/auth-service
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      - name: Run unit tests
        run: |
          pytest test/unit --cov=internal --cov-report=xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: auth_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET_KEY: test_secret_key
          JWT_ALGORITHM: HS256
      - name: Run integration tests
        run: |
          pytest test/integration --cov=internal --cov-append --cov-report=xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: auth_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET_KEY: test_secret_key
          JWT_ALGORITHM: HS256
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/auth-service/coverage.xml
          flags: auth-service
          fail_ci_if_error: true

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    defaults:
      run:
        working-directory: services/auth-service
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./services/auth-service
          file: ./services/auth-service/deploy/docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/suoke/auth-service:${{ env.BRANCH_NAME }}
            ${{ secrets.DOCKER_REGISTRY }}/suoke/auth-service:${{ env.BRANCH_NAME }}-${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: services/auth-service
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deploy/kubernetes/auth-service.yaml
          kubectl set image deployment/auth-service auth-service=${{ secrets.DOCKER_REGISTRY }}/suoke/auth-service:main-${{ github.sha }} -n suoke
          kubectl rollout status deployment/auth-service -n suoke 