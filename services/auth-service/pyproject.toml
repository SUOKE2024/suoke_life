[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "suoke-auth-service"
version = "2.0.0"
description = "索克生活认证服务 - 提供统一的身份认证和授权功能"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
maintainers = [
    {name = "索克生活团队", email = "dev@suoke.life"}
]
keywords = ["auth", "authentication", "authorization", "microservice", "health", "tcm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
requires-python = ">=3.13.3"
dependencies = [
    # Web框架和相关组件
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "python-multipart>=0.0.12",
    "email-validator>=2.2.0",

    # gRPC相关
    "grpcio>=1.68.0",
    "grpcio-tools>=1.68.0",
    "grpcio-reflection>=1.68.0",
    "grpcio-health-checking>=1.68.0",
    "protobuf>=5.28.0",

    # 数据库连接
    "sqlalchemy[asyncio]>=2.0.25",
    "asyncpg>=0.30.0",
    "alembic>=1.13.1",
    "redis>=5.0.1",
    "redis-om>=0.2.1",

    # 认证和加密
    "pyjwt>=2.8.0",
    "passlib[argon2]>=1.7.4",
    "argon2-cffi>=23.1.0",
    "python-jose[cryptography]>=3.3.0",
    "pyotp>=2.9.0",
    "cryptography>=43.0.0",
    "bcrypt>=4.0.1",

    # 消息队列
    "pulsar-client>=3.7.0",

    # 工具和辅助库
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.1",
    "tenacity>=9.0.0",
    "httpx>=0.28.0",
    "structlog>=24.4.0",
    "orjson>=3.10.0",
    "ujson>=5.8.0",

    # 安全组件
    "slowapi>=0.1.8",
    "secure>=0.3.0",
    "itsdangerous>=2.1.2",

    # 监控和指标
    "prometheus-client>=0.21.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",

    # 数据库迁移和ORM增强
    "psycopg2-binary>=2.9.7",
    "asyncio-mqtt>=0.16.1",

    # 图像处理和二维码生成(用于MFA)
    "qrcode[pil]>=7.4.2",
    "pillow>=10.1.0",

    # 邮件发送
    "aiosmtplib>=3.0.1",
    "jinja2>=3.1.2",

    # 短信发送
    "twilio>=8.10.0",

    # 日志增强
    "colorlog>=6.7.0",

    # 时间处理
    "python-dateutil>=2.8.2",
    "pytz>=2024.2",

    # UUID生成
    "uuid7>=0.1.0",

    # 密码强度检查
    "zxcvbn>=4.4.28",

    # 区块链和Web3支持
    "web3>=6.15.1",
    "eth-account>=0.9.0",
    "eth-utils>=2.2.2",

    # 生物识别和图像处理
    "opencv-python>=4.10.0",
    "face-recognition>=1.3.0",
    "numpy>=1.26.0",
    "scikit-image>=0.21.0",

    # OAuth和社交登录
    "authlib>=1.2.1",
    "requests-oauthlib>=1.3.1",

    # 性能优化
    "aiofiles>=23.2.1",
    "aiocache>=0.12.2",

    # 数据验证和序列化增强
    "marshmallow>=3.20.1",
    "cerberus>=1.3.5",

    # 国际化支持
    "babel>=2.12.1",

    # 健康检查和监控增强
    "healthcheck>=1.3.3",
    "psutil>=5.9.5",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "pytest-freezegun>=0.4.2",
    "faker>=30.0.0",
    "factory-boy>=3.3.0",
    
    # 代码质量工具
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "bandit>=1.7.10",
    "safety>=3.2.0",
    
    # 开发工具
    "pre-commit>=4.0.0",
    "commitizen>=3.29.0",
    "ipython>=8.29.0",
    "jupyter>=1.0.0",
    
    # 文档生成
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
    
    # 性能测试
    "locust>=2.32.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
]

production = [
    # 生产环境依赖
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",
    "newrelic>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://docs.suoke.life/auth"
Repository = "https://github.com/SUOKE2024/suoke_life"
Issues = "https://github.com/SUOKE2024/suoke_life/issues"
Changelog = "https://github.com/SUOKE2024/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
auth-service = "app.server.main:main"
auth-cli = "pkg.cli:main"

# UV 包管理器配置
[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
]

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# 代码质量工具配置
[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/test/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 