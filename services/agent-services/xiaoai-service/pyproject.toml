[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "xiaoai-service"
version = "0.1.0"
description = "索克生活APP小艾智能体服务 - 基于中医五诊协调的AI健康管理服务"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Suoke Life Team", email = "dev@suoke.life"}
]
maintainers = [
    {name = "Suoke Life Team", email = "dev@suoke.life"}
]
keywords = [
    "tcm", "traditional-chinese-medicine", "ai", "health", "diagnosis",
    "five-diagnosis", "syndrome-differentiation", "constitution-analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.13.3"

# 核心依赖
dependencies = [
    # 异步框架
    "asyncio",
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    
    # gRPC和API
    "grpcio>=1.60.0",
    "grpcio-tools>=1.60.0",
    "protobuf>=4.25.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # 数据库
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    "redis[hiredis]>=5.0.0",
    
    # 数据处理
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "numpy>=1.26.0",
    "pandas>=2.1.0",
    
    # 配置和日志
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # 工具库
    "click>=8.1.7",
    "typer>=0.9.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.3",
    "cachetools>=5.3.2",
    
    # 核心AI依赖 (移动到核心依赖)
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "onnxruntime>=1.16.0",
    "sentence-transformers>=2.2.2",
    "pillow>=10.1.0",
]

[project.optional-dependencies]
# AI/ML依赖
ai = [
    # PyTorch生态
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "torchaudio>=2.1.0",
    
    # Transformers和NLP
    "transformers>=4.36.0",
    "tokenizers>=0.15.0",
    "sentence-transformers>=2.2.2",
    "datasets>=2.15.0",
    
    # ONNX运行时
    "onnxruntime>=1.16.0",
    "onnx>=1.15.0",
    
    # 图像处理
    "pillow>=10.1.0",
    "opencv-python>=4.8.1.78",
    "scikit-image>=0.22.0",
    
          # 音频处理
      "librosa>=0.10.1",
      "soundfile>=0.12.1",
      "SpeechRecognition>=3.10.0",
      "pydub>=0.25.1",
    
    # 科学计算
    "scipy>=1.11.4",
    "scikit-learn>=1.3.2",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    
          # 多模态处理 (Python 3.13.3兼容)
      "mediapipe>=0.10.9",
      "face-recognition>=1.3.0"
]

# 开发依赖
dev = [
    # 测试框架
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=4.1.1",
    
    # 代码质量
    "ruff>=0.1.7",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    
    # 文档
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    
    # 调试和分析
    "ipython>=8.17.2",
    "ipdb>=0.13.13",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
    
    # 预提交钩子
    "pre-commit>=3.6.0",
]

# 监控依赖
monitoring = [
    "prometheus-client>=0.19.0",
    "psutil>=5.9.6",
    "py-spy>=0.3.14",
    "grafana-api>=1.0.3",
]

# 无障碍服务依赖
accessibility = [
    "pyttsx3>=2.90",
    "gTTS>=2.4.0",
    "SpeechRecognition>=3.10.0",
    "pyaudio>=0.2.11",
]

# 生产环境依赖
production = [
    "gunicorn>=21.2.0",
    "gevent>=23.9.1",
    "setproctitle>=1.3.3",
]

# 所有可选依赖
all = [
    "xiaoai-service[ai,dev,monitoring,accessibility,production]"
]

[project.urls]
Homepage = "https://github.com/SUOKE2024/suoke_life"
Documentation = "https://docs.suoke.life/xiaoai-service"
Repository = "https://github.com/SUOKE2024/suoke_life"
Issues = "https://github.com/SUOKE2024/suoke_life/issues"
Changelog = "https://github.com/SUOKE2024/suoke_life/blob/main/CHANGELOG.md"

[project.scripts]
xiaoai-service = "xiaoai.cli:main"
xiaoai-worker = "xiaoai.cli:worker"
xiaoai-health = "xiaoai.cli:health"

[tool.hatch.version]
path = "xiaoai/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["xiaoai"]

[tool.hatch.build.targets.sdist]
include = [
    "/xiaoai",
    "/tests",
    "/config",
    "/docs",
    "/scripts",
]

# ===== 工具配置 =====

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise from
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["xiaoai"]
force-sort-within-sections = true

[tool.black]
target-version = ["py313"]
line-length = 100
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["xiaoai"]
force_sort_within_sections = true

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "torch.*",
    "transformers.*",
    "librosa.*",
    "cv2.*",
    "mediapipe.*",
    "speech_recognition.*",
    "pyttsx3.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=xiaoai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "ai: marks tests that require AI models",
    "gpu: marks tests that require GPU",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["xiaoai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
]
