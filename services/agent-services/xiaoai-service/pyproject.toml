[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "xiaoai-service"
version = "1.0.0"
description = "小艾智能体服务 - 索克生活智能健康管理平台的核心AI智能体"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13.3"
authors = [
    {name = "Suoke Life Team", email = "dev@suokelife.com"},
]
maintainers = [
    {name = "Suoke Life Team", email = "dev@suokelife.com"},
]
keywords = [
    "ai-agent",
    "health-management", 
    "traditional-chinese-medicine",
    "preventive-medicine",
    "fastapi",
    "microservice"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]

# 核心依赖 - 生产环境必需
dependencies = [
    # Web框架
    "fastapi>=0.115.0,<1.0.0",
    "uvicorn[standard]>=0.32.0,<1.0.0",
    
    # 数据验证和设置
    "pydantic>=2.10.0,<3.0.0",
    "pydantic-settings>=2.6.0,<3.0.0",
    
    # 数据库
    "sqlalchemy>=2.0.36,<3.0.0",
    "asyncpg>=0.30.0,<1.0.0",
    "alembic>=1.13.0,<2.0.0",
    
    # 缓存和消息队列
    "redis>=5.2.0,<6.0.0",
    "celery>=5.4.0,<6.0.0",
    
    # HTTP客户端
    "httpx>=0.28.0,<1.0.0",
    "aiohttp>=3.9.1,<4.0.0",
    
    # 配置和环境
    "python-dotenv>=1.0.1,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    
    # 日志和监控
    "loguru>=0.7.2,<1.0.0",
    "structlog>=24.4.0,<25.0.0",
    
    # 工具库
    "tenacity>=9.0.0,<10.0.0",
    "ujson>=5.10.0,<6.0.0",
    "python-multipart>=0.0.12,<1.0.0",
    "click>=8.1.7,<9.0.0",
    
    # 安全
    "cryptography>=43.0.0,<44.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    
    # 时间处理
    "pendulum>=3.0.0,<4.0.0",
    
    # 数据处理
    "pandas>=2.2.0,<3.0.0",
    "numpy>=2.1.0,<3.0.0",
]

[project.optional-dependencies]
# AI/ML 相关依赖
ai = [
    "torch>=2.1.0,<3.0.0",
    "transformers>=4.36.0,<5.0.0",
    "sentence-transformers>=3.3.0,<4.0.0",
    "langchain>=0.1.0,<1.0.0",
    "langchain-community>=0.0.10,<1.0.0",
    "langchain-openai>=0.0.5,<1.0.0",
    "openai>=1.54.0,<2.0.0",
    "anthropic>=0.40.0,<1.0.0",
    "scipy>=1.14.0,<2.0.0",
    "scikit-learn>=1.5.0,<2.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    "seaborn>=0.13.0,<1.0.0",
]

# 开发工具
dev = [
    # 测试框架
    "pytest>=8.3.0,<9.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "pytest-cov>=6.0.0,<7.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pytest-xdist>=3.6.0,<4.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "httpx>=0.28.0",  # 用于测试HTTP客户端
    
    # 代码格式化和检查
    "black>=24.10.0,<25.0.0",
    "isort>=5.13.0,<6.0.0",
    "ruff>=0.7.0,<1.0.0",
    
    # 类型检查
    "mypy>=1.13.0,<2.0.0",
    "types-pyyaml>=6.0.12",
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    
    # 文档生成
    "mkdocs>=1.6.0,<2.0.0",
    "mkdocs-material>=9.5.0,<10.0.0",
    "mkdocstrings[python]>=0.26.0,<1.0.0",
    
    # 安全检查
    "bandit>=1.7.10,<2.0.0",
    "safety>=3.2.0,<4.0.0",
    
    # 性能分析
    "py-spy>=0.3.14,<1.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
]

# 生产环境监控
monitoring = [
    "prometheus-client>=0.21.0,<1.0.0",
    "opentelemetry-api>=1.27.0,<2.0.0",
    "opentelemetry-sdk>=1.27.0,<2.0.0",
    "opentelemetry-instrumentation-fastapi>=0.48b0,<1.0.0",
    "opentelemetry-instrumentation-sqlalchemy>=0.48b0,<1.0.0",
    "sentry-sdk[fastapi]>=2.17.0,<3.0.0",
]

# 完整安装（包含所有可选依赖）
all = [
    "xiaoai-service[ai,dev,monitoring]",
]

[project.scripts]
xiaoai = "xiaoai.cli.main:main"
xiaoai-server = "xiaoai.cli.server:run_server"
xiaoai-worker = "xiaoai.cli.worker:run_worker"

[project.urls]
Homepage = "https://github.com/suokelife/suoke_life"
Documentation = "https://docs.suokelife.com/xiaoai"
Repository = "https://github.com/suokelife/suoke_life"
Issues = "https://github.com/suokelife/suoke_life/issues"
Changelog = "https://github.com/suokelife/suoke_life/blob/main/services/agent-services/xiaoai-service/CHANGELOG.md"

# ===== 工具配置 =====

[tool.hatch.version]
path = "xiaoai/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["xiaoai"]

[tool.hatch.build.targets.sdist]
include = [
    "/xiaoai",
    "/tests",
    "/docs",
    "/config",
    "/scripts",
    "README.md",
    "CHANGELOG.md",
    "pyproject.toml",
]

# Black 代码格式化
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除的目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | __pycache__
)/
'''

# isort 导入排序
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["xiaoai"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "redis", "loguru"]

# Ruff 代码检查和格式化
[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # 允许在 __init__.py 中有未使用的导入
"tests/**/*.py" = ["ARG", "PLR2004"]  # 测试文件中允许一些特殊情况

# MyPy 类型检查
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "celery.*",
    "transformers.*",
    "torch.*",
    "langchain.*",
    "openai.*",
    "anthropic.*",
]
ignore_missing_imports = true

# Pytest 测试配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=xiaoai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI models",
    "external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage 配置
[tool.coverage.run]
source = ["xiaoai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit 安全检查
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # 跳过 assert 和 shell 注入检查（在测试中常用）
