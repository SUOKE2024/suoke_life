apiVersion: v1
kind: Namespace
metadata:
  name: suoke-life
  labels:
    name: suoke-life
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: xiaoai-config
  namespace: suoke-life
data:
  # 应用配置
  app.yaml: |
    service:
      name: xiaoai-service
      version: "2.0.0"
      port: 8000
      
    # 断路器配置
    circuit_breaker:
      ai_model:
        failure_threshold: 3
        recovery_timeout: 30
        timeout: 10
      database:
        failure_threshold: 5
        recovery_timeout: 60
        timeout: 5
      external_api:
        failure_threshold: 2
        recovery_timeout: 120
        timeout: 15
    
    # 限流配置
    rate_limit:
      diagnosis:
        rate: 10.0
        burst: 20
      emergency:
        rate: 50.0
        burst: 100
      image_analysis:
        rate: 5.0
        burst: 10
    
    # 缓存配置
    cache:
      ttl: 300
      max_size: 1000
    
    # 追踪配置
    tracing:
      enabled: true
      service_name: xiaoai-service
      jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    
    # 日志配置
    logging:
      level: INFO
      format: json
      
  # 数据库配置
  database.yaml: |
    postgresql:
      host: postgres-service
      port: 5432
      database: suoke_life
      username: xiaoai_user
      pool_size: 20
      max_overflow: 30
      pool_timeout: 30
      
  # Redis配置
  redis.yaml: |
    redis:
      host: redis-service
      port: 6379
      db: 0
      pool_size: 10
      timeout: 5

---
apiVersion: v1
kind: Secret
metadata:
  name: xiaoai-secrets
  namespace: suoke-life
type: Opaque
data:
  # Base64编码的密码
  db-password: cGFzc3dvcmQxMjM=  # password123
  redis-password: cmVkaXNwYXNzd29yZA==  # redispassword
  jwt-secret: and0LXNlY3JldC1rZXktZm9yLXhpYW9haQ==  # jwt-secret-key-for-xiaoai

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: xiaoai-service
  namespace: suoke-life
  labels:
    app: xiaoai-service
    version: v2.0.0
    component: agent-service
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: xiaoai-service
  template:
    metadata:
      labels:
        app: xiaoai-service
        version: v2.0.0
        component: agent-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: xiaoai-service-account
      containers:
      - name: xiaoai-service
        image: suoke-life/xiaoai-service:2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        
        # 环境变量
        env:
        - name: SERVICE_NAME
          value: "xiaoai-service"
        - name: SERVICE_VERSION
          value: "2.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: jwt-secret
        
        # 配置文件挂载
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        
        # 资源限制
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # 启动探针
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        
        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      # 卷配置
      volumes:
      - name: config-volume
        configMap:
          name: xiaoai-config
      - name: logs-volume
        emptyDir: {}
      
      # 调度配置
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - xiaoai-service
              topologyKey: kubernetes.io/hostname
      
      # 容忍度
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: xiaoai-service
  namespace: suoke-life
  labels:
    app: xiaoai-service
    component: agent-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: xiaoai-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xiaoai-service-account
  namespace: suoke-life
  labels:
    app: xiaoai-service

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: suoke-life
  name: xiaoai-service-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: xiaoai-service-rolebinding
  namespace: suoke-life
subjects:
- kind: ServiceAccount
  name: xiaoai-service-account
  namespace: suoke-life
roleRef:
  kind: Role
  name: xiaoai-service-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: xiaoai-service-hpa
  namespace: suoke-life
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: xiaoai-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: xiaoai-service-pdb
  namespace: suoke-life
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: xiaoai-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: xiaoai-service-netpol
  namespace: suoke-life
spec:
  podSelector:
    matchLabels:
      app: xiaoai-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: suoke-life
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: suoke-life
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS 