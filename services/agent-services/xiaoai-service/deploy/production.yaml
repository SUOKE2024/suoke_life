# 小艾智能体服务 - 生产环境部署配置
apiVersion: v1
kind: Namespace
metadata:
  name: xiaoai-service
  labels:
    app: xiaoai-service
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: xiaoai-config
  namespace: xiaoai-service
data:
  config.yaml: |
    app:
      name: "xiaoai-service"
      version: "1.0.0"
      environment: "production"
      debug: false
      log_level: "INFO"
    
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      max_connections: 1000
      keepalive_timeout: 65
      
    database:
      host: "postgres-service"
      port: 5432
      name: "xiaoai_db"
      pool_size: 20
      max_overflow: 30
      pool_timeout: 30
      pool_recycle: 3600
      
    redis:
      host: "redis-service"
      port: 6379
      db: 0
      max_connections: 100
      socket_timeout: 5
      
    ai_models:
      cache_size: "2GB"
      model_timeout: 30
      batch_size: 32
      enable_gpu: true
      
    monitoring:
      enable_metrics: true
      metrics_port: 9090
      health_check_interval: 30
      
    accessibility:
      enable_tts: true
      enable_stt: true
      enable_gesture: true
      voice_cache_size: "500MB"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: xiaoai-secrets
  namespace: xiaoai-service
type: Opaque
stringData:
  DATABASE_PASSWORD: "your_database_password"
  REDIS_PASSWORD: "your_redis_password"
  JWT_SECRET: "your_jwt_secret"
  API_KEY: "your_api_key"

---
# Deployment for XiaoAI Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: xiaoai-service
  namespace: xiaoai-service
  labels:
    app: xiaoai-service
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: xiaoai-service
  template:
    metadata:
      labels:
        app: xiaoai-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: xiaoai-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: xiaoai-service
        image: suoke/xiaoai-service:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_HOST
          value: "postgres-service"
        - name: DATABASE_NAME
          value: "xiaoai_db"
        - name: DATABASE_USER
          value: "xiaoai_user"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: JWT_SECRET
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: xiaoai-secrets
              key: API_KEY
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: model-cache
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config-volume
        configMap:
          name: xiaoai-config
      - name: model-cache
        persistentVolumeClaim:
          claimName: xiaoai-model-cache
      - name: logs
        persistentVolumeClaim:
          claimName: xiaoai-logs
      nodeSelector:
        node-type: gpu-enabled
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
# Service for XiaoAI Service
apiVersion: v1
kind: Service
metadata:
  name: xiaoai-service
  namespace: xiaoai-service
  labels:
    app: xiaoai-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: xiaoai-service

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xiaoai-service
  namespace: xiaoai-service

---
# ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: xiaoai-service
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: xiaoai-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: xiaoai-service
subjects:
- kind: ServiceAccount
  name: xiaoai-service
  namespace: xiaoai-service

---
# PersistentVolumeClaim for model cache
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: xiaoai-model-cache
  namespace: xiaoai-service
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
# PersistentVolumeClaim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: xiaoai-logs
  namespace: xiaoai-service
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: xiaoai-service-hpa
  namespace: xiaoai-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: xiaoai-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: xiaoai-service-pdb
  namespace: xiaoai-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: xiaoai-service

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: xiaoai-service-netpol
  namespace: xiaoai-service
spec:
  podSelector:
    matchLabels:
      app: xiaoai-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: xiaoai-service-ingress
  namespace: xiaoai-service
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.suoke.life
    secretName: xiaoai-service-tls
  rules:
  - host: api.suoke.life
    http:
      paths:
      - path: /xiaoai
        pathType: Prefix
        backend:
          service:
            name: xiaoai-service
            port:
              number: 80

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: xiaoai-service-monitor
  namespace: xiaoai-service
  labels:
    app: xiaoai-service
spec:
  selector:
    matchLabels:
      app: xiaoai-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: xiaoai-service-alerts
  namespace: xiaoai-service
  labels:
    app: xiaoai-service
spec:
  groups:
  - name: xiaoai-service.rules
    rules:
    - alert: XiaoAIServiceDown
      expr: up{job="xiaoai-service"} == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "XiaoAI Service is down"
        description: "XiaoAI Service has been down for more than 5 minutes."
    
    - alert: XiaoAIServiceHighErrorRate
      expr: rate(http_requests_total{job="xiaoai-service",status=~"5.."}[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "XiaoAI Service high error rate"
        description: "XiaoAI Service error rate is above 10% for 5 minutes."
    
    - alert: XiaoAIServiceHighLatency
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="xiaoai-service"}[5m])) > 2
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "XiaoAI Service high latency"
        description: "XiaoAI Service 95th percentile latency is above 2 seconds."
    
    - alert: XiaoAIServiceHighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"xiaoai-service-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "XiaoAI Service high memory usage"
        description: "XiaoAI Service memory usage is above 90%."
    
    - alert: XiaoAIServiceHighCPUUsage
      expr: rate(container_cpu_usage_seconds_total{pod=~"xiaoai-service-.*"}[5m]) / container_spec_cpu_quota * 100 > 80
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "XiaoAI Service high CPU usage"
        description: "XiaoAI Service CPU usage is above 80%." 