name: 小艾智能体服务 CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/agent-services/xiaoai-service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/agent-services/xiaoai-service/**'

env:
  PYTHON_VERSION: '3.13.3'
  SERVICE_PATH: 'services/agent-services/xiaoai-service'

jobs:
  # ===== 代码质量检查 =====
  quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装 UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: 安装依赖
      run: |
        uv sync --extra dev

    - name: 代码格式检查
      run: |
        uv run black --check xiaoai/ tests/
        uv run isort --check-only xiaoai/ tests/

    - name: 代码风格检查
      run: |
        uv run ruff check xiaoai/ tests/

    - name: 类型检查
      run: |
        uv run mypy xiaoai/

    - name: 安全检查
      run: |
        uv run bandit -r xiaoai/
        uv run safety check

  # ===== 单元测试 =====
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    strategy:
      matrix:
        python-version: ['3.13.3']
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 安装 UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: 安装依赖
      run: |
        uv sync --extra dev --extra ai

    - name: 运行测试
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        uv run pytest tests/ -v --cov=xiaoai --cov-report=xml --cov-report=html

    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.SERVICE_PATH }}/coverage.xml
        flags: xiaoai-service
        name: xiaoai-service-coverage

  # ===== 集成测试 =====
  integration:
    name: 集成测试
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 启动测试环境
      run: |
        docker-compose -f docker-compose.yml up -d --build
        sleep 30

    - name: 等待服务就绪
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

    - name: 运行集成测试
      run: |
        docker-compose exec -T xiaoai-service uv run pytest tests/integration/ -v

    - name: 清理测试环境
      if: always()
      run: |
        docker-compose down -v

  # ===== 构建 Docker 镜像 =====
  build:
    name: 构建镜像
    runs-on: ubuntu-latest
    needs: [quality, test]
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录 Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: suokelife/xiaoai-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 构建并推送镜像
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.SERVICE_PATH }}
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== 性能测试 =====
  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 启动服务
      run: |
        docker-compose up -d
        sleep 30

    - name: 安装性能测试工具
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils

    - name: 运行性能测试
      run: |
        # 基础健康检查性能测试
        ab -n 1000 -c 10 http://localhost:8000/health
        
        # API 性能测试
        ab -n 500 -c 5 -H "Content-Type: application/json" \
           -p tests/data/sample_request.json \
           http://localhost:8000/api/v1/diagnosis/analyze

    - name: 清理环境
      if: always()
      run: |
        docker-compose down -v

  # ===== 安全扫描 =====
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'suokelife/xiaoai-service:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 上传 Trivy 扫描结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===== 部署到开发环境 =====
  deploy-dev:
    name: 部署到开发环境
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 部署到开发环境
      run: |
        echo "部署到开发环境..."
        # 这里添加实际的部署脚本

  # ===== 部署到生产环境 =====
  deploy-prod:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [quality, test, build, performance, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本 