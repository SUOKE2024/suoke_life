"""
inquiry_service_pb2_grpc - 索克生活项目模块
"""

    from grpc._utilities import first_version_is_lower
from time import time
import grpc

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""




GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    pass
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    pass
    _version_not_supported = True

if _version_not_supported:
    pass
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in inquiry_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please self.upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or self.downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class InquiryServiceStub(object):
    pass
    """问诊服务 - 负责对话交互和问诊信息采集与分析
    """

    def __init__(self, channel):
    pass
        """Constructor.

        Args:
    pass
            channel: A grpc.Channel.
        """
        self.ConductInquiry = channel.unary_unary(
                '/inquiry_service.InquiryService/ConductInquiry',
                request_serializer=inquiry__service__pb2.InquiryRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.InquiryResponse.FromString,
                _registered_method=True)
        self.AnalyzeSymptoms = channel.unary_unary(
                '/inquiry_service.InquiryService/AnalyzeSymptoms',
                request_serializer=inquiry__service__pb2.SymptomsRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.SymptomsAnalysisResponse.FromString,
                _registered_method=True)
        self.GetSuggestedQuestions = channel.unary_unary(
                '/inquiry_service.InquiryService/GetSuggestedQuestions',
                request_serializer=inquiry__service__pb2.SuggestedQuestionsRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.SuggestedQuestionsResponse.FromString,
                _registered_method=True)
        self.AnalyzeMedicalHistory = channel.unary_unary(
                '/inquiry_service.InquiryService/AnalyzeMedicalHistory',
                request_serializer=inquiry__service__pb2.MedicalHistoryRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.MedicalHistoryAnalysisResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/inquiry_service.InquiryService/HealthCheck',
                request_serializer=inquiry__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=inquiry__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)

class InquiryServiceServicer(object):
    pass
    """问诊服务 - 负责对话交互和问诊信息采集与分析
    """

    def ConductInquiry(self, request, context):
    pass
        """进行对话问诊
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeSymptoms(self, request, context):
    pass
        """分析症状
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuggestedQuestions(self, request, context):
    pass
        """获取问诊建议问题
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeMedicalHistory(self, request, context):
    pass
        """分析病史数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
    pass
        """服务健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_InquiryServiceServicer_to_server(servicer, server):
    pass
    rpc_method_handlers = {
            'ConductInquiry': grpc.unary_unary_rpc_method_handler(
                    servicer.ConductInquiry,
                    request_deserializer=inquiry__service__pb2.InquiryRequest.FromString,
                    response_serializer=inquiry__service__pb2.InquiryResponse.SerializeToString),
            'AnalyzeSymptoms': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeSymptoms,
                    request_deserializer=inquiry__service__pb2.SymptomsRequest.FromString,
                    response_serializer=inquiry__service__pb2.SymptomsAnalysisResponse.SerializeToString),
            'GetSuggestedQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuggestedQuestions,
                    request_deserializer=inquiry__service__pb2.SuggestedQuestionsRequest.FromString,
                    response_serializer=inquiry__service__pb2.SuggestedQuestionsResponse.SerializeToString),
            'AnalyzeMedicalHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeMedicalHistory,
                    request_deserializer=inquiry__service__pb2.MedicalHistoryRequest.FromString,
                    response_serializer=inquiry__service__pb2.MedicalHistoryAnalysisResponse.SerializeToString),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=inquiry__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=inquiry__service__pb2.HealthCheckResponse.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler(
            'inquiry_service.InquiryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler))
    server.add_registered_method_handlers('inquiry_service.InquiryService', rpc_method_handlers)

class InquiryService(object):
    pass
    """问诊服务 - 负责对话交互和问诊信息采集与分析
    """

    @staticmethod
    def ConductInquiry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry_service.InquiryService/ConductInquiry',
            inquiry__service__pb2.InquiryRequest.SerializeToString,
            inquiry__service__pb2.InquiryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeSymptoms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry_service.InquiryService/AnalyzeSymptoms',
            inquiry__service__pb2.SymptomsRequest.SerializeToString,
            inquiry__service__pb2.SymptomsAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def GetSuggestedQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry_service.InquiryService/GetSuggestedQuestions',
            inquiry__service__pb2.SuggestedQuestionsRequest.SerializeToString,
            inquiry__service__pb2.SuggestedQuestionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeMedicalHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry_service.InquiryService/AnalyzeMedicalHistory',
            inquiry__service__pb2.MedicalHistoryRequest.SerializeToString,
            inquiry__service__pb2.MedicalHistoryAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inquiry_service.InquiryService/HealthCheck',
            inquiry__service__pb2.HealthCheckRequest.SerializeToString,
            inquiry__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)
