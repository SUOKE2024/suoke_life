# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from api.grpc import syndrome_pb2 as syndrome__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in syndrome_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SyndromeServiceStub(object):
    """证型定义服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSyndromeDefinition = channel.unary_unary(
                '/xiaoai_service.syndrome.SyndromeService/GetSyndromeDefinition',
                request_serializer=syndrome__pb2.SyndromeRequest.SerializeToString,
                response_deserializer=syndrome__pb2.SyndromeDefinition.FromString,
                _registered_method=True)
        self.IdentifySyndrome = channel.unary_unary(
                '/xiaoai_service.syndrome.SyndromeService/IdentifySyndrome',
                request_serializer=syndrome__pb2.SyndromeIdentificationRequest.SerializeToString,
                response_deserializer=syndrome__pb2.SyndromeIdentificationResponse.FromString,
                _registered_method=True)
        self.ListSyndromeTypes = channel.unary_unary(
                '/xiaoai_service.syndrome.SyndromeService/ListSyndromeTypes',
                request_serializer=syndrome__pb2.ListTypesRequest.SerializeToString,
                response_deserializer=syndrome__pb2.ListTypesResponse.FromString,
                _registered_method=True)
        self.GetSyndromeRelationshipGraph = channel.unary_unary(
                '/xiaoai_service.syndrome.SyndromeService/GetSyndromeRelationshipGraph',
                request_serializer=syndrome__pb2.SyndromeGraphRequest.SerializeToString,
                response_deserializer=syndrome__pb2.SyndromeGraph.FromString,
                _registered_method=True)


class SyndromeServiceServicer(object):
    """证型定义服务
    """

    def GetSyndromeDefinition(self, request, context):
        """获取证型定义
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IdentifySyndrome(self, request, context):
        """证型辨识
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSyndromeTypes(self, request, context):
        """获取所有证型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSyndromeRelationshipGraph(self, request, context):
        """获取证型关系图
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyndromeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSyndromeDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSyndromeDefinition,
                    request_deserializer=syndrome__pb2.SyndromeRequest.FromString,
                    response_serializer=syndrome__pb2.SyndromeDefinition.SerializeToString,
            ),
            'IdentifySyndrome': grpc.unary_unary_rpc_method_handler(
                    servicer.IdentifySyndrome,
                    request_deserializer=syndrome__pb2.SyndromeIdentificationRequest.FromString,
                    response_serializer=syndrome__pb2.SyndromeIdentificationResponse.SerializeToString,
            ),
            'ListSyndromeTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSyndromeTypes,
                    request_deserializer=syndrome__pb2.ListTypesRequest.FromString,
                    response_serializer=syndrome__pb2.ListTypesResponse.SerializeToString,
            ),
            'GetSyndromeRelationshipGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSyndromeRelationshipGraph,
                    request_deserializer=syndrome__pb2.SyndromeGraphRequest.FromString,
                    response_serializer=syndrome__pb2.SyndromeGraph.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xiaoai_service.syndrome.SyndromeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xiaoai_service.syndrome.SyndromeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SyndromeService(object):
    """证型定义服务
    """

    @staticmethod
    def GetSyndromeDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.syndrome.SyndromeService/GetSyndromeDefinition',
            syndrome__pb2.SyndromeRequest.SerializeToString,
            syndrome__pb2.SyndromeDefinition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IdentifySyndrome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.syndrome.SyndromeService/IdentifySyndrome',
            syndrome__pb2.SyndromeIdentificationRequest.SerializeToString,
            syndrome__pb2.SyndromeIdentificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSyndromeTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.syndrome.SyndromeService/ListSyndromeTypes',
            syndrome__pb2.ListTypesRequest.SerializeToString,
            syndrome__pb2.ListTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSyndromeRelationshipGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.syndrome.SyndromeService/GetSyndromeRelationshipGraph',
            syndrome__pb2.SyndromeGraphRequest.SerializeToString,
            syndrome__pb2.SyndromeGraph.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
