"""
xiaoai_service_pb2_grpc - 索克生活项目模块
"""

    from grpc._utilities import first_version_is_lower
from os import os
from time import time
import grpc

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""




GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    pass
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    pass
    _version_not_supported = True

if _version_not_supported:
    pass
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in xiaoai_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please self.upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or self.downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class XiaoAIServiceStub(object):
    pass
    """定义小艾智能体服务接口
    """

    def __init__(self, channel):
    pass
        """Constructor.

        Args:
    pass
            channel: A grpc.Channel.
        """
        self.ChatStream = channel.unary_stream(
                '/xiaoai_service.XiaoAIService/ChatStream',
                request_serializer=xiaoai__service__pb2.ChatRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.CoordinateDiagnosis = channel.unary_unary(
                '/xiaoai_service.XiaoAIService/CoordinateDiagnosis',
                request_serializer=xiaoai__service__pb2.DiagnosisCoordinationRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.DiagnosisCoordinationResponse.FromString,
                _registered_method=True)
        self.ProcessMultimodalInput = channel.unary_unary(
                '/xiaoai_service.XiaoAIService/ProcessMultimodalInput',
                request_serializer=xiaoai__service__pb2.MultimodalRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.MultimodalResponse.FromString,
                _registered_method=True)
        self.QueryHealthRecord = channel.unary_unary(
                '/xiaoai_service.XiaoAIService/QueryHealthRecord',
                request_serializer=xiaoai__service__pb2.HealthRecordRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.HealthRecordResponse.FromString,
                _registered_method=True)
        self.GenerateHealthSummary = channel.unary_unary(
                '/xiaoai_service.XiaoAIService/GenerateHealthSummary',
                request_serializer=xiaoai__service__pb2.HealthSummaryRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.HealthSummaryResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/xiaoai_service.XiaoAIService/HealthCheck',
                request_serializer=xiaoai__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=xiaoai__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)

class XiaoAIServiceServicer(object):
    pass
    """定义小艾智能体服务接口
    """

    def ChatStream(self, request, context):
    pass
        """流式聊天接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoordinateDiagnosis(self, request, context):
    pass
        """四诊协调接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessMultimodalInput(self, request, context):
    pass
        """处理多模态输入接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryHealthRecord(self, request, context):
    pass
        """查询用户健康记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateHealthSummary(self, request, context):
    pass
        """生成用户健康摘要
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
    pass
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_XiaoAIServiceServicer_to_server(servicer, server):
    pass
    rpc_method_handlers = {
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=xiaoai__service__pb2.ChatRequest.FromString,
                    response_serializer=xiaoai__service__pb2.ChatResponse.SerializeToString),
            'CoordinateDiagnosis': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordinateDiagnosis,
                    request_deserializer=xiaoai__service__pb2.DiagnosisCoordinationRequest.FromString,
                    response_serializer=xiaoai__service__pb2.DiagnosisCoordinationResponse.SerializeToString),
            'ProcessMultimodalInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMultimodalInput,
                    request_deserializer=xiaoai__service__pb2.MultimodalRequest.FromString,
                    response_serializer=xiaoai__service__pb2.MultimodalResponse.SerializeToString),
            'QueryHealthRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryHealthRecord,
                    request_deserializer=xiaoai__service__pb2.HealthRecordRequest.FromString,
                    response_serializer=xiaoai__service__pb2.HealthRecordResponse.SerializeToString),
            'GenerateHealthSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateHealthSummary,
                    request_deserializer=xiaoai__service__pb2.HealthSummaryRequest.FromString,
                    response_serializer=xiaoai__service__pb2.HealthSummaryResponse.SerializeToString),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=xiaoai__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=xiaoai__service__pb2.HealthCheckResponse.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler(
            'xiaoai_service.XiaoAIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler))
    server.add_registered_method_handlers('xiaoai_service.XiaoAIService', rpc_method_handlers)

class XiaoAIService(object):
    pass
    """定义小艾智能体服务接口
    """

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_stream(
            request,
            target,
            '/xiaoai_service.XiaoAIService/ChatStream',
            xiaoai__service__pb2.ChatRequest.SerializeToString,
            xiaoai__service__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def CoordinateDiagnosis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.XiaoAIService/CoordinateDiagnosis',
            xiaoai__service__pb2.DiagnosisCoordinationRequest.SerializeToString,
            xiaoai__service__pb2.DiagnosisCoordinationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def ProcessMultimodalInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.XiaoAIService/ProcessMultimodalInput',
            xiaoai__service__pb2.MultimodalRequest.SerializeToString,
            xiaoai__service__pb2.MultimodalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def QueryHealthRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.XiaoAIService/QueryHealthRecord',
            xiaoai__service__pb2.HealthRecordRequest.SerializeToString,
            xiaoai__service__pb2.HealthRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def GenerateHealthSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.XiaoAIService/GenerateHealthSummary',
            xiaoai__service__pb2.HealthSummaryRequest.SerializeToString,
            xiaoai__service__pb2.HealthSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.XiaoAIService/HealthCheck',
            xiaoai__service__pb2.HealthCheckRequest.SerializeToString,
            xiaoai__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)
