# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import model_config_pb2 as model__config__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_config_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ModelConfigServiceStub(object):
    """模型配置管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddUserModelConfig = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/AddUserModelConfig',
                request_serializer=model__config__pb2.AddUserModelConfigRequest.SerializeToString,
                response_deserializer=model__config__pb2.AddUserModelConfigResponse.FromString,
                _registered_method=True)
        self.GetUserModelConfigs = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GetUserModelConfigs',
                request_serializer=model__config__pb2.GetUserModelConfigsRequest.SerializeToString,
                response_deserializer=model__config__pb2.GetUserModelConfigsResponse.FromString,
                _registered_method=True)
        self.GetUserModelConfig = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GetUserModelConfig',
                request_serializer=model__config__pb2.GetUserModelConfigRequest.SerializeToString,
                response_deserializer=model__config__pb2.GetUserModelConfigResponse.FromString,
                _registered_method=True)
        self.UpdateUserModelConfig = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/UpdateUserModelConfig',
                request_serializer=model__config__pb2.UpdateUserModelConfigRequest.SerializeToString,
                response_deserializer=model__config__pb2.UpdateUserModelConfigResponse.FromString,
                _registered_method=True)
        self.DeleteUserModelConfig = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/DeleteUserModelConfig',
                request_serializer=model__config__pb2.DeleteUserModelConfigRequest.SerializeToString,
                response_deserializer=model__config__pb2.DeleteUserModelConfigResponse.FromString,
                _registered_method=True)
        self.ValidateModelConfig = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/ValidateModelConfig',
                request_serializer=model__config__pb2.ValidateModelConfigRequest.SerializeToString,
                response_deserializer=model__config__pb2.ValidateModelConfigResponse.FromString,
                _registered_method=True)
        self.GetAvailableModels = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GetAvailableModels',
                request_serializer=model__config__pb2.GetAvailableModelsRequest.SerializeToString,
                response_deserializer=model__config__pb2.GetAvailableModelsResponse.FromString,
                _registered_method=True)
        self.GetModelHealthStatus = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GetModelHealthStatus',
                request_serializer=model__config__pb2.GetModelHealthStatusRequest.SerializeToString,
                response_deserializer=model__config__pb2.GetModelHealthStatusResponse.FromString,
                _registered_method=True)
        self.TestModelConnection = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/TestModelConnection',
                request_serializer=model__config__pb2.TestModelConnectionRequest.SerializeToString,
                response_deserializer=model__config__pb2.TestModelConnectionResponse.FromString,
                _registered_method=True)
        self.GetSupportedProviders = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GetSupportedProviders',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=model__config__pb2.GetSupportedProvidersResponse.FromString,
                _registered_method=True)
        self.GenerateChatCompletion = channel.unary_unary(
                '/xiaoai.model_config.v1.ModelConfigService/GenerateChatCompletion',
                request_serializer=model__config__pb2.GenerateChatCompletionRequest.SerializeToString,
                response_deserializer=model__config__pb2.GenerateChatCompletionResponse.FromString,
                _registered_method=True)


class ModelConfigServiceServicer(object):
    """模型配置管理服务
    """

    def AddUserModelConfig(self, request, context):
        """添加用户模型配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserModelConfigs(self, request, context):
        """获取用户模型配置列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserModelConfig(self, request, context):
        """获取指定模型配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserModelConfig(self, request, context):
        """更新用户模型配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserModelConfig(self, request, context):
        """删除用户模型配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateModelConfig(self, request, context):
        """验证模型配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableModels(self, request, context):
        """获取可用模型列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelHealthStatus(self, request, context):
        """获取模型健康状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestModelConnection(self, request, context):
        """测试模型连接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedProviders(self, request, context):
        """获取支持的模型提供商
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateChatCompletion(self, request, context):
        """生成聊天完成（内部服务调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddUserModelConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUserModelConfig,
                    request_deserializer=model__config__pb2.AddUserModelConfigRequest.FromString,
                    response_serializer=model__config__pb2.AddUserModelConfigResponse.SerializeToString,
            ),
            'GetUserModelConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserModelConfigs,
                    request_deserializer=model__config__pb2.GetUserModelConfigsRequest.FromString,
                    response_serializer=model__config__pb2.GetUserModelConfigsResponse.SerializeToString,
            ),
            'GetUserModelConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserModelConfig,
                    request_deserializer=model__config__pb2.GetUserModelConfigRequest.FromString,
                    response_serializer=model__config__pb2.GetUserModelConfigResponse.SerializeToString,
            ),
            'UpdateUserModelConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserModelConfig,
                    request_deserializer=model__config__pb2.UpdateUserModelConfigRequest.FromString,
                    response_serializer=model__config__pb2.UpdateUserModelConfigResponse.SerializeToString,
            ),
            'DeleteUserModelConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserModelConfig,
                    request_deserializer=model__config__pb2.DeleteUserModelConfigRequest.FromString,
                    response_serializer=model__config__pb2.DeleteUserModelConfigResponse.SerializeToString,
            ),
            'ValidateModelConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateModelConfig,
                    request_deserializer=model__config__pb2.ValidateModelConfigRequest.FromString,
                    response_serializer=model__config__pb2.ValidateModelConfigResponse.SerializeToString,
            ),
            'GetAvailableModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableModels,
                    request_deserializer=model__config__pb2.GetAvailableModelsRequest.FromString,
                    response_serializer=model__config__pb2.GetAvailableModelsResponse.SerializeToString,
            ),
            'GetModelHealthStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelHealthStatus,
                    request_deserializer=model__config__pb2.GetModelHealthStatusRequest.FromString,
                    response_serializer=model__config__pb2.GetModelHealthStatusResponse.SerializeToString,
            ),
            'TestModelConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.TestModelConnection,
                    request_deserializer=model__config__pb2.TestModelConnectionRequest.FromString,
                    response_serializer=model__config__pb2.TestModelConnectionResponse.SerializeToString,
            ),
            'GetSupportedProviders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedProviders,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=model__config__pb2.GetSupportedProvidersResponse.SerializeToString,
            ),
            'GenerateChatCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateChatCompletion,
                    request_deserializer=model__config__pb2.GenerateChatCompletionRequest.FromString,
                    response_serializer=model__config__pb2.GenerateChatCompletionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xiaoai.model_config.v1.ModelConfigService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xiaoai.model_config.v1.ModelConfigService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelConfigService(object):
    """模型配置管理服务
    """

    @staticmethod
    def AddUserModelConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/AddUserModelConfig',
            model__config__pb2.AddUserModelConfigRequest.SerializeToString,
            model__config__pb2.AddUserModelConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserModelConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GetUserModelConfigs',
            model__config__pb2.GetUserModelConfigsRequest.SerializeToString,
            model__config__pb2.GetUserModelConfigsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserModelConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GetUserModelConfig',
            model__config__pb2.GetUserModelConfigRequest.SerializeToString,
            model__config__pb2.GetUserModelConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserModelConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/UpdateUserModelConfig',
            model__config__pb2.UpdateUserModelConfigRequest.SerializeToString,
            model__config__pb2.UpdateUserModelConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUserModelConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/DeleteUserModelConfig',
            model__config__pb2.DeleteUserModelConfigRequest.SerializeToString,
            model__config__pb2.DeleteUserModelConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateModelConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/ValidateModelConfig',
            model__config__pb2.ValidateModelConfigRequest.SerializeToString,
            model__config__pb2.ValidateModelConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GetAvailableModels',
            model__config__pb2.GetAvailableModelsRequest.SerializeToString,
            model__config__pb2.GetAvailableModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelHealthStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GetModelHealthStatus',
            model__config__pb2.GetModelHealthStatusRequest.SerializeToString,
            model__config__pb2.GetModelHealthStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestModelConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/TestModelConnection',
            model__config__pb2.TestModelConnectionRequest.SerializeToString,
            model__config__pb2.TestModelConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSupportedProviders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GetSupportedProviders',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            model__config__pb2.GetSupportedProvidersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateChatCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai.model_config.v1.ModelConfigService/GenerateChatCompletion',
            model__config__pb2.GenerateChatCompletionRequest.SerializeToString,
            model__config__pb2.GenerateChatCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
