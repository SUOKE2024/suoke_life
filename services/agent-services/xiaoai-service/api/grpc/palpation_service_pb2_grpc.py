"""
palpation_service_pb2_grpc - 索克生活项目模块
"""

    from grpc._utilities import first_version_is_lower
from time import time
import grpc

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""




GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    pass
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    pass
    _version_not_supported = True

if _version_not_supported:
    pass
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in palpation_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please self.upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or self.downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class PalpationServiceStub(object):
    pass
    """切诊服务 - 负责分析脉象、腹诊、皮肤触感和穴位反应等
    """

    def __init__(self, channel):
    pass
        """Constructor.

        Args:
    pass
            channel: A grpc.Channel.
        """
        self.AnalyzePulse = channel.unary_unary(
                '/palpation_service.PalpationService/AnalyzePulse',
                request_serializer=palpation__service__pb2.PulseRequest.SerializeToString,
                response_deserializer=palpation__service__pb2.PalpationResponse.FromString,
                _registered_method=True)
        self.AnalyzeAbdomen = channel.unary_unary(
                '/palpation_service.PalpationService/AnalyzeAbdomen',
                request_serializer=palpation__service__pb2.AbdomenRequest.SerializeToString,
                response_deserializer=palpation__service__pb2.PalpationResponse.FromString,
                _registered_method=True)
        self.AnalyzeSkinTouch = channel.unary_unary(
                '/palpation_service.PalpationService/AnalyzeSkinTouch',
                request_serializer=palpation__service__pb2.SkinTouchRequest.SerializeToString,
                response_deserializer=palpation__service__pb2.PalpationResponse.FromString,
                _registered_method=True)
        self.AnalyzeAcupoints = channel.unary_unary(
                '/palpation_service.PalpationService/AnalyzeAcupoints',
                request_serializer=palpation__service__pb2.AcupointsRequest.SerializeToString,
                response_deserializer=palpation__service__pb2.PalpationResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/palpation_service.PalpationService/HealthCheck',
                request_serializer=palpation__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=palpation__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)

class PalpationServiceServicer(object):
    pass
    """切诊服务 - 负责分析脉象、腹诊、皮肤触感和穴位反应等
    """

    def AnalyzePulse(self, request, context):
    pass
        """分析脉象数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeAbdomen(self, request, context):
    pass
        """分析腹诊数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeSkinTouch(self, request, context):
    pass
        """分析皮肤触感
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeAcupoints(self, request, context):
    pass
        """分析穴位反应
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
    pass
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_PalpationServiceServicer_to_server(servicer, server):
    pass
    rpc_method_handlers = {
            'AnalyzePulse': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzePulse,
                    request_deserializer=palpation__service__pb2.PulseRequest.FromString,
                    response_serializer=palpation__service__pb2.PalpationResponse.SerializeToString),
            'AnalyzeAbdomen': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeAbdomen,
                    request_deserializer=palpation__service__pb2.AbdomenRequest.FromString,
                    response_serializer=palpation__service__pb2.PalpationResponse.SerializeToString),
            'AnalyzeSkinTouch': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeSkinTouch,
                    request_deserializer=palpation__service__pb2.SkinTouchRequest.FromString,
                    response_serializer=palpation__service__pb2.PalpationResponse.SerializeToString),
            'AnalyzeAcupoints': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeAcupoints,
                    request_deserializer=palpation__service__pb2.AcupointsRequest.FromString,
                    response_serializer=palpation__service__pb2.PalpationResponse.SerializeToString),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=palpation__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=palpation__service__pb2.HealthCheckResponse.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler(
            'palpation_service.PalpationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler))
    server.add_registered_method_handlers('palpation_service.PalpationService', rpc_method_handlers)

class PalpationService(object):
    pass
    """切诊服务 - 负责分析脉象、腹诊、皮肤触感和穴位反应等
    """

    @staticmethod
    def AnalyzePulse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/palpation_service.PalpationService/AnalyzePulse',
            palpation__service__pb2.PulseRequest.SerializeToString,
            palpation__service__pb2.PalpationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeAbdomen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/palpation_service.PalpationService/AnalyzeAbdomen',
            palpation__service__pb2.AbdomenRequest.SerializeToString,
            palpation__service__pb2.PalpationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeSkinTouch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/palpation_service.PalpationService/AnalyzeSkinTouch',
            palpation__service__pb2.SkinTouchRequest.SerializeToString,
            palpation__service__pb2.PalpationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeAcupoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/palpation_service.PalpationService/AnalyzeAcupoints',
            palpation__service__pb2.AcupointsRequest.SerializeToString,
            palpation__service__pb2.PalpationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/palpation_service.PalpationService/HealthCheck',
            palpation__service__pb2.HealthCheckRequest.SerializeToString,
            palpation__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)
