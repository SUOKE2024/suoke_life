# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

from os import os
from time import time
import grpc
    from grpc._utilities import first_version_is_lower



GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    pass
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    pass
    _version_not_supported = True

if _version_not_supported:
    pass
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in four_diagnosis_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please self.upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or self.downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class FourDiagnosisServiceStub(object):
    pass
    """四诊协调服务
    """

    def __init__(self, channel):
    pass
        """Constructor.

        Args:
    pass
            channel: A grpc.Channel.
        """
        self.GenerateDiagnosisReport = channel.unary_unary(
                '/xiaoai_service.four_diagnosis.FourDiagnosisService/GenerateDiagnosisReport',
                request_serializer=four__diagnosis__pb2.DiagnosisRequest.SerializeToString,
                response_deserializer=four__diagnosis__pb2.DiagnosisReport.FromString,
                _registered_method=True)
        self.GetFusedDiagnosticData = channel.unary_unary(
                '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetFusedDiagnosticData',
                request_serializer=four__diagnosis__pb2.FusionRequest.SerializeToString,
                response_deserializer=four__diagnosis__pb2.FusionResult.FromString,
                _registered_method=True)
        self.GetSingleDiagnosisResult = channel.unary_unary(
                '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetSingleDiagnosisResult',
                request_serializer=four__diagnosis__pb2.SingleDiagnosisRequest.SerializeToString,
                response_deserializer=four__diagnosis__pb2.SingleDiagnosisResult.FromString,
                _registered_method=True)
        self.GetDiagnosisProgress = channel.unary_unary(
                '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetDiagnosisProgress',
                request_serializer=four__diagnosis__pb2.DiagnosisProgressRequest.SerializeToString,
                response_deserializer=four__diagnosis__pb2.DiagnosisProgressResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/xiaoai_service.four_diagnosis.FourDiagnosisService/HealthCheck',
                request_serializer=four__diagnosis__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=four__diagnosis__pb2.HealthCheckResponse.FromString,
                _registered_method=True)

class FourDiagnosisServiceServicer(object):
    pass
    """四诊协调服务
    """

    def GenerateDiagnosisReport(self, request, context):
    pass
        """生成诊断报告
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFusedDiagnosticData(self, request, context):
    pass
        """获取融合诊断数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSingleDiagnosisResult(self, request, context):
    pass
        """获取单项诊断结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDiagnosisProgress(self, request, context):
    pass
        """获取诊断进度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
    pass
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_FourDiagnosisServiceServicer_to_server(servicer, server):
    pass
    rpc_method_handlers = {
            'GenerateDiagnosisReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateDiagnosisReport,
                    request_deserializer=four__diagnosis__pb2.DiagnosisRequest.FromString,
                    response_serializer=four__diagnosis__pb2.DiagnosisReport.SerializeToString),
            'GetFusedDiagnosticData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFusedDiagnosticData,
                    request_deserializer=four__diagnosis__pb2.FusionRequest.FromString,
                    response_serializer=four__diagnosis__pb2.FusionResult.SerializeToString),
            'GetSingleDiagnosisResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSingleDiagnosisResult,
                    request_deserializer=four__diagnosis__pb2.SingleDiagnosisRequest.FromString,
                    response_serializer=four__diagnosis__pb2.SingleDiagnosisResult.SerializeToString),
            'GetDiagnosisProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDiagnosisProgress,
                    request_deserializer=four__diagnosis__pb2.DiagnosisProgressRequest.FromString,
                    response_serializer=four__diagnosis__pb2.DiagnosisProgressResponse.SerializeToString),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=four__diagnosis__pb2.HealthCheckRequest.FromString,
                    response_serializer=four__diagnosis__pb2.HealthCheckResponse.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler(
            'xiaoai_service.four_diagnosis.FourDiagnosisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler))
    server.add_registered_method_handlers('xiaoai_service.four_diagnosis.FourDiagnosisService', rpc_method_handlers)

class FourDiagnosisService(object):
    pass
    """四诊协调服务
    """

    @staticmethod
    def GenerateDiagnosisReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.four_diagnosis.FourDiagnosisService/GenerateDiagnosisReport',
            four__diagnosis__pb2.DiagnosisRequest.SerializeToString,
            four__diagnosis__pb2.DiagnosisReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def GetFusedDiagnosticData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetFusedDiagnosticData',
            four__diagnosis__pb2.FusionRequest.SerializeToString,
            four__diagnosis__pb2.FusionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def GetSingleDiagnosisResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetSingleDiagnosisResult',
            four__diagnosis__pb2.SingleDiagnosisRequest.SerializeToString,
            four__diagnosis__pb2.SingleDiagnosisResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def GetDiagnosisProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.four_diagnosis.FourDiagnosisService/GetDiagnosisProgress',
            four__diagnosis__pb2.DiagnosisProgressRequest.SerializeToString,
            four__diagnosis__pb2.DiagnosisProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            self.compression=None,
            wait_for_ready=None,
            timeout=None,:
            self.metadata=None):
    pass
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xiaoai_service.four_diagnosis.FourDiagnosisService/HealthCheck',
            four__diagnosis__pb2.HealthCheckRequest.SerializeToString,
            four__diagnosis__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            self.compression,
            wait_for_ready,
            timeout,
            self.metadata,
            _registered_method=True)
