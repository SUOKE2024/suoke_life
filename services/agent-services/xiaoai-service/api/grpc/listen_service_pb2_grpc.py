# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in listen_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )

class ListenServiceStub(object):
    """闻诊服务 - 负责分析声音、语音、呼吸等相关数据
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeVoice = channel.unary_unary(
                '/listen_service.ListenService/AnalyzeVoice',
                request_serializer=listen__service__pb2.AnalyzeVoiceRequest.SerializeToString,
                response_deserializer=listen__service__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeBreathing = channel.unary_unary(
                '/listen_service.ListenService/AnalyzeBreathing',
                request_serializer=listen__service__pb2.AnalyzeBreathingRequest.SerializeToString,
                response_deserializer=listen__service__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.AnalyzeCough = channel.unary_unary(
                '/listen_service.ListenService/AnalyzeCough',
                request_serializer=listen__service__pb2.AnalyzeCoughRequest.SerializeToString,
                response_deserializer=listen__service__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/listen_service.ListenService/HealthCheck',
                request_serializer=listen__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=listen__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)

class ListenServiceServicer(object):
    """闻诊服务 - 负责分析声音、语音、呼吸等相关数据
    """

    def AnalyzeVoice(self, request, context):
        """分析语音数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeBreathing(self, request, context):
        """分析呼吸音
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeCough(self, request, context):
        """分析咳嗽声
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """服务健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_ListenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeVoice': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeVoice,
                    request_deserializer=listen__service__pb2.AnalyzeVoiceRequest.FromString,
                    response_serializer=listen__service__pb2.AnalysisResponse.SerializeToString,
            ),
            'AnalyzeBreathing': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeBreathing,
                    request_deserializer=listen__service__pb2.AnalyzeBreathingRequest.FromString,
                    response_serializer=listen__service__pb2.AnalysisResponse.SerializeToString,
            ),
            'AnalyzeCough': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeCough,
                    request_deserializer=listen__service__pb2.AnalyzeCoughRequest.FromString,
                    response_serializer=listen__service__pb2.AnalysisResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=listen__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=listen__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'listen_service.ListenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('listen_service.ListenService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.
class ListenService(object):
    """闻诊服务 - 负责分析声音、语音、呼吸等相关数据
    """

    @staticmethod
    def AnalyzeVoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/listen_service.ListenService/AnalyzeVoice',
            listen__service__pb2.AnalyzeVoiceRequest.SerializeToString,
            listen__service__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeBreathing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/listen_service.ListenService/AnalyzeBreathing',
            listen__service__pb2.AnalyzeBreathingRequest.SerializeToString,
            listen__service__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeCough(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/listen_service.ListenService/AnalyzeCough',
            listen__service__pb2.AnalyzeCoughRequest.SerializeToString,
            listen__service__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/listen_service.ListenService/HealthCheck',
            listen__service__pb2.HealthCheckRequest.SerializeToString,
            listen__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
