version: '3.8'

services:
  # 老克服务 - Python 主服务
  laoke-service:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    container_name: laoke-service
    restart: unless-stopped
    ports:
      - "9000:9000"  # REST API
      - "9001:9001"  # gRPC
      - "9091:9091"  # Prometheus 指标
    environment:
      - ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=laoke_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EDU_API_URL=http://edu-service-mock:8000/api
      - EDU_API_KEY=dev-edu-api-key
      - VECTOR_DB_URL=http://milvus:19530
      - KNOWLEDGE_GRAPH_URL=http://neo4j:7687
      - LOG_LEVEL=INFO
    volumes:
      - ../../:/app
      - laoke_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - neo4j
      - milvus
      - edu-service-mock
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL - 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: laoke-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=laoke_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: laoke-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j - 知识图谱数据库
  neo4j:
    image: neo4j:5-community
    container_name: laoke-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Milvus - 向量数据库
  milvus:
    image: milvusdb/milvus:v2.3.3
    container_name: laoke-milvus
    restart: unless-stopped
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 教育服务模拟器 - 用于本地开发和测试
  edu-service-mock:
    build:
      context: ../../test/platform
      dockerfile: Dockerfile.edu-mock
    container_name: laoke-edu-service-mock
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - MOCK_DELAY=200  # 模拟延迟，毫秒
      - RANDOM_FAILURES=false  # 是否模拟随机失败
    volumes:
      - ../../test/data:/app/data
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus - 指标监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: laoke-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - laoke-network
    depends_on:
      - laoke-service

  # Grafana - 可视化监控面板
  grafana:
    image: grafana/grafana:10.0.0
    container_name: laoke-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - laoke-network
    depends_on:
      - prometheus

  # PgAdmin - PostgreSQL管理工具
  pgadmin:
    image: dpage/pgadmin4:7.0
    container_name: laoke-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@suoke.life
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - laoke-network
    depends_on:
      - postgres

volumes:
  laoke_logs:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  milvus_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  laoke-network:
    driver: bridge 