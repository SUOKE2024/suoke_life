# 老克智能体服务 - Docker Compose配置
# 索克生活项目 v1.0.0

version: '3.8'

services:
  # 老克智能体服务
  laoke-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laoke-service
    restart: unless-stopped
    ports:
      - "8080:8080"    # HTTP API
      - "50051:50051"  # gRPC
      - "9091:9091"    # Metrics
    environment:
      - SERVICE__ENVIRONMENT=production
      - SERVICE__DEBUG=false
      - SERVICE__HOST=0.0.0.0
      - SERVICE__PORT=8080
      - SERVICE__GRPC_PORT=50051
      - SERVICE__METRICS_PORT=9091
      - MONGODB_URI=mongodb://mongodb:27017/laoke_db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=laoke_password
      - REDIS_URL=redis://redis:6379/0
      - MODELS__API_KEY=${DEEPSEEK_API_KEY:-sk-26ac526b8c3b41c2a39bd80a156aaa68}
      - MODELS__BASE_URL=https://api.deepseek.com/v1
      - MODELS__MODEL_NAME=deepseek-chat
    depends_on:
      - mongodb
      - neo4j
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - laoke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB数据库
  mongodb:
    image: mongo:7.0
    container_name: laoke-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=laoke_admin_password
      - MONGO_INITDB_DATABASE=laoke_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - laoke-network

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.15
    container_name: laoke-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/laoke_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./scripts/init-neo4j.cypher:/var/lib/neo4j/import/init.cypher:ro
    networks:
      - laoke-network

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: laoke-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass laoke_redis_password
    volumes:
      - redis_data:/data
    networks:
      - laoke-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: laoke-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - laoke-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: laoke-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=laoke_grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - laoke-network

# 数据卷
volumes:
  mongodb_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络
networks:
  laoke-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 