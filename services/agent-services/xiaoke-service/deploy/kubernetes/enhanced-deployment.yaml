---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: agent-service
    app.kubernetes.io/part-of: suoke-life

---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: xiaoke-config
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: config
data:
  # 应用配置
  APP_NAME: "xiaoke-service"
  APP_VERSION: "1.0.0"
  LOG_LEVEL: "INFO"
  
  # 服务配置
  SERVICE_PORT: "8001"
  WORKERS: "4"
  
  # 数据库配置
  DB_HOST: "postgresql-service"
  DB_PORT: "5432"
  DB_NAME: "xiaoke_db"
  
  # Redis配置
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "1"
  
  # 限流配置
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "100"
  
  # 断路器配置
  CIRCUIT_BREAKER_ENABLED: "true"
  CIRCUIT_BREAKER_FAILURE_THRESHOLD: "5"
  CIRCUIT_BREAKER_RECOVERY_TIMEOUT: "60"
  
  # 追踪配置
  TRACING_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger-collector:14268/api/traces"

---
# Secret
apiVersion: v1
kind: Secret
metadata:
  name: xiaoke-secrets
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: secret
type: Opaque
data:
  # Base64编码的密钥
  DB_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  REDIS_PASSWORD: cmVkaXNwYXNz  # redispass
  JWT_SECRET: and0X3NlY3JldF9rZXlfMTIz  # jwt_secret_key_123
  API_KEY: YXBpX2tleV94aWFva2VfMTIz  # api_key_xiaoke_123

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: xiaoke-service
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: api-server
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: xiaoke-service
      app.kubernetes.io/component: api-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: xiaoke-service
        app.kubernetes.io/component: api-server
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: xiaoke-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: xiaoke-service
        image: suoke-life/xiaoke-service:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        env:
        # 从ConfigMap加载环境变量
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: APP_NAME
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: APP_VERSION
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: LOG_LEVEL
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: SERVICE_PORT
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: WORKERS
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: xiaoke-config
              key: REDIS_DB
        # 从Secret加载敏感信息
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoke-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: xiaoke-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: xiaoke-secrets
              key: JWT_SECRET
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: xiaoke-secrets
              key: API_KEY
        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        # 资源限制
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        # 卷挂载
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      # 节点选择器
      nodeSelector:
        kubernetes.io/os: linux
      # 容忍度
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: xiaoke-service
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: api-server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: api-server

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xiaoke-service-sa
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: service-account

---
# Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: xiaoke-service-role
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: xiaoke-service-rolebinding
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: xiaoke-service-sa
  namespace: xiaoke-service
roleRef:
  kind: Role
  name: xiaoke-service-role
  apiGroup: rbac.authorization.k8s.io

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: xiaoke-service-hpa
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: xiaoke-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: xiaoke-service-pdb
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: disruption-budget
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: xiaoke-service
      app.kubernetes.io/component: api-server

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: xiaoke-service-netpol
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: xiaoke-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: api-gateway
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ServiceMonitor (for Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: xiaoke-service-monitor
  namespace: xiaoke-service
  labels:
    app.kubernetes.io/name: xiaoke-service
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: xiaoke-service
      app.kubernetes.io/component: api-server
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s 