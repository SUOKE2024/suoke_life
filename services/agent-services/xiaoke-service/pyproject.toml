[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "xiaoke-service"
version = "1.0.0"
description = "小克智能体服务 - 索克生活健康管理平台的核心AI智能体"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.13.3"
authors = [
    { name = "Suoke Life Team", email = "dev@suokelife.com" },
]
keywords = ["ai", "health", "tcm", "agent", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # 核心Web框架
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # 数据库和缓存
    "sqlalchemy>=2.0.36",
    "asyncpg>=0.30.0",
    "redis>=5.2.0",
    "motor>=3.6.0",  # MongoDB异步驱动
    
    # HTTP客户端和网络
    "httpx>=0.28.0",
    "aiohttp>=3.10.0",
    "websockets>=13.0",
    
    # 配置和环境
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "pydantic-settings>=2.6.0",
    
    # 日志和监控
    "loguru>=0.7.2",
    "structlog>=24.4.0",
    "prometheus-client>=0.21.0",
    "opentelemetry-api>=1.27.0",
    "opentelemetry-sdk>=1.27.0",
    "opentelemetry-exporter-otlp>=1.27.0",
    
    # 工具库
    "tenacity>=9.0.0",
    "ujson>=5.10.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cachetools>=5.5.0",
    
    # 时间处理
    "pendulum>=3.0.0",
    "python-dateutil>=2.9.0",
    
    # 数据处理
    "pandas>=2.2.0",
    "numpy>=2.1.0",
    
    # 消息队列
    "aio-pika>=9.4.0",
    
    # gRPC
    "grpcio>=1.67.0",
    "grpcio-tools>=1.67.0",
    "protobuf>=5.28.0",
]

[project.optional-dependencies]
ai = [
    # AI/ML核心依赖
    "torch>=2.5.0",
    "transformers>=4.46.0",
    "sentence-transformers>=3.3.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.2.0",
    "langchain-community>=0.3.0",
    "openai>=1.54.0",
    "anthropic>=0.40.0",
    "scikit-learn>=1.5.0",
    "scipy>=1.14.0",
    # 向量数据库
    "chromadb>=0.5.0",
    "faiss-cpu>=1.8.0",
    # 中医知识处理
    "jieba>=0.42.1",
    "pypinyin>=0.53.0",
]

blockchain = [
    # 区块链集成
    "web3>=7.4.0",
    "eth-account>=0.13.0",
    "eth-utils>=5.1.0",
    "cryptography>=43.0.0",
]

payment = [
    # 支付集成
    "stripe>=11.1.0",
    "qrcode[pil]>=8.0.0",
]

dev = [
    # 测试框架
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.6.0",
    "httpx>=0.28.0",  # 用于测试HTTP客户端
    
    # 代码质量工具
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    
    # 类型检查
    "types-redis>=4.6.0",
    "types-pyyaml>=6.0.0",
    "types-python-dateutil>=2.9.0",
    
    # 开发工具
    "ipython>=8.29.0",
    "rich>=13.9.0",
    "watchdog>=6.0.0",
]

docs = [
    # 文档生成
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
]

all = [
    "xiaoke-service[ai,blockchain,payment,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/suokelife/suoke_life"
Documentation = "https://docs.suokelife.com"
Repository = "https://github.com/suokelife/suoke_life"
Issues = "https://github.com/suokelife/suoke_life/issues"

[project.scripts]
xiaoke-service = "xiaoke_service.main:main"
xiaoke-dev = "xiaoke_service.cli:dev_main"

# Ruff 配置 - 替代 black, isort, flake8, pylint
[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
]

[tool.ruff.lint.isort]
known-first-party = ["xiaoke_service"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ARG", "S101"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy 配置
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "motor.*",
    "aio_pika.*",
    "grpc.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage 配置
[tool.coverage.run]
source = ["xiaoke_service"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Hatch 配置
[tool.hatch.version]
path = "xiaoke_service/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["xiaoke_service"]

[tool.hatch.envs.default]
dependencies = [
    "xiaoke-service[dev]",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
cov-report = ["test-cov", "coverage html"]
lint = "ruff check {args:.}"
format = "ruff format {args:.}"
type-check = "mypy {args:xiaoke_service tests}"
all = ["format", "lint", "type-check", "test"]

[tool.hatch.envs.docs]
dependencies = [
    "xiaoke-service[docs]",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"
