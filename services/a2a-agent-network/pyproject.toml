[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "a2a-agent-network"
version = "1.0.0"
description = "A2A 智能体网络微服务 - 索克生活健康管理平台的智能体协作服务"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Suoke Life Team", email = "dev@suoke-life.com" }
]
maintainers = [
    { name = "Suoke Life Team", email = "dev@suoke-life.com" }
]
keywords = [
    "ai-agents",
    "microservice",
    "health-management",
    "tcm",
    "workflow-engine"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = [
    # 核心框架
    "flask>=3.0.0",
    "flask-socketio>=5.3.6",
    "flask-cors>=4.0.0",
    
    # 通信协议
    "grpcio>=1.60.0",
    "grpcio-tools>=1.60.0",
    "websockets>=12.0",
    
    # 数据处理和验证
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    
    # 数据库支持
    "motor>=3.3.2",
    "pymongo>=4.6.0",
    "redis>=5.0.1",
    
    # 监控和日志
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # 异步支持
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.1",
    "httpx>=0.26.0",
    
    # 工具库
    "click>=8.1.7",
    "rich>=13.7.0",
    "tenacity>=8.2.3",
    "typer>=0.9.0",
    
    # 安全和认证
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    
    # 配置管理
    "dynaconf>=3.2.4",
]

[project.optional-dependencies]
dev = [
    # 测试工具
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "coverage[toml]>=7.3.4",
    
    # 代码质量
    "black>=23.12.1",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    
    # 文档
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    
    # 开发工具
    "pre-commit>=3.6.0",
    "tox>=4.11.4",
]

production = [
    # 生产部署
    "gunicorn>=21.2.0",
    "uvicorn[standard]>=0.25.0",
    "gevent>=23.9.1",
]

monitoring = [
    # 监控扩展
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-flask>=0.42b0",
    "opentelemetry-instrumentation-grpc>=0.42b0",
    "sentry-sdk[flask]>=1.39.2",
]

[project.urls]
Homepage = "https://github.com/suoke-life/a2a-agent-network"
Documentation = "https://docs.suoke-life.com/a2a-network"
Repository = "https://github.com/suoke-life/a2a-agent-network.git"
Issues = "https://github.com/suoke-life/a2a-agent-network/issues"
Changelog = "https://github.com/suoke-life/a2a-agent-network/blob/main/CHANGELOG.md"

[project.scripts]
a2a-network = "cmd.server.main:main"
a2a-cli = "cmd.cli.main:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ruff>=0.11.11",
    "bandit>=1.8.3",
    "safety>=3.5.0",
    "pydocstyle>=6.3.0",
    "types-pyyaml>=6.0.12.20250516",
    "types-flask-cors>=6.0.0.20250520",
]

[tool.hatch.version]
path = "internal/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["internal", "api", "cmd", "pkg"]

# 代码格式化配置
[tool.black]
line-length = 88
target-version = ['py313']

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["internal", "api", "cmd", "pkg"]

# 类型检查配置
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "motor.*",
    "pymongo.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# 测试配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=internal",
    "--cov=api",
    "--cov=cmd",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"

# 覆盖率配置
[tool.coverage.run]
source = ["internal", "api", "cmd"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

# Bandit 安全检查配置
[tool.bandit]
exclude_dirs = ["test", "tests"]
skips = ["B101", "B601"]

# Ruff 配置 (现代化的 linter)
[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E402",  # module level import not at top of file
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.ruff.lint.isort]
known-first-party = ["internal", "api", "cmd", "pkg"] 
