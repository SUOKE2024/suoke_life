version: '3.8'

services:
  # A2A 智能体网络微服务
  a2a-network:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: a2a-agent-network
    ports:
      - "5000:5000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - A2A_SERVER_HOST=0.0.0.0
      - A2A_SERVER_PORT=5000
      - A2A_DATABASE_MONGODB_URL=mongodb://mongodb:27017
      - A2A_DATABASE_REDIS_URL=redis://redis:6379
      - A2A_MONITORING_ENABLED=true
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - a2a-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB 数据库
  mongodb:
    image: mongo:7.0
    container_name: a2a-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=a2a_network
    volumes:
      - mongodb_data:/data/db
      - ./deploy/docker/init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - a2a-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7.2-alpine
    container_name: a2a-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    networks:
      - a2a-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: a2a-prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - a2a-network
    restart: unless-stopped
    depends_on:
      - a2a-network

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:10.2.0
    container_name: a2a-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - a2a-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: a2a-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - a2a-network
    restart: unless-stopped

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:1.25-alpine
    container_name: a2a-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - a2a-network
    restart: unless-stopped
    depends_on:
      - a2a-network
    profiles:
      - production

# 网络配置
networks:
  a2a-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 开发环境覆盖配置
# 使用: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

# 开发环境特定配置
x-dev-environment: &dev-environment
  - A2A_SERVER_DEBUG=true
  - A2A_LOGGING_LEVEL=DEBUG
  - A2A_DEVELOPMENT_AUTO_RELOAD=true
  - A2A_DEVELOPMENT_DEBUG_MODE=true

services:
  a2a-network:
    build:
      target: development
    environment:
      <<: *dev-environment
    volumes:
      - .:/app
      - /app/.venv  # 排除虚拟环境
    command: ["python", "cmd/server/main.py", "--debug"]
    
  # 开发工具
  adminer:
    image: adminer:4.8.1
    container_name: a2a-adminer
    ports:
      - "8080:8080"
    networks:
      - a2a-network
    profiles:
      - dev-tools

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: a2a-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:password
    networks:
      - a2a-network
    depends_on:
      - redis
    profiles:
      - dev-tools 