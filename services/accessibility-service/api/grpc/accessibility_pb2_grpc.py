# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from api.grpc import accessibility_pb2 as accessibility__pb2

GRPC_GENERATED_VERSION = "1.71.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in accessibility_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AccessibilityServiceStub:
    """无障碍服务API"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlindAssistance = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/BlindAssistance",
            request_serializer=accessibility__pb2.BlindAssistanceRequest.SerializeToString,
            response_deserializer=accessibility__pb2.BlindAssistanceResponse.FromString,
            _registered_method=True,
        )
        self.SignLanguageRecognition = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/SignLanguageRecognition",
            request_serializer=accessibility__pb2.SignLanguageRequest.SerializeToString,
            response_deserializer=accessibility__pb2.SignLanguageResponse.FromString,
            _registered_method=True,
        )
        self.ScreenReading = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/ScreenReading",
            request_serializer=accessibility__pb2.ScreenReadingRequest.SerializeToString,
            response_deserializer=accessibility__pb2.ScreenReadingResponse.FromString,
            _registered_method=True,
        )
        self.VoiceAssistance = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/VoiceAssistance",
            request_serializer=accessibility__pb2.VoiceAssistanceRequest.SerializeToString,
            response_deserializer=accessibility__pb2.VoiceAssistanceResponse.FromString,
            _registered_method=True,
        )
        self.AccessibleContent = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/AccessibleContent",
            request_serializer=accessibility__pb2.AccessibleContentRequest.SerializeToString,
            response_deserializer=accessibility__pb2.AccessibleContentResponse.FromString,
            _registered_method=True,
        )
        self.ManageSettings = channel.unary_unary(
            "/suoke.accessibility.v1.AccessibilityService/ManageSettings",
            request_serializer=accessibility__pb2.SettingsRequest.SerializeToString,
            response_deserializer=accessibility__pb2.SettingsResponse.FromString,
            _registered_method=True,
        )


class AccessibilityServiceServicer:
    """无障碍服务API"""

    def BlindAssistance(self, request, context):
        """导盲服务 - 提供场景识别和语音引导"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SignLanguageRecognition(self, request, context):
        """手语识别 - 将手语视频转换为文本"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ScreenReading(self, request, context):
        """屏幕阅读 - 提供屏幕内容的语音描述"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def VoiceAssistance(self, request, context):
        """语音辅助 - 提供语音控制和语音响应"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AccessibleContent(self, request, context):
        """健康内容无障碍转换 - 将健康内容转换为无障碍格式"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ManageSettings(self, request, context):
        """无障碍设置管理 - 管理用户的无障碍设置"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AccessibilityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "BlindAssistance": grpc.unary_unary_rpc_method_handler(
            servicer.BlindAssistance,
            request_deserializer=accessibility__pb2.BlindAssistanceRequest.FromString,
            response_serializer=accessibility__pb2.BlindAssistanceResponse.SerializeToString,
        ),
        "SignLanguageRecognition": grpc.unary_unary_rpc_method_handler(
            servicer.SignLanguageRecognition,
            request_deserializer=accessibility__pb2.SignLanguageRequest.FromString,
            response_serializer=accessibility__pb2.SignLanguageResponse.SerializeToString,
        ),
        "ScreenReading": grpc.unary_unary_rpc_method_handler(
            servicer.ScreenReading,
            request_deserializer=accessibility__pb2.ScreenReadingRequest.FromString,
            response_serializer=accessibility__pb2.ScreenReadingResponse.SerializeToString,
        ),
        "VoiceAssistance": grpc.unary_unary_rpc_method_handler(
            servicer.VoiceAssistance,
            request_deserializer=accessibility__pb2.VoiceAssistanceRequest.FromString,
            response_serializer=accessibility__pb2.VoiceAssistanceResponse.SerializeToString,
        ),
        "AccessibleContent": grpc.unary_unary_rpc_method_handler(
            servicer.AccessibleContent,
            request_deserializer=accessibility__pb2.AccessibleContentRequest.FromString,
            response_serializer=accessibility__pb2.AccessibleContentResponse.SerializeToString,
        ),
        "ManageSettings": grpc.unary_unary_rpc_method_handler(
            servicer.ManageSettings,
            request_deserializer=accessibility__pb2.SettingsRequest.FromString,
            response_serializer=accessibility__pb2.SettingsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "suoke.accessibility.v1.AccessibilityService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "suoke.accessibility.v1.AccessibilityService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class AccessibilityService:
    """无障碍服务API"""

    @staticmethod
    def BlindAssistance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/BlindAssistance",
            accessibility__pb2.BlindAssistanceRequest.SerializeToString,
            accessibility__pb2.BlindAssistanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SignLanguageRecognition(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/SignLanguageRecognition",
            accessibility__pb2.SignLanguageRequest.SerializeToString,
            accessibility__pb2.SignLanguageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ScreenReading(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/ScreenReading",
            accessibility__pb2.ScreenReadingRequest.SerializeToString,
            accessibility__pb2.ScreenReadingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def VoiceAssistance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/VoiceAssistance",
            accessibility__pb2.VoiceAssistanceRequest.SerializeToString,
            accessibility__pb2.VoiceAssistanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AccessibleContent(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/AccessibleContent",
            accessibility__pb2.AccessibleContentRequest.SerializeToString,
            accessibility__pb2.AccessibleContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ManageSettings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/suoke.accessibility.v1.AccessibilityService/ManageSettings",
            accessibility__pb2.SettingsRequest.SerializeToString,
            accessibility__pb2.SettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
