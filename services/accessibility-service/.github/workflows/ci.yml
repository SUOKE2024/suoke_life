name: Accessibility Service CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/accessibility-service/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/accessibility-service/**'
  workflow_dispatch:

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/accessibility-service
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        run: |
          black --check --diff .
      
      - name: Check imports with isort
        run: |
          isort --check --diff .
      
      - name: Type check with mypy
        run: |
          mypy --ignore-missing-imports .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/accessibility-service
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      
      - name: Run tests with pytest
        run: |
          pytest --cov=internal --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/accessibility-service/coverage.xml
          flags: accessibility-service
          fail_ci_if_error: false

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    defaults:
      run:
        working-directory: services/accessibility-service
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/accessibility-service
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./services/accessibility-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/accessibility-service
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt
      
      - name: Run bandit
        run: |
          bandit -r internal -f json -o bandit-results.json || true
      
      - name: Run safety check
        run: |
          safety check -r requirements.txt --json > safety-results.json || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            services/accessibility-service/bandit-results.json
            services/accessibility-service/safety-results.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/accessibility-service
    
    services:
      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
      
      # 模拟依赖服务
      mockserver:
        image: mockserver/mockserver:mockserver-5.15.0
        ports:
          - 1080:1080
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Configure mock services
        run: |
          python test/setup_mockserver.py
      
      - name: Run integration tests
        run: |
          TEST_ENVIRONMENT=true \
          REDIS_HOST=localhost \
          REDIS_PORT=6379 \
          MOCKSERVER_URL=http://localhost:1080 \
          pytest test/integration --junitxml=integration-test-results.xml
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: services/accessibility-service/integration-test-results.xml

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Update kustomization.yaml
        run: |
          cd ./services/accessibility-service/k8s/overlays/dev
          kustomize edit set image ghcr.io/suoke2024/accessibility-service=ghcr.io/${{ github.repository }}/accessibility-service:sha-${{ github.sha }}
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add ./services/accessibility-service/k8s/overlays/dev/kustomization.yaml
          git commit -m "ci: update accessibility-service image to sha-${GITHUB_SHA::7}"
          git push

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan, integration-test]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: accessibility-service
          SLACK_TITLE: CI Pipeline Result
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: |
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
          SLACK_FOOTER: "Suoke Life Accessibility Service" 