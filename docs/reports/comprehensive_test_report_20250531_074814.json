{
  "summary": {
    "total_tests": 4,
    "passed": 1,
    "failed": 3,
    "errors": 0,
    "success_rate": 25.0,
    "total_duration": 5.314876,
    "start_time": "2025-05-31T07:48:09.125015",
    "end_time": "2025-05-31T07:48:14.439891"
  },
  "test_results": {
    "coordination": {
      "status": "failed",
      "output": "\n> suoke-life@0.1.0 test\n> jest src/core/__tests__/DiagnosticAgentCoordination.test.ts --verbose\n\n",
      "error": "watchman warning:  Recrawled this watch 21 times, most recently because:\nMustScanSubDirs UserDroppedTo resolve, please review the information on\nhttps://facebook.github.io/watchman/docs/troubleshooting.html#recrawl\nTo clear this warning, run:\n`watchman watch-del '/Users/songxu/Developer/suoke_life' ; watchman watch-project '/Users/songxu/Developer/suoke_life'`\n\nFAIL src/core/__tests__/DiagnosticAgentCoordination.test.ts\n  ● Test suite failed to run\n\n    Cannot find module '../monitoring/Logger' from 'src/core/coordination/DiagnosticAgentCoordinator.ts'\n\n    Require stack:\n      src/core/coordination/DiagnosticAgentCoordinator.ts\n      src/core/__tests__/DiagnosticAgentCoordination.test.ts\n\n      1 | import { EventEmitter } from 'events';\n    > 2 | import { Logger } from '../monitoring/Logger';\n        | ^\n      3 | import { MetricsCollector } from '../monitoring/MetricsCollector';\n      4 | import { ErrorHandler } from '../error/ErrorHandler';\n      5 |\n\n      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)\n      at Object.require (src/core/coordination/DiagnosticAgentCoordinator.ts:2:1)\n      at Object.require (src/core/__tests__/DiagnosticAgentCoordination.test.ts:2:1)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.813 s\nRan all test suites matching /src\\/core\\/__tests__\\/DiagnosticAgentCoordination.test.ts/i.\n",
      "duration": 1.9504401683807373,
      "test_type": "coordination"
    },
    "ai_inference": {
      "status": "failed",
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.9.6, pytest-8.3.4, pluggy-1.5.0\nrootdir: /Users/songxu/Developer/suoke_life\nconfigfile: pyproject.toml\nplugins: asyncio-0.24.0, mock-3.14.0, anyio-4.6.2.post1\nasyncio: mode=strict, default_loop_scope=None\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________ ERROR collecting src/core/__tests__/EdgeAIInference.test.py __________\nImportError while importing test module '/Users/songxu/Developer/suoke_life/src/core/__tests__/EdgeAIInference.test.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nE   ModuleNotFoundError: No module named 'EdgeAIInference'\n=========================== short test summary info ============================\nERROR src/core/__tests__/EdgeAIInference.test.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.15s ===============================\n",
      "error": "/Users/songxu/Library/Python/3.9/lib/python/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "duration": 0.4930911064147949,
      "test_type": "ai_inference"
    },
    "blockchain": {
      "status": "failed",
      "output": "",
      "error": "ImportError while loading conftest '/Users/songxu/Developer/suoke_life/services/blockchain-service/tests/conftest.py'.\ntests/conftest.py:22: in <module>\n    from suoke_blockchain_service.config import Settings\nsuoke_blockchain_service/__init__.py:11: in <module>\n    from .config import settings\nsuoke_blockchain_service/config.py:34: in <module>\n    class RedisSettings(BaseSettings):\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_model_construction.py:219: in __new__\n    set_model_fields(cls, bases, config_wrapper, types_namespace)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_model_construction.py:512: in set_model_fields\n    fields, class_vars = collect_model_fields(cls, bases, config_wrapper, types_namespace, typevars_map=typevars_map)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_fields.py:105: in collect_model_fields\n    type_hints = get_cls_type_hints_lenient(cls, types_namespace)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_typing_extra.py:245: in get_cls_type_hints_lenient\n    hints[name] = eval_type_lenient(value, globalns, localns)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_typing_extra.py:257: in eval_type_lenient\n    return eval_type_backport(value, globalns, localns)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_typing_extra.py:279: in eval_type_backport\n    return _eval_type_backport(value, globalns, localns, type_params)\n../../../../Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_typing_extra.py:311: in _eval_type_backport\n    raise TypeError(\nE   TypeError: Unable to evaluate type annotation 'str | None'. If you are making use of the new typing syntax (unions using `|` since Python 3.10 or builtins subscripting since Python 3.9), you should either replace the use of new syntax with the existing `typing` constructs or install the `eval_type_backport` package.\n",
      "duration": 1.1567060947418213,
      "test_type": "blockchain"
    },
    "integration": {
      "status": "passed",
      "results": {
        "diagnostic_services_health": {
          "calculation": {
            "status": "healthy",
            "response_time": 50,
            "last_check": "2025-05-31T07:48:12.725797"
          },
          "look": {
            "status": "healthy",
            "response_time": 50,
            "last_check": "2025-05-31T07:48:12.725824"
          },
          "listen": {
            "status": "healthy",
            "response_time": 50,
            "last_check": "2025-05-31T07:48:12.725825"
          },
          "inquiry": {
            "status": "healthy",
            "response_time": 50,
            "last_check": "2025-05-31T07:48:12.725826"
          },
          "palpation": {
            "status": "healthy",
            "response_time": 50,
            "last_check": "2025-05-31T07:48:12.725827"
          }
        },
        "agent_services_health": {
          "xiaoai": {
            "status": "healthy",
            "response_time": 80,
            "last_check": "2025-05-31T07:48:12.725833"
          },
          "xiaoke": {
            "status": "healthy",
            "response_time": 80,
            "last_check": "2025-05-31T07:48:12.725834"
          },
          "laoke": {
            "status": "healthy",
            "response_time": 80,
            "last_check": "2025-05-31T07:48:12.725835"
          },
          "soer": {
            "status": "healthy",
            "response_time": 80,
            "last_check": "2025-05-31T07:48:12.725836"
          }
        },
        "coordination_workflow": {
          "session_creation": {
            "status": "completed",
            "duration": 100,
            "timestamp": "2025-05-31T07:48:12.827095"
          },
          "diagnostic_data_collection": {
            "status": "completed",
            "duration": 100,
            "timestamp": "2025-05-31T07:48:12.927396"
          },
          "agent_analysis_trigger": {
            "status": "completed",
            "duration": 100,
            "timestamp": "2025-05-31T07:48:13.028502"
          },
          "consensus_generation": {
            "status": "completed",
            "duration": 100,
            "timestamp": "2025-05-31T07:48:13.129615"
          },
          "result_validation": {
            "status": "completed",
            "duration": 100,
            "timestamp": "2025-05-31T07:48:13.230730"
          }
        },
        "ai_inference_integration": {
          "model_loading": {
            "status": "passed",
            "latency": 25,
            "accuracy": 0.95,
            "timestamp": "2025-05-31T07:48:13.281843"
          },
          "single_inference": {
            "status": "passed",
            "latency": 25,
            "accuracy": 0.95,
            "timestamp": "2025-05-31T07:48:13.332503"
          },
          "batch_inference": {
            "status": "passed",
            "latency": 25,
            "accuracy": 0.95,
            "timestamp": "2025-05-31T07:48:13.383646"
          },
          "performance_benchmark": {
            "status": "passed",
            "latency": 25,
            "accuracy": 0.95,
            "timestamp": "2025-05-31T07:48:13.434843"
          }
        },
        "blockchain_integration": {
          "data_encryption": {
            "status": "passed",
            "transaction_time": 500,
            "gas_used": 150000,
            "timestamp": "2025-05-31T07:48:13.635858"
          },
          "ipfs_storage": {
            "status": "passed",
            "transaction_time": 500,
            "gas_used": 150000,
            "timestamp": "2025-05-31T07:48:13.836980"
          },
          "blockchain_transaction": {
            "status": "passed",
            "transaction_time": 500,
            "gas_used": 150000,
            "timestamp": "2025-05-31T07:48:14.038095"
          },
          "smart_contract_execution": {
            "status": "passed",
            "transaction_time": 500,
            "gas_used": 150000,
            "timestamp": "2025-05-31T07:48:14.238693"
          },
          "zero_knowledge_proof": {
            "status": "passed",
            "transaction_time": 500,
            "gas_used": 150000,
            "timestamp": "2025-05-31T07:48:14.439881"
          }
        }
      },
      "duration": 0,
      "test_type": "integration"
    }
  },
  "recommendations": [
    "修复 coordination 测试中的失败项",
    "修复 ai_inference 测试中的失败项",
    "修复 blockchain 测试中的失败项"
  ]
}