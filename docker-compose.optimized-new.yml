version: '3.8'

# 索克生活 - 优化后的Docker Compose配置
# 支持高性能部署和跨进程内存隔离

services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: suoke-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: suoke-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=suoke_life
      - POSTGRES_USER=suoke_user
      - POSTGRES_PASSWORD=suoke_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # 优化后的API网关
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile.optimized
    container_name: suoke-api-gateway
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - JWT_SECRET=your-jwt-secret-key
      - WORKERS=4
      - MAX_CONNECTIONS=1000
      - KEEP_ALIVE=65
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 小艾智能体服务（优化版）
  xiaoai-service:
    build:
      context: .
      dockerfile: services/agent-services/xiaoai-service/Dockerfile.optimized
    container_name: suoke-xiaoai
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - ENABLE_JIT=true
      - CACHE_TTL=300
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    volumes:
      - ./data/xiaoai:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 小克智能体服务（优化版）
  xiaoke-service:
    build:
      context: .
      dockerfile: services/agent-services/xiaoke-service/Dockerfile.optimized
    container_name: suoke-xiaoke
    restart: unless-stopped
    ports:
      - "8002:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - ENABLE_JIT=true
      - CACHE_TTL=300
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    volumes:
      - ./data/xiaoke:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 老克智能体服务（优化版）
  laoke-service:
    build:
      context: .
      dockerfile: services/agent-services/laoke-service/Dockerfile.optimized
    container_name: suoke-laoke
    restart: unless-stopped
    ports:
      - "8003:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - ENABLE_JIT=true
      - CACHE_TTL=300
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    volumes:
      - ./data/laoke:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 索儿智能体服务（优化版）
  soer-service:
    build:
      context: .
      dockerfile: services/agent-services/soer-service/Dockerfile.optimized
    container_name: suoke-soer
    restart: unless-stopped
    ports:
      - "8004:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=8
      - ENABLE_JIT=true
      - CACHE_TTL=300
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    volumes:
      - ./data/soer:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 认证服务
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile.optimized
    container_name: suoke-auth
    restart: unless-stopped
    ports:
      - "8005:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - JWT_SECRET=your-jwt-secret-key
      - MAX_WORKERS=4
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile.optimized
    container_name: suoke-user
    restart: unless-stopped
    ports:
      - "8006:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=4
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 健康数据服务
  health-data-service:
    build:
      context: .
      dockerfile: services/health-data-service/Dockerfile.optimized
    container_name: suoke-health-data
    restart: unless-stopped
    ports:
      - "8007:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=6
      - ENABLE_JIT=true
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # 医疗资源服务
  medical-resource-service:
    build:
      context: .
      dockerfile: services/medical-resource-service/Dockerfile.optimized
    container_name: suoke-medical-resource
    restart: unless-stopped
    ports:
      - "8008:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://suoke_user:suoke_password@postgres:5432/suoke_life
      - MAX_WORKERS=4
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: suoke-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: suoke-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: suoke-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: suoke-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ElasticSearch日志存储
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: suoke-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Kibana日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: suoke-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - suoke-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

networks:
  suoke-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local 