# 索克生活闻诊服务 - 优化版Docker Compose配置
# 支持开发、测试和生产环境

version: '3.8'

# 网络配置
networks:
  suoke-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 卷配置
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  listen-service-logs:
    driver: local
  listen-service-data:
    driver: local
  listen-service-models:
    driver: local

# 服务配置
services:
  # ================================
  # 闻诊服务 - 开发环境
  # ================================
  listen-service-dev:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: development
    container_name: suoke-listen-service-dev
    ports:
      - "8000:8000"
      - "50051:50051"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/listen_service_dev
    volumes:
      - .:/app
      - listen-service-logs:/app/logs
      - listen-service-data:/app/data
      - listen-service-models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - dev

  # ================================
  # 闻诊服务 - 生产环境
  # ================================
  listen-service-prod:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
    container_name: suoke-listen-service-prod
    ports:
      - "8000:8000"
      - "50051:50051"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/listen_service_prod
      - PERFORMANCE_MONITORING=true
      - ENABLE_METRICS=true
    volumes:
      - listen-service-logs:/app/logs
      - listen-service-data:/app/data
      - listen-service-models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    profiles:
      - prod

  # ================================
  # 闻诊服务 - 测试环境
  # ================================
  listen-service-test:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: testing
    container_name: suoke-listen-service-test
    environment:
      - ENVIRONMENT=testing
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - CACHE_BACKEND=memory
      - TEST_MODE=true
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/listen_service_test
    depends_on:
      - postgres
    networks:
      - suoke-network
    profiles:
      - test

  # ================================
  # Redis缓存服务
  # ================================
  redis:
    image: redis:7-alpine
    container_name: suoke-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # ================================
  # PostgreSQL数据库
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: suoke-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=listen_service_dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - suoke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Nginx反向代理
  # ================================
  nginx:
    image: nginx:alpine
    container_name: suoke-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - listen-service-prod
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - prod

  # ================================
  # Prometheus监控
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: suoke-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # Grafana可视化
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: suoke-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # Jaeger链路追踪
  # ================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: suoke-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # ELK日志收集
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: suoke-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ./elk/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: suoke-logstash
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: suoke-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - logging

  # ================================
  # 消息队列 (RabbitMQ)
  # ================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: suoke-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    networks:
      - suoke-network
    restart: unless-stopped
    profiles:
      - messaging

  # ================================
  # MinIO对象存储
  # ================================
  minio:
    image: minio/minio:latest
    container_name: suoke-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password123
    volumes:
      - ./minio/data:/data
    networks:
      - suoke-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    profiles:
      - storage 