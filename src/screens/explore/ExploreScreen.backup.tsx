import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  FlatList,
  Alert,
  TextInput,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import Icon from '../../components/common/Icon';
import { colors, spacing, fonts } from '../../constants/theme';
import AgentChatInterface, { AgentType } from '../../components/common/AgentChatInterface';

// ÂÜÖÂÆπÁ±ªÂûã
type ContentType = 'article' | 'video' | 'course' | 'recipe' | 'wisdom' | 'theory';

// ÂàÜÁ±ªÁ±ªÂûã
type CategoryType = 'tcm' | 'nutrition' | 'exercise' | 'mental' | 'lifestyle' | 'herbs' | 'acupoints';

// ÂÜÖÂÆπÈ°πÊé•Âè£
interface ContentItem {
  id: string;
  title: string;
  subtitle: string;
  type: ContentType;
  category: CategoryType;
  author: string;
  readTime: string;
  likes: number;
  image: string;
  tags: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  featured?: boolean;
}

// ÂàÜÁ±ªÈÖçÁΩÆ
const CATEGORIES = {
  tcm: {
    name: '‰∏≠ÂåªÁêÜËÆ∫',
    icon: 'leaf',
    color: '#34C759',
    description: '‰º†Áªü‰∏≠ÂåªÁêÜËÆ∫‰∏éÁé∞‰ª£Â∫îÁî®',
  },
  nutrition: {
    name: 'È£üÁñóÂÖªÁîü',
    icon: 'food-apple',
    color: '#FF9500',
    description: 'ËçØÈ£üÂêåÊ∫êÔºåÈ£üÁñóÂÖªÁîü',
  },
  exercise: {
    name: 'ËøêÂä®ÂÖªÁîü',
    icon: 'run',
    color: '#007AFF',
    description: 'Â§™ÊûÅ„ÄÅÂÖ´ÊÆµÈî¶Á≠â‰º†ÁªüËøêÂä®',
  },
  mental: {
    name: 'ÂøÉÁ•ûË∞ÉÂÖª',
    icon: 'brain',
    color: '#FF2D92',
    description: 'ÊÉÖÂøóË∞ÉËäÇ‰∏éÂøÉÁ•ûÂÆâÂÆÅ',
  },
  lifestyle: {
    name: 'Ëµ∑Â±ÖÂÖªÁîü',
    icon: 'home-heart',
    color: '#5856D6',
    description: 'È°∫Â∫îËá™ÁÑ∂ÁöÑÁîüÊ¥ªÊñπÂºè',
  },
  herbs: {
    name: 'Êú¨ËçâËçØÊùê',
    icon: 'flower',
    color: '#8E44AD',
    description: '‰∏≠ËçØÊùêËØÜÂà´‰∏éÂ∫îÁî®',
  },
  acupoints: {
    name: 'ÁªèÁªúÁ©¥‰Ωç',
    icon: 'human-handsup',
    color: '#E74C3C',
    description: 'ÁªèÁªúÁ©¥‰Ωç‰∏éÊåâÊë©‰øùÂÅ•',
  },
};

// ËÄÅÂÖãÁöÑÊô∫ÊÖßÂÜÖÂÆπ
const LAOKE_WISDOM: ContentItem[] = [
  {
    id: 'wisdom_1',
    title: 'Êò•ÂÖªËÇùÔºåÂ§èÂÖªÂøÉÔºåÁßãÂÖªËÇ∫ÔºåÂÜ¨ÂÖªËÇæ',
    subtitle: 'ÂõõÂ≠£ÂÖªÁîüÁöÑÊ†πÊú¨Ê≥ïÂàô',
    type: 'wisdom',
    category: 'tcm',
    author: 'ËÄÅÂÖã',
    readTime: '8ÂàÜÈíü',
    likes: 456,
    image: 'üå∏',
    tags: ['ÂõõÂ≠£ÂÖªÁîü', 'ËÑèËÖëË∞ÉÂÖª', '‰∏≠ÂåªÁêÜËÆ∫'],
    difficulty: 'beginner',
    featured: true,
  },
  {
    id: 'wisdom_2',
    title: 'ËçØÈ£üÂêåÊ∫êËØùÂ±±ËçØ',
    subtitle: 'Â±±ËçØÁöÑËçØÁî®‰ª∑ÂÄº‰∏éÈ£üÁñóÊñπÊ≥ï',
    type: 'article',
    category: 'herbs',
    author: 'ËÄÅÂÖã',
    readTime: '6ÂàÜÈíü',
    likes: 234,
    image: 'üç†',
    tags: ['Â±±ËçØ', 'ËçØÈ£üÂêåÊ∫ê', 'ËÑæËÉÉË∞ÉÂÖª'],
    difficulty: 'intermediate',
  },
  {
    id: 'wisdom_3',
    title: 'Â§™ÊûÅÊã≥ÂÖ•Èó®ÂøÉÊ≥ï',
    subtitle: '‰ª•ÊÑèÂØºÊ∞îÔºå‰ª•Ê∞îËøêË∫´',
    type: 'video',
    category: 'exercise',
    author: 'ËÄÅÂÖã',
    readTime: '25ÂàÜÈíü',
    likes: 789,
    image: 'ü•ã',
    tags: ['Â§™ÊûÅÊã≥', 'Ê∞îÂäü', 'ÂÖªÁîüËøêÂä®'],
    difficulty: 'beginner',
    featured: true,
  },
  {
    id: 'wisdom_4',
    title: 'Ë∂≥‰∏âÈáåÁ©¥ÁöÑÂ¶ôÁî®',
    subtitle: 'Â∏∏ÊåâË∂≥‰∏âÈáåÔºåËÉúÂêÉËÄÅÊØçÈ∏°',
    type: 'course',
    category: 'acupoints',
    author: 'ËÄÅÂÖã',
    readTime: '12ÂàÜÈíü',
    likes: 567,
    image: 'ü¶µ',
    tags: ['Ë∂≥‰∏âÈáå', 'Á©¥‰ΩçÊåâÊë©', '‰øùÂÅ•ÂÖªÁîü'],
    difficulty: 'beginner',
  },
  {
    id: 'wisdom_5',
    title: '‰∫îË°åÂ≠¶ËØ¥‰∏é‰ΩìË¥®Ë∞ÉÂÖª',
    subtitle: 'Ê†πÊçÆ‰∫îË°å‰ΩìË¥®Âà∂ÂÆöÂÖªÁîüÊñπÊ°à',
    type: 'theory',
    category: 'tcm',
    author: 'ËÄÅÂÖã',
    readTime: '15ÂàÜÈíü',
    likes: 345,
    image: '‚òØÔ∏è',
    tags: ['‰∫îË°åÂ≠¶ËØ¥', '‰ΩìË¥®Ëæ®ËØÜ', '‰∏™ÊÄßÂåñÂÖªÁîü'],
    difficulty: 'advanced',
  },
  {
    id: 'wisdom_6',
    title: 'Êû∏ÊùûËèäËä±Ëå∂ÁöÑÂÖªÁîüÁßòÂØÜ',
    subtitle: 'ÊòéÁõÆÂÖªËÇùÁöÑÁªèÂÖ∏Êê≠ÈÖç',
    type: 'recipe',
    category: 'nutrition',
    author: 'ËÄÅÂÖã',
    readTime: '4ÂàÜÈíü',
    likes: 123,
    image: 'üçµ',
    tags: ['Êû∏Êùû', 'ËèäËä±', 'ÊòéÁõÆÂÖªËÇù'],
    difficulty: 'beginner',
  },
];

// ÁÉ≠Èó®ËØùÈ¢ò
const HOT_TOPICS = [
  { id: '1', title: 'Êò•Â≠£ÂÖªËÇù', count: 1234, icon: 'üå±' },
  { id: '2', title: '‰∏≠Âåª‰ΩìË¥®', count: 987, icon: '‚öñÔ∏è' },
  { id: '3', title: 'È£üÁñóÂÖªÁîü', count: 756, icon: 'ü•ó' },
  { id: '4', title: 'Á©¥‰ΩçÊåâÊë©', count: 654, icon: 'üëã' },
  { id: '5', title: 'Â§™ÊûÅÂÖªÁîü', count: 543, icon: 'ü•ã' },
  { id: '6', title: 'Êú¨ËçâËØÜÂà´', count: 432, icon: 'üåø' },
];

const ExploreScreen: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<CategoryType | 'all'>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [agentChatVisible, setAgentChatVisible] = useState(false);
  const [accessibilityEnabled, setAccessibilityEnabled] = useState(false);

  // ËøáÊª§ÂÜÖÂÆπ
  const filteredContent = LAOKE_WISDOM.filter((item) => {
    if (selectedCategory !== 'all' && item.category !== selectedCategory) {
      return false;
    }
    if (searchQuery && !item.title.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    return true;
  });

  // Á≤æÈÄâÂÜÖÂÆπ
  const featuredContent = LAOKE_WISDOM.filter(item => item.featured);

  // ‰∏éËÄÅÂÖãÂØπËØù
  const chatWithLaoke = () => {
    Alert.alert(
      '‰∏éËÄÅÂÖãÂØπËØù',
      'ËÄÅÂÖãÊòØÊÇ®ÁöÑ‰∏≠ÂåªÂÖªÁîüÊïôËÇ≤ÂØºÂ∏àÔºåÊã•ÊúâÊ∑±ÂéöÁöÑ‰∏≠ÂåªÁêÜËÆ∫ÂäüÂ∫ïÔºåÂèØ‰ª•‰∏∫ÊÇ®Êèê‰æõÔºö\n\n‚Ä¢ ‰∏≠ÂåªÁêÜËÆ∫Ëß£ËØª\n‚Ä¢ ‰∏™ÊÄßÂåñÂÖªÁîüÊåáÂØº\n‚Ä¢ È£üÁñóÊñπÊ°àÊé®Ëçê\n‚Ä¢ Á©¥‰ΩçÊåâÊë©ÊïôÂ≠¶\n‚Ä¢ ‰º†ÁªüËøêÂä®ÊåáÂØº\n\nÊòØÂê¶ÂºÄÂßãÂØπËØùÔºü',
      [
        { text: 'ÂèñÊ∂à', style: 'cancel' },
        { text: 'ÂºÄÂßãÂØπËØù', onPress: () => startLaokeChat() }
      ]
    );
  };

  // ÂºÄÂßã‰∏éËÄÅÂÖãÂØπËØù
  const startLaokeChat = () => {
    setAgentChatVisible(true);
    console.log('Starting chat with Laoke agent');
  };

  // Êü•ÁúãÂÜÖÂÆπËØ¶ÊÉÖ
  const viewContent = (item: ContentItem) => {
    Alert.alert(
      item.title,
      `${item.subtitle}\n\n‰ΩúËÄÖÔºö${item.author}\nÈòÖËØªÊó∂Èó¥Ôºö${item.readTime}\nÈöæÂ∫¶Ôºö${getDifficultyText(item.difficulty)}\n\nÊ†áÁ≠æÔºö${item.tags.join(' ‚Ä¢ ')}\n\n${item.likes} ‰∫∫ËßâÂæóÊúâÁî®`,
      [
        { text: 'Êî∂Ëóè', onPress: () => console.log(`Bookmark ${item.id}`) },
        { text: 'ÂºÄÂßãÂ≠¶‰π†', onPress: () => startLearning(item) }
      ]
    );
  };

  // ÂºÄÂßãÂ≠¶‰π†
  const startLearning = (item: ContentItem) => {
    Alert.alert('ÂºÄÂßãÂ≠¶‰π†', `Ê≠£Âú®‰∏∫ÊÇ®ÂáÜÂ§á„Ää${item.title}„ÄãÁöÑÂ≠¶‰π†ÂÜÖÂÆπ...`);
    console.log(`Starting learning: ${item.id}`);
  };

  // Ëé∑ÂèñÈöæÂ∫¶ÊñáÊú¨
  const getDifficultyText = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'ÂÖ•Èó®';
      case 'intermediate': return 'ËøõÈò∂';
      case 'advanced': return 'È´òÁ∫ß';
      default: return 'Êú™Áü•';
    }
  };

  // Ëé∑ÂèñÂÜÖÂÆπÁ±ªÂûãÊñáÊú¨
  const getContentTypeText = (type: ContentType) => {
    switch (type) {
      case 'article': return 'ÊñáÁ´†';
      case 'video': return 'ËßÜÈ¢ë';
      case 'course': return 'ËØæÁ®ã';
      case 'recipe': return 'È£üË∞±';
      case 'wisdom': return 'Êô∫ÊÖß';
      case 'theory': return 'ÁêÜËÆ∫';
      default: return 'ÂÜÖÂÆπ';
    }
  };

  // Ê∏≤ÊüìÂàÜÁ±ªÊ†áÁ≠æ
  const renderCategoryTab = (category: CategoryType | 'all') => {
    const isSelected = selectedCategory === category;
    const config = category === 'all'
      ? { name: 'ÂÖ®ÈÉ®', icon: 'view-grid', color: colors.primary }
      : CATEGORIES[category];

    return (
      <TouchableOpacity
        key={category}
        style={[
          styles.categoryTab,
          isSelected && styles.selectedCategoryTab,
          isSelected && { backgroundColor: config.color + '20', borderColor: config.color },
        ]}
        onPress={() => setSelectedCategory(category)}
      >
        <Icon
          name={config.icon}
          size={16}
          color={isSelected ? config.color : colors.textSecondary}
        />
        <Text style={[styles.categoryTabText, isSelected && { color: config.color }]}>
          {config.name}
        </Text>
      </TouchableOpacity>
    );
  };

  // Ê∏≤ÊüìÂÜÖÂÆπÂç°Áâá
  const renderContentCard = ({ item }: { item: ContentItem }) => {
    const categoryConfig = CATEGORIES[item.category];

    return (
      <TouchableOpacity style={styles.contentCard} onPress={() => viewContent(item)}>
        <View style={styles.contentHeader}>
          <View style={styles.contentImageContainer}>
            <Text style={styles.contentEmoji}>{item.image}</Text>
            {item.featured && (
              <View style={styles.featuredBadge}>
                <Icon name="star" size={12} color="white" />
              </View>
            )}
          </View>
          <View style={styles.contentInfo}>
            <Text style={styles.contentTitle} numberOfLines={2}>{item.title}</Text>
            <Text style={styles.contentSubtitle} numberOfLines={1}>{item.subtitle}</Text>
            <View style={styles.contentMeta}>
              <Text style={styles.authorText}>üë¥ {item.author}</Text>
              <Text style={styles.readTimeText}>‚è±Ô∏è {item.readTime}</Text>
            </View>
          </View>
        </View>

        <View style={styles.contentFooter}>
          <View style={styles.tagsContainer}>
            {item.tags.slice(0, 2).map((tag, index) => (
              <View key={index} style={[styles.tag, { backgroundColor: categoryConfig.color + '20' }]}>
                <Text style={[styles.tagText, { color: categoryConfig.color }]}>{tag}</Text>
              </View>
            ))}
          </View>
          <View style={styles.contentStats}>
            <View style={[styles.typeBadge, { backgroundColor: categoryConfig.color }]}>
              <Text style={styles.typeText}>{getContentTypeText(item.type)}</Text>
            </View>
            <View style={styles.likesContainer}>
              <Icon name="heart" size={14} color={colors.textSecondary} />
              <Text style={styles.likesText}>{item.likes}</Text>
            </View>
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  // Ê∏≤ÊüìÁÉ≠Èó®ËØùÈ¢ò
  const renderHotTopic = (topic: typeof HOT_TOPICS[0], index: number) => (
    <TouchableOpacity key={topic.id} style={styles.hotTopicItem}>
      <Text style={styles.topicRank}>{index + 1}</Text>
      <Text style={styles.topicIcon}>{topic.icon}</Text>
      <View style={styles.topicInfo}>
        <Text style={styles.topicTitle}>{topic.title}</Text>
        <Text style={styles.topicCount}>{topic.count} ËÆ®ËÆ∫</Text>
      </View>
      <Icon name="trending-up" size={16} color={colors.primary} />
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* Â§¥ÈÉ® */}
      <View style={styles.header}>
        <View>
          <Text style={styles.title}>ÂÅ•Â∫∑Êé¢Á¥¢</Text>
          <Text style={styles.subtitle}>Ë∑üÈöèËÄÅÂÖãÂ≠¶‰π†‰∏≠ÂåªÂÖªÁîüÊô∫ÊÖß</Text>
        </View>
        <TouchableOpacity style={styles.laokeChatButton} onPress={chatWithLaoke}>
          <Text style={styles.laokeChatEmoji}>üë¥</Text>
          <Text style={styles.laokeChatText}>ËÄÅÂÖã</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* ËÄÅÂÖãÂØºÂ∏àÂç°Áâá */}
        <TouchableOpacity style={styles.laokeCard} onPress={chatWithLaoke}>
          <View style={styles.laokeInfo}>
            <Text style={styles.laokeEmoji}>üë¥</Text>
            <View style={styles.laokeTextContainer}>
              <Text style={styles.laokeName}>ËÄÅÂÖã - ‰∏≠ÂåªÂÖªÁîüÂØºÂ∏à</Text>
              <Text style={styles.laokeDesc}>‰º†ÊâøÂçÉÂπ¥‰∏≠ÂåªÊô∫ÊÖßÔºåÊåáÂØºÁé∞‰ª£ÂÖªÁîü‰πãÈÅì</Text>
              <Text style={styles.laokeQuote}>"‰∏äÂåªÊ≤ªÊú™ÁóÖÔºå‰∏≠ÂåªÊ≤ªÊ¨≤ÁóÖÔºå‰∏ãÂåªÊ≤ªÂ∑≤ÁóÖ"</Text>
            </View>
          </View>
          <View style={styles.onlineStatus}>
            <View style={styles.onlineDot} />
            <Text style={styles.onlineText}>Âú®Á∫ø</Text>
          </View>
        </TouchableOpacity>

        {/* ÊêúÁ¥¢Ê°Ü */}
        <View style={styles.searchContainer}>
          <Icon name="magnify" size={20} color={colors.textSecondary} />
          <TextInput
            style={styles.searchInput}
            placeholder="ÊêúÁ¥¢ÂÖªÁîüÁü•ËØÜ„ÄÅ‰∏≠ÂåªÁêÜËÆ∫..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor={colors.textSecondary}
          />
        </View>

        {/* Á≤æÈÄâÂÜÖÂÆπ */}
        {featuredContent.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üåü Á≤æÈÄâÊé®Ëçê</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              {featuredContent.map(item => (
                <TouchableOpacity key={item.id} style={styles.featuredCard} onPress={() => viewContent(item)}>
                  <Text style={styles.featuredEmoji}>{item.image}</Text>
                  <Text style={styles.featuredTitle} numberOfLines={2}>{item.title}</Text>
                  <Text style={styles.featuredAuthor}>üë¥ {item.author}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        )}

        {/* ÁÉ≠Èó®ËØùÈ¢ò */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üî• ÁÉ≠Èó®ËØùÈ¢ò</Text>
          <View style={styles.hotTopicsContainer}>
            {HOT_TOPICS.slice(0, 6).map(renderHotTopic)}
          </View>
        </View>

        {/* ÂàÜÁ±ªÊ†áÁ≠æ */}
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          style={styles.categoriesContainer}
          contentContainerStyle={styles.categoriesContent}
        >
          {renderCategoryTab('all')}
          {(Object.keys(CATEGORIES) as CategoryType[]).map(renderCategoryTab)}
        </ScrollView>

        {/* ÂÜÖÂÆπÂàóË°® */}
        <View style={styles.contentSection}>
          <Text style={styles.sectionTitle}>
            üìö {selectedCategory === 'all' ? 'ÂÖ®ÈÉ®ÂÜÖÂÆπ' : CATEGORIES[selectedCategory as CategoryType]?.name}
          </Text>
          <FlatList
            data={filteredContent}
            keyExtractor={item => item.id}
            renderItem={renderContentCard}
            scrollEnabled={false}
            ItemSeparatorComponent={() => <View style={styles.separator} />}
          />
        </View>
      </ScrollView>

      {/* ËÄÅÂÖãÂØπËØùÁïåÈù¢ */}
      <AgentChatInterface
        visible={agentChatVisible}
        onClose={() => setAgentChatVisible(false)}
        agentType="laoke"
        userId="current_user_id"
        accessibilityEnabled={accessibilityEnabled}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.text,
  },
  subtitle: {
    fontSize: 14,
    color: colors.textSecondary,
    marginTop: 2,
  },
  laokeChatButton: {
    alignItems: 'center',
    padding: 8,
  },
  laokeChatEmoji: {
    fontSize: 24,
  },
  laokeChatText: {
    fontSize: 12,
    color: colors.primary,
    fontWeight: '600',
    marginTop: 2,
  },
  scrollView: {
    flex: 1,
  },
  laokeCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: 15,
    padding: 15,
    backgroundColor: '#34C759' + '10',
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#34C759',
  },
  laokeInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  laokeEmoji: {
    fontSize: 32,
    marginRight: 12,
  },
  laokeTextContainer: {
    flex: 1,
  },
  laokeName: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 4,
  },
  laokeDesc: {
    fontSize: 12,
    color: colors.textSecondary,
    marginBottom: 4,
  },
  laokeQuote: {
    fontSize: 11,
    color: '#34C759',
    fontStyle: 'italic',
  },
  onlineStatus: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  onlineDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#34C759',
    marginRight: 4,
  },
  onlineText: {
    fontSize: 12,
    color: '#34C759',
    fontWeight: '600',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    margin: 15,
    paddingHorizontal: 15,
    paddingVertical: 10,
    backgroundColor: colors.surface,
    borderRadius: 25,
  },
  searchInput: {
    flex: 1,
    marginLeft: 10,
    fontSize: 16,
    color: colors.text,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: colors.text,
    marginHorizontal: 15,
    marginBottom: 10,
  },
  featuredCard: {
    width: 140,
    backgroundColor: colors.surface,
    borderRadius: 12,
    padding: 12,
    marginLeft: 15,
    alignItems: 'center',
  },
  featuredEmoji: {
    fontSize: 32,
    marginBottom: 8,
  },
  featuredTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text,
    textAlign: 'center',
    marginBottom: 6,
  },
  featuredAuthor: {
    fontSize: 12,
    color: colors.textSecondary,
  },
  hotTopicsContainer: {
    paddingHorizontal: 15,
  },
  hotTopicItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginBottom: 6,
    backgroundColor: colors.surface,
    borderRadius: 8,
  },
  topicRank: {
    fontSize: 14,
    fontWeight: 'bold',
    color: colors.primary,
    width: 20,
  },
  topicIcon: {
    fontSize: 16,
    marginHorizontal: 8,
  },
  topicInfo: {
    flex: 1,
  },
  topicTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text,
  },
  topicCount: {
    fontSize: 12,
    color: colors.textSecondary,
  },
  categoriesContainer: {
    maxHeight: 50,
  },
  categoriesContent: {
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  categoryTab: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    borderRadius: 15,
    backgroundColor: colors.surface,
    borderWidth: 1,
    borderColor: colors.border,
  },
  selectedCategoryTab: {
    borderWidth: 1,
  },
  categoryTabText: {
    marginLeft: 4,
    fontSize: 12,
    color: colors.textSecondary,
  },
  contentSection: {
    paddingHorizontal: 15,
    paddingBottom: 20,
  },
  contentCard: {
    backgroundColor: colors.surface,
    borderRadius: 12,
    padding: 15,
    marginBottom: 10,
  },
  contentHeader: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  contentImageContainer: {
    position: 'relative',
    marginRight: 12,
  },
  contentEmoji: {
    fontSize: 32,
  },
  featuredBadge: {
    position: 'absolute',
    top: -4,
    right: -4,
    backgroundColor: colors.primary,
    borderRadius: 8,
    width: 16,
    height: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  contentInfo: {
    flex: 1,
  },
  contentTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 4,
  },
  contentSubtitle: {
    fontSize: 14,
    color: colors.textSecondary,
    marginBottom: 6,
  },
  contentMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  authorText: {
    fontSize: 12,
    color: colors.textSecondary,
  },
  readTimeText: {
    fontSize: 12,
    color: colors.textSecondary,
  },
  contentFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  tagsContainer: {
    flexDirection: 'row',
    flex: 1,
  },
  tag: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 10,
    marginRight: 6,
  },
  tagText: {
    fontSize: 10,
    fontWeight: '600',
  },
  contentStats: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  typeBadge: {
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 8,
    marginRight: 8,
  },
  typeText: {
    fontSize: 10,
    color: 'white',
    fontWeight: '600',
  },
  likesContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  likesText: {
    fontSize: 12,
    color: colors.textSecondary,
    marginLeft: 4,
  },
  separator: {
    height: 1,
    backgroundColor: colors.border,
    marginVertical: 5,
  },
});

export default ExploreScreen;
