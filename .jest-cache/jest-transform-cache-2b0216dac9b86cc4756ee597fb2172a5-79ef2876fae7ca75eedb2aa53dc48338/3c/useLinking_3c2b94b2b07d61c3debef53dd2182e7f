f9f757224d902e5772530336b52e6115
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinking;
exports.series = void 0;
var _core = require("@react-navigation/core");
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var React = _interopRequireWildcard(require("react"));
var _createMemoryHistory = _interopRequireDefault(require("./createMemoryHistory"));
var _ServerContext = _interopRequireDefault(require("./ServerContext"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _findMatchingState = function findMatchingState(a, b) {
  if (a === undefined || b === undefined || a.key !== b.key) {
    return [undefined, undefined];
  }
  var aHistoryLength = a.history ? a.history.length : a.routes.length;
  var bHistoryLength = b.history ? b.history.length : b.routes.length;
  var aRoute = a.routes[a.index];
  var bRoute = b.routes[b.index];
  var aChildState = aRoute.state;
  var bChildState = bRoute.state;
  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {
    return [a, b];
  }
  return _findMatchingState(aChildState, bChildState);
};
var series = function series(cb) {
  var queue = Promise.resolve();
  var callback = function callback() {
    queue = queue.then(cb);
  };
  return callback;
};
exports.series = series;
var linkingHandlers = [];
function useLinking(ref, _ref) {
  var independent = _ref.independent,
    _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled,
    config = _ref.config,
    _ref$getStateFromPath = _ref.getStateFromPath,
    getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath,
    _ref$getPathFromState = _ref.getPathFromState,
    getPathFromState = _ref$getPathFromState === void 0 ? _core.getPathFromState : _ref$getPathFromState,
    _ref$getActionFromSta = _ref.getActionFromState,
    getActionFromState = _ref$getActionFromSta === void 0 ? _core.getActionFromState : _ref$getActionFromSta;
  React.useEffect(function () {
    if (process.env.NODE_ENV === 'production') {
      return undefined;
    }
    if (independent) {
      return undefined;
    }
    if (enabled !== false && linkingHandlers.length) {
      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', "- You don't have multiple NavigationContainers in the app each with 'linking' enabled", '- Only a single instance of the root component is rendered'].join('\n').trim());
    }
    var handler = Symbol();
    if (enabled !== false) {
      linkingHandlers.push(handler);
    }
    return function () {
      var index = linkingHandlers.indexOf(handler);
      if (index > -1) {
        linkingHandlers.splice(index, 1);
      }
    };
  }, [enabled, independent]);
  var _React$useState = React.useState(_createMemoryHistory.default),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
    history = _React$useState2[0];
  var enabledRef = React.useRef(enabled);
  var configRef = React.useRef(config);
  var getStateFromPathRef = React.useRef(getStateFromPath);
  var getPathFromStateRef = React.useRef(getPathFromState);
  var getActionFromStateRef = React.useRef(getActionFromState);
  React.useEffect(function () {
    enabledRef.current = enabled;
    configRef.current = config;
    getStateFromPathRef.current = getStateFromPath;
    getPathFromStateRef.current = getPathFromState;
    getActionFromStateRef.current = getActionFromState;
  });
  var server = React.useContext(_ServerContext.default);
  var getInitialState = React.useCallback(function () {
    var value;
    if (enabledRef.current) {
      var _ref2;
      var location = (_ref2 = server === null || server === void 0 ? void 0 : server.location) != null ? _ref2 : typeof window !== 'undefined' ? window.location : undefined;
      var path = location ? location.pathname + location.search : undefined;
      if (path) {
        value = getStateFromPathRef.current(path, configRef.current);
      }
    }
    var thenable = {
      then: function then(onfulfilled) {
        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);
      },
      catch: function _catch() {
        return thenable;
      }
    };
    return thenable;
  }, []);
  var previousIndexRef = React.useRef(undefined);
  var previousStateRef = React.useRef(undefined);
  var pendingPopStatePathRef = React.useRef(undefined);
  React.useEffect(function () {
    previousIndexRef.current = history.index;
    return history.listen(function () {
      var _previousIndexRef$cur;
      var navigation = ref.current;
      if (!navigation || !enabled) {
        return;
      }
      var _window = window,
        location = _window.location;
      var path = location.pathname + location.search;
      var index = history.index;
      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;
      previousIndexRef.current = index;
      pendingPopStatePathRef.current = path;
      var record = history.get(index);
      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {
        navigation.resetRoot(record.state);
        return;
      }
      var state = getStateFromPathRef.current(path, configRef.current);
      if (state) {
        var rootState = navigation.getRootState();
        if (state.routes.some(function (r) {
          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));
        })) {
          console.warn("The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.");
          return;
        }
        if (index > previousIndex) {
          var action = getActionFromStateRef.current(state, configRef.current);
          if (action !== undefined) {
            try {
              navigation.dispatch(action);
            } catch (e) {
              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);
            }
          } else {
            navigation.resetRoot(state);
          }
        } else {
          navigation.resetRoot(state);
        }
      } else {
        navigation.resetRoot(state);
      }
    });
  }, [enabled, history, ref]);
  React.useEffect(function () {
    var _ref$current;
    if (!enabled) {
      return;
    }
    var getPathForRoute = function getPathForRoute(route, state) {
      if (route !== null && route !== void 0 && route.path) {
        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);
        if (stateForPath) {
          var focusedRoute = (0, _core.findFocusedRoute)(stateForPath);
          if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {
            return route.path;
          }
        }
      }
      return getPathFromStateRef.current(state, configRef.current);
    };
    if (ref.current) {
      var state = ref.current.getRootState();
      if (state) {
        var route = (0, _core.findFocusedRoute)(state);
        var path = getPathForRoute(route, state);
        if (previousStateRef.current === undefined) {
          previousStateRef.current = state;
        }
        history.replace({
          path: path,
          state: state
        });
      }
    }
    var onStateChange = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        var navigation = ref.current;
        if (!navigation || !enabled) {
          return;
        }
        var previousState = previousStateRef.current;
        var state = navigation.getRootState();
        if (!state) {
          return;
        }
        var pendingPath = pendingPopStatePathRef.current;
        var route = (0, _core.findFocusedRoute)(state);
        var path = getPathForRoute(route, state);
        previousStateRef.current = state;
        pendingPopStatePathRef.current = undefined;
        var _findMatchingState2 = _findMatchingState(previousState, state),
          _findMatchingState3 = (0, _slicedToArray2.default)(_findMatchingState2, 2),
          previousFocusedState = _findMatchingState3[0],
          focusedState = _findMatchingState3[1];
        if (previousFocusedState && focusedState && path !== pendingPath) {
          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);
          if (historyDelta > 0) {
            history.push({
              path: path,
              state: state
            });
          } else if (historyDelta < 0) {
            var nextIndex = history.backIndex({
              path: path
            });
            var currentIndex = history.index;
            try {
              if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {
                yield history.go(nextIndex - currentIndex);
              } else {
                yield history.go(historyDelta);
              }
              history.replace({
                path: path,
                state: state
              });
            } catch (e) {}
          } else {
            history.replace({
              path: path,
              state: state
            });
          }
        } else {
          history.replace({
            path: path,
            state: state
          });
        }
      });
      return function onStateChange() {
        return _ref3.apply(this, arguments);
      };
    }();
    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));
  }, [enabled, history, ref]);
  return {
    getInitialState: getInitialState
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,