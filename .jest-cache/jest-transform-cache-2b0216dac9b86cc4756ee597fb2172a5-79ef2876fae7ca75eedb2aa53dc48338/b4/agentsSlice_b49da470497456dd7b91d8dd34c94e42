8abddc4f99f627d4c446de30ff7a9d79
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateMessage = exports.setActiveAgent = exports.sendMessageToAgent = exports.selectConversations = exports.selectConversation = exports.selectAgentsLoading = exports.selectAgentsError = exports.selectAgents = exports.selectActiveAgent = exports.removeMessage = exports.loadConversationHistory = exports.default = exports.clearError = exports.clearConversation = exports.addUserMessage = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _apiClient = require("../../services/apiClient");
var initialState = {
  conversations: {
    xiaoai: [],
    xiaoke: [],
    laoke: [],
    soer: []
  },
  activeAgent: undefined,
  loading: false,
  error: undefined
};
var sendMessageToAgent = exports.sendMessageToAgent = (0, _toolkit.createAsyncThunk)("agents/sendMessage", function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (_ref, _ref2) {
    var agentType = _ref.agentType,
      content = _ref.content,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "text" : _ref$type;
    var rejectWithValue = _ref2.rejectWithValue;
    try {
      var _response$data, _response$data2;
      var agentEndpoint = `/agents/${agentType}/chat`;
      var response = yield _apiClient.apiClient.post(agentEndpoint, {
        message: content,
        type: type
      });
      if (!response.success) {
        var _response$error;
        throw new Error(((_response$error = response.error) == null ? void 0 : _response$error.message) || "发送消息失败");
      }
      var agentMessage = {
        id: Date.now().toString(),
        agentType: agentType,
        content: ((_response$data = response.data) == null || (_response$data = _response$data.data) == null ? void 0 : _response$data.response) || "抱歉，我现在无法回复。",
        type: "text",
        timestamp: new Date().toISOString(),
        metadata: (_response$data2 = response.data) == null ? void 0 : _response$data2.data
      };
      return agentMessage;
    } catch (error) {
      return rejectWithValue(error.message || "发送消息失败");
    }
  });
  return function (_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}());
var loadConversationHistory = exports.loadConversationHistory = (0, _toolkit.createAsyncThunk)("agents/loadHistory", function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (agentType, _ref4) {
    var rejectWithValue = _ref4.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.get(`/agents/${agentType}/history`);
      if (!response.success) {
        var _response$error2;
        throw new Error(((_response$error2 = response.error) == null ? void 0 : _response$error2.message) || "加载对话历史失败");
      }
      return {
        agentType: agentType,
        messages: response.data || []
      };
    } catch (error) {
      return rejectWithValue(error.message || "加载对话历史失败");
    }
  });
  return function (_x3, _x4) {
    return _ref5.apply(this, arguments);
  };
}());
var clearConversation = exports.clearConversation = (0, _toolkit.createAsyncThunk)("agents/clearConversation", function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (agentType, _ref6) {
    var rejectWithValue = _ref6.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.delete(`/agents/${agentType}/history`);
      if (!response.success) {
        var _response$error3;
        throw new Error(((_response$error3 = response.error) == null ? void 0 : _response$error3.message) || "清除对话历史失败");
      }
      return agentType;
    } catch (error) {
      return rejectWithValue(error.message || "清除对话历史失败");
    }
  });
  return function (_x5, _x6) {
    return _ref7.apply(this, arguments);
  };
}());
var agentsSlice = (0, _toolkit.createSlice)({
  name: "agents",
  initialState: initialState,
  reducers: {
    setActiveAgent: function setActiveAgent(state, action) {
      state.activeAgent = action.payload;
    },
    addUserMessage: function addUserMessage(state, action) {
      var _action$payload = action.payload,
        agentType = _action$payload.agentType,
        content = _action$payload.content,
        _action$payload$type = _action$payload.type,
        type = _action$payload$type === void 0 ? "text" : _action$payload$type;
      var userMessage = {
        id: Date.now().toString(),
        agentType: agentType,
        content: content,
        type: type,
        timestamp: new Date().toISOString()
      };
      state.conversations[agentType].push(userMessage);
    },
    removeMessage: function removeMessage(state, action) {
      var _action$payload2 = action.payload,
        agentType = _action$payload2.agentType,
        messageId = _action$payload2.messageId;
      state.conversations[agentType] = state.conversations[agentType].filter(function (message) {
        return message.id !== messageId;
      });
    },
    clearError: function clearError(state) {
      state.error = undefined;
    },
    updateMessage: function updateMessage(state, action) {
      var _action$payload3 = action.payload,
        agentType = _action$payload3.agentType,
        messageId = _action$payload3.messageId,
        updates = _action$payload3.updates;
      var messageIndex = state.conversations[agentType].findIndex(function (msg) {
        return msg.id === messageId;
      });
      if (messageIndex >= 0) {
        state.conversations[agentType][messageIndex] = Object.assign({}, state.conversations[agentType][messageIndex], updates);
      }
    }
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(sendMessageToAgent.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(sendMessageToAgent.fulfilled, function (state, action) {
      state.loading = false;
      state.conversations[action.payload.agentType].push(action.payload);
      state.error = undefined;
    }).addCase(sendMessageToAgent.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(loadConversationHistory.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(loadConversationHistory.fulfilled, function (state, action) {
      state.loading = false;
      state.conversations[action.payload.agentType] = action.payload.messages;
      state.error = undefined;
    }).addCase(loadConversationHistory.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(clearConversation.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(clearConversation.fulfilled, function (state, action) {
      state.loading = false;
      state.conversations[action.payload] = [];
      state.error = undefined;
    }).addCase(clearConversation.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
  }
});
var _agentsSlice$actions = agentsSlice.actions,
  setActiveAgent = exports.setActiveAgent = _agentsSlice$actions.setActiveAgent,
  addUserMessage = exports.addUserMessage = _agentsSlice$actions.addUserMessage,
  removeMessage = exports.removeMessage = _agentsSlice$actions.removeMessage,
  clearError = exports.clearError = _agentsSlice$actions.clearError,
  updateMessage = exports.updateMessage = _agentsSlice$actions.updateMessage;
var selectAgents = exports.selectAgents = function selectAgents(state) {
  return state.agents;
};
var selectActiveAgent = exports.selectActiveAgent = function selectActiveAgent(state) {
  return state.agents.activeAgent;
};
var selectConversations = exports.selectConversations = function selectConversations(state) {
  return state.agents.conversations;
};
var selectConversation = exports.selectConversation = function selectConversation(agentType) {
  return function (state) {
    return state.agents.conversations[agentType];
  };
};
var selectAgentsLoading = exports.selectAgentsLoading = function selectAgentsLoading(state) {
  return state.agents.loading;
};
var selectAgentsError = exports.selectAgentsError = function selectAgentsError(state) {
  return state.agents.error;
};
var _default = exports.default = agentsSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,