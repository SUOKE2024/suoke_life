082b470496d9543f4c84e7c3ef5632ef
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    fetch: jest.fn(function () {
      return Promise.resolve(mockNetInfo);
    }),
    addEventListener: jest.fn(function () {
      return jest.fn();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
  getAllKeys: jest.fn(),
  multiGet: jest.fn(),
  multiSet: jest.fn(),
  multiRemove: jest.fn()
};
var mockNetInfo = {
  isConnected: true,
  isInternetReachable: true,
  type: 'wifi'
};
var dataService = {
  syncData: function () {
    var _syncData = (0, _asyncToGenerator2.default)(function* () {
      if (!mockNetInfo.isConnected) {
        throw new Error('网络连接不可用');
      }
      var localData = yield mockAsyncStorage.getItem('local_data');
      var serverData = {
        synced: true,
        timestamp: Date.now()
      };
      yield mockAsyncStorage.setItem('local_data', JSON.stringify(serverData));
      return serverData;
    });
    function syncData() {
      return _syncData.apply(this, arguments);
    }
    return syncData;
  }(),
  getCachedData: function () {
    var _getCachedData = (0, _asyncToGenerator2.default)(function* (key) {
      var cached = yield mockAsyncStorage.getItem(`cache_${key}`);
      if (cached) {
        var data = JSON.parse(cached);
        var now = Date.now();
        if (now - data.timestamp < 5 * 60 * 1000) {
          return data.value;
        } else {
          yield mockAsyncStorage.removeItem(`cache_${key}`);
          return null;
        }
      }
      return null;
    });
    function getCachedData(_x) {
      return _getCachedData.apply(this, arguments);
    }
    return getCachedData;
  }(),
  setCachedData: function () {
    var _setCachedData = (0, _asyncToGenerator2.default)(function* (key, value) {
      var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5 * 60 * 1000;
      var cacheData = {
        value: value,
        timestamp: Date.now(),
        ttl: ttl
      };
      yield mockAsyncStorage.setItem(`cache_${key}`, JSON.stringify(cacheData));
    });
    function setCachedData(_x2, _x3) {
      return _setCachedData.apply(this, arguments);
    }
    return setCachedData;
  }(),
  clearExpiredCache: function () {
    var _clearExpiredCache = (0, _asyncToGenerator2.default)(function* () {
      var allKeys = yield mockAsyncStorage.getAllKeys();
      var cacheKeys = allKeys.filter(function (key) {
        return key.startsWith('cache_');
      });
      var now = Date.now();
      var expiredKeys = [];
      for (var key of cacheKeys) {
        var cached = yield mockAsyncStorage.getItem(key);
        if (cached) {
          var data = JSON.parse(cached);
          if (now - data.timestamp >= data.ttl) {
            expiredKeys.push(key);
          }
        }
      }
      if (expiredKeys.length > 0) {
        yield mockAsyncStorage.multiRemove(expiredKeys);
      }
      return expiredKeys.length;
    });
    function clearExpiredCache() {
      return _clearExpiredCache.apply(this, arguments);
    }
    return clearExpiredCache;
  }(),
  addToOfflineQueue: function () {
    var _addToOfflineQueue = (0, _asyncToGenerator2.default)(function* (action) {
      var queue = yield dataService.getOfflineQueue();
      queue.push(Object.assign({}, action, {
        id: Date.now().toString(),
        timestamp: Date.now()
      }));
      yield mockAsyncStorage.setItem('offline_queue', JSON.stringify(queue));
    });
    function addToOfflineQueue(_x4) {
      return _addToOfflineQueue.apply(this, arguments);
    }
    return addToOfflineQueue;
  }(),
  getOfflineQueue: function () {
    var _getOfflineQueue = (0, _asyncToGenerator2.default)(function* () {
      var queue = yield mockAsyncStorage.getItem('offline_queue');
      return queue ? JSON.parse(queue) : [];
    });
    function getOfflineQueue() {
      return _getOfflineQueue.apply(this, arguments);
    }
    return getOfflineQueue;
  }(),
  processOfflineQueue: function () {
    var _processOfflineQueue = (0, _asyncToGenerator2.default)(function* () {
      if (!mockNetInfo.isConnected) {
        throw new Error('网络连接不可用');
      }
      var queue = yield dataService.getOfflineQueue();
      var processed = [];
      var failed = [];
      for (var action of queue) {
        try {
          yield new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          });
          processed.push(action);
        } catch (error) {
          failed.push({
            action: action,
            error: error
          });
        }
      }
      yield mockAsyncStorage.setItem('offline_queue', JSON.stringify(failed.map(function (f) {
        return f.action;
      })));
      return {
        processed: processed.length,
        failed: failed.length
      };
    });
    function processOfflineQueue() {
      return _processOfflineQueue.apply(this, arguments);
    }
    return processOfflineQueue;
  }(),
  backupData: function () {
    var _backupData = (0, _asyncToGenerator2.default)(function* () {
      var allKeys = yield mockAsyncStorage.getAllKeys();
      var dataKeys = allKeys.filter(function (key) {
        return !key.startsWith('cache_') && key !== 'offline_queue';
      });
      var backup = {};
      for (var key of dataKeys) {
        var value = yield mockAsyncStorage.getItem(key);
        if (value) {
          backup[key] = JSON.parse(value);
        }
      }
      var backupData = {
        data: backup,
        timestamp: Date.now(),
        version: '1.0'
      };
      yield mockAsyncStorage.setItem('backup_data', JSON.stringify(backupData));
      return backupData;
    });
    function backupData() {
      return _backupData.apply(this, arguments);
    }
    return backupData;
  }(),
  restoreData: function () {
    var _restoreData = (0, _asyncToGenerator2.default)(function* (backupData) {
      if (!backupData || !backupData.data) {
        throw new Error('无效的备份数据');
      }
      var data = backupData.data;
      var entries = Object.entries(data).map(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        return [key, JSON.stringify(value)];
      });
      yield mockAsyncStorage.multiSet(entries);
      return Object.keys(data).length;
    });
    function restoreData(_x5) {
      return _restoreData.apply(this, arguments);
    }
    return restoreData;
  }(),
  compressData: function () {
    var _compressData = (0, _asyncToGenerator2.default)(function* (data) {
      var jsonString = JSON.stringify(data);
      var compressed = {
        original: jsonString,
        compressed: jsonString.length > 1000 ? jsonString.substring(0, 1000) + '...' : jsonString,
        ratio: jsonString.length > 1000 ? 0.1 : 1
      };
      return compressed;
    });
    function compressData(_x6) {
      return _compressData.apply(this, arguments);
    }
    return compressData;
  }(),
  decompressData: function () {
    var _decompressData = (0, _asyncToGenerator2.default)(function* (compressedData) {
      if (!compressedData || !compressedData.original) {
        throw new Error('无效的压缩数据');
      }
      return JSON.parse(compressedData.original);
    });
    function decompressData(_x7) {
      return _decompressData.apply(this, arguments);
    }
    return decompressData;
  }(),
  validateData: function () {
    var _validateData = (0, _asyncToGenerator2.default)(function* (data, schema) {
      var errors = [];
      if (schema.required) {
        for (var field of schema.required) {
          if (!data[field]) {
            errors.push(`缺少必需字段: ${field}`);
          }
        }
      }
      if (schema.types) {
        for (var _ref3 of Object.entries(schema.types)) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var _field = _ref4[0];
          var expectedType = _ref4[1];
          if (data[_field] && typeof data[_field] !== expectedType) {
            errors.push(`字段 ${_field} 类型错误，期望 ${expectedType}，实际 ${typeof data[_field]}`);
          }
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    });
    function validateData(_x8, _x9) {
      return _validateData.apply(this, arguments);
    }
    return validateData;
  }(),
  getDataStats: function () {
    var _getDataStats = (0, _asyncToGenerator2.default)(function* () {
      var allKeys = yield mockAsyncStorage.getAllKeys();
      var stats = {
        totalKeys: allKeys.length,
        cacheKeys: allKeys.filter(function (key) {
          return key.startsWith('cache_');
        }).length,
        dataKeys: allKeys.filter(function (key) {
          return !key.startsWith('cache_') && key !== 'offline_queue';
        }).length,
        queueSize: (yield dataService.getOfflineQueue()).length
      };
      return stats;
    });
    function getDataStats() {
      return _getDataStats.apply(this, arguments);
    }
    return getDataStats;
  }()
};
describe('数据服务测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockAsyncStorage.getAllKeys.mockResolvedValue([]);
    mockAsyncStorage.multiGet.mockResolvedValue([]);
    mockAsyncStorage.multiSet.mockResolvedValue(undefined);
    mockAsyncStorage.multiRemove.mockResolvedValue(undefined);
    mockNetInfo.isConnected = true;
  });
  describe('数据同步', function () {
    it('应该在网络可用时同步数据', (0, _asyncToGenerator2.default)(function* () {
      var result = yield dataService.syncData();
      expect(result).toHaveProperty('synced', true);
      expect(result).toHaveProperty('timestamp');
      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('local_data', expect.stringContaining('synced'));
    }));
    it('应该在网络不可用时抛出错误', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      yield expect(dataService.syncData()).rejects.toThrow('网络连接不可用');
    }));
  });
  describe('缓存管理', function () {
    it('应该设置和获取缓存数据', (0, _asyncToGenerator2.default)(function* () {
      var testData = {
        test: 'value'
      };
      yield dataService.setCachedData('test_key', testData);
      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('cache_test_key', expect.stringContaining('test'));
      var cacheData = {
        value: testData,
        timestamp: Date.now(),
        ttl: 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cacheData));
      var result = yield dataService.getCachedData('test_key');
      expect(result).toEqual(testData);
    }));
    it('应该返回null当缓存过期时', (0, _asyncToGenerator2.default)(function* () {
      var expiredCache = {
        value: {
          test: 'value'
        },
        timestamp: Date.now() - 10 * 60 * 1000,
        ttl: 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(expiredCache));
      var result = yield dataService.getCachedData('test_key');
      expect(result).toBeNull();
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('cache_test_key');
    }));
    it('应该清除过期缓存', (0, _asyncToGenerator2.default)(function* () {
      var allKeys = ['cache_expired', 'cache_valid', 'data_key'];
      mockAsyncStorage.getAllKeys.mockResolvedValue(allKeys);
      var expiredCache = {
        value: 'expired',
        timestamp: Date.now() - 10 * 60 * 1000,
        ttl: 5 * 60 * 1000
      };
      var validCache = {
        value: 'valid',
        timestamp: Date.now(),
        ttl: 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(expiredCache)).mockResolvedValueOnce(JSON.stringify(validCache));
      var clearedCount = yield dataService.clearExpiredCache();
      expect(clearedCount).toBe(1);
      expect(mockAsyncStorage.multiRemove).toHaveBeenCalledWith(['cache_expired']);
    }));
  });
  describe('离线队列', function () {
    it('应该添加操作到离线队列', (0, _asyncToGenerator2.default)(function* () {
      var action = {
        type: 'UPDATE_PROFILE',
        data: {
          name: 'test'
        }
      };
      mockAsyncStorage.getItem.mockResolvedValue('[]');
      yield dataService.addToOfflineQueue(action);
      expect(mockAsyncStorage.setItem).toHaveBeenCalledWith('offline_queue', expect.stringContaining('UPDATE_PROFILE'));
    }));
    it('应该处理离线队列', (0, _asyncToGenerator2.default)(function* () {
      var queue = [{
        id: '1',
        type: 'ACTION1',
        timestamp: Date.now()
      }, {
        id: '2',
        type: 'ACTION2',
        timestamp: Date.now()
      }];
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(queue));
      var result = yield dataService.processOfflineQueue();
      expect(result.processed).toBe(2);
      expect(result.failed).toBe(0);
    }));
    it('应该在网络不可用时拒绝处理队列', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.isConnected = false;
      yield expect(dataService.processOfflineQueue()).rejects.toThrow('网络连接不可用');
    }));
  });
  describe('数据备份和恢复', function () {
    it('应该备份数据', (0, _asyncToGenerator2.default)(function* () {
      var allKeys = ['user_data', 'settings', 'cache_test'];
      mockAsyncStorage.getAllKeys.mockResolvedValue(allKeys);
      mockAsyncStorage.getItem.mockResolvedValueOnce('{"name":"test"}').mockResolvedValueOnce('{"theme":"dark"}');
      var backup = yield dataService.backupData();
      expect(backup).toHaveProperty('data');
      expect(backup).toHaveProperty('timestamp');
      expect(backup).toHaveProperty('version');
      expect(backup.data).toHaveProperty('user_data');
      expect(backup.data).toHaveProperty('settings');
      expect(backup.data).not.toHaveProperty('cache_test');
    }));
    it('应该恢复数据', (0, _asyncToGenerator2.default)(function* () {
      var backupData = {
        data: {
          user_data: {
            name: 'test'
          },
          settings: {
            theme: 'dark'
          }
        },
        timestamp: Date.now(),
        version: '1.0'
      };
      var restoredCount = yield dataService.restoreData(backupData);
      expect(restoredCount).toBe(2);
      expect(mockAsyncStorage.multiSet).toHaveBeenCalledWith([['user_data', '{"name":"test"}'], ['settings', '{"theme":"dark"}']]);
    }));
    it('应该拒绝无效的备份数据', (0, _asyncToGenerator2.default)(function* () {
      yield expect(dataService.restoreData(null)).rejects.toThrow('无效的备份数据');
      yield expect(dataService.restoreData({})).rejects.toThrow('无效的备份数据');
    }));
  });
  describe('数据压缩和解压', function () {
    it('应该压缩大数据', (0, _asyncToGenerator2.default)(function* () {
      var largeData = {
        content: 'x'.repeat(2000)
      };
      var compressed = yield dataService.compressData(largeData);
      expect(compressed).toHaveProperty('original');
      expect(compressed).toHaveProperty('compressed');
      expect(compressed).toHaveProperty('ratio');
      expect(compressed.ratio).toBeLessThan(1);
    }));
    it('应该不压缩小数据', (0, _asyncToGenerator2.default)(function* () {
      var smallData = {
        content: 'small'
      };
      var compressed = yield dataService.compressData(smallData);
      expect(compressed.ratio).toBe(1);
    }));
    it('应该解压数据', (0, _asyncToGenerator2.default)(function* () {
      var originalData = {
        test: 'value'
      };
      var compressedData = {
        original: JSON.stringify(originalData),
        compressed: 'compressed',
        ratio: 0.5
      };
      var decompressed = yield dataService.decompressData(compressedData);
      expect(decompressed).toEqual(originalData);
    }));
    it('应该拒绝无效的压缩数据', (0, _asyncToGenerator2.default)(function* () {
      yield expect(dataService.decompressData(null)).rejects.toThrow('无效的压缩数据');
      yield expect(dataService.decompressData({})).rejects.toThrow('无效的压缩数据');
    }));
  });
  describe('数据验证', function () {
    it('应该验证有效数据', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'test',
        age: 25
      };
      var schema = {
        required: ['name'],
        types: {
          name: 'string',
          age: 'number'
        }
      };
      var result = yield dataService.validateData(data, schema);
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    }));
    it('应该检测缺少必需字段', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        age: 25
      };
      var schema = {
        required: ['name', 'email'],
        types: {}
      };
      var result = yield dataService.validateData(data, schema);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('缺少必需字段: name');
      expect(result.errors).toContain('缺少必需字段: email');
    }));
    it('应该检测类型错误', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 123,
        age: '25'
      };
      var schema = {
        required: [],
        types: {
          name: 'string',
          age: 'number'
        }
      };
      var result = yield dataService.validateData(data, schema);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('字段 name 类型错误，期望 string，实际 number');
      expect(result.errors).toContain('字段 age 类型错误，期望 number，实际 string');
    }));
  });
  describe('数据统计', function () {
    it('应该返回数据统计信息', (0, _asyncToGenerator2.default)(function* () {
      var allKeys = ['user_data', 'settings', 'cache_test1', 'cache_test2', 'offline_queue'];
      mockAsyncStorage.getAllKeys.mockResolvedValue(allKeys);
      mockAsyncStorage.getItem.mockResolvedValue('[]');
      var stats = yield dataService.getDataStats();
      expect(stats.totalKeys).toBe(5);
      expect(stats.cacheKeys).toBe(2);
      expect(stats.dataKeys).toBe(2);
      expect(stats.queueSize).toBe(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,