beffb4132453632b606dbeb121353bdf
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
var useSettings = function useSettings() {
  var _React$useState = _react.default.useState({
      notifications: {
        healthReminders: true,
        agentMessages: true,
        systemUpdates: false,
        soundEnabled: true,
        vibrationEnabled: true
      },
      privacy: {
        dataSharing: false,
        analyticsEnabled: false,
        locationTracking: true,
        biometricAuth: false
      },
      display: {
        theme: 'light',
        fontSize: 'medium',
        language: 'zh-CN'
      },
      health: {
        units: 'metric',
        stepGoal: 10000,
        waterGoal: 2000,
        sleepGoal: 8
      }
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    settings = _React$useState2[0],
    setSettings = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    loading = _React$useState4[0],
    setLoading = _React$useState4[1];
  var _React$useState5 = _react.default.useState(null),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    error = _React$useState6[0],
    setError = _React$useState6[1];
  var loadSettings = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      setError(null);
      try {
        var savedSettings = yield mockAsyncStorage.getItem('user_settings');
        if (savedSettings) {
          var parsedSettings = JSON.parse(savedSettings);
          setSettings(function (prev) {
            return Object.assign({}, prev, parsedSettings);
          });
        }
      } catch (err) {
        setError('加载设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function loadSettings() {
      return _ref.apply(this, arguments);
    };
  }();
  var updateNotificationSettings = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newSettings) {
      setLoading(true);
      setError(null);
      try {
        var updatedSettings = Object.assign({}, settings, {
          notifications: Object.assign({}, settings.notifications, newSettings)
        });
        yield mockAsyncStorage.setItem('user_settings', JSON.stringify(updatedSettings));
        setSettings(updatedSettings);
      } catch (err) {
        setError('更新通知设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function updateNotificationSettings(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  var updatePrivacySettings = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (newSettings) {
      setLoading(true);
      setError(null);
      try {
        var updatedSettings = Object.assign({}, settings, {
          privacy: Object.assign({}, settings.privacy, newSettings)
        });
        yield mockAsyncStorage.setItem('user_settings', JSON.stringify(updatedSettings));
        setSettings(updatedSettings);
      } catch (err) {
        setError('更新隐私设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function updatePrivacySettings(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  var updateDisplaySettings = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (newSettings) {
      setLoading(true);
      setError(null);
      try {
        var updatedSettings = Object.assign({}, settings, {
          display: Object.assign({}, settings.display, newSettings)
        });
        yield mockAsyncStorage.setItem('user_settings', JSON.stringify(updatedSettings));
        setSettings(updatedSettings);
      } catch (err) {
        setError('更新显示设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function updateDisplaySettings(_x3) {
      return _ref4.apply(this, arguments);
    };
  }();
  var updateHealthSettings = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (newSettings) {
      setLoading(true);
      setError(null);
      try {
        var updatedSettings = Object.assign({}, settings, {
          health: Object.assign({}, settings.health, newSettings)
        });
        yield mockAsyncStorage.setItem('user_settings', JSON.stringify(updatedSettings));
        setSettings(updatedSettings);
      } catch (err) {
        setError('更新健康设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function updateHealthSettings(_x4) {
      return _ref5.apply(this, arguments);
    };
  }();
  var resetSettings = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      setError(null);
      try {
        yield mockAsyncStorage.removeItem('user_settings');
        setSettings({
          notifications: {
            healthReminders: true,
            agentMessages: true,
            systemUpdates: false,
            soundEnabled: true,
            vibrationEnabled: true
          },
          privacy: {
            dataSharing: false,
            analyticsEnabled: false,
            locationTracking: true,
            biometricAuth: false
          },
          display: {
            theme: 'light',
            fontSize: 'medium',
            language: 'zh-CN'
          },
          health: {
            units: 'metric',
            stepGoal: 10000,
            waterGoal: 2000,
            sleepGoal: 8
          }
        });
      } catch (err) {
        setError('重置设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function resetSettings() {
      return _ref6.apply(this, arguments);
    };
  }();
  var exportSettings = function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* () {
      try {
        return JSON.stringify(settings, null, 2);
      } catch (err) {
        setError('导出设置失败');
        return null;
      }
    });
    return function exportSettings() {
      return _ref7.apply(this, arguments);
    };
  }();
  var importSettings = function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (settingsJson) {
      setLoading(true);
      setError(null);
      try {
        var importedSettings = JSON.parse(settingsJson);
        var updatedSettings = Object.assign({}, settings, importedSettings);
        yield mockAsyncStorage.setItem('user_settings', JSON.stringify(updatedSettings));
        setSettings(updatedSettings);
      } catch (err) {
        setError('导入设置失败');
      } finally {
        setLoading(false);
      }
    });
    return function importSettings(_x5) {
      return _ref8.apply(this, arguments);
    };
  }();
  _react.default.useEffect(function () {
    loadSettings();
  }, []);
  return {
    settings: settings,
    loading: loading,
    error: error,
    updateNotificationSettings: updateNotificationSettings,
    updatePrivacySettings: updatePrivacySettings,
    updateDisplaySettings: updateDisplaySettings,
    updateHealthSettings: updateHealthSettings,
    resetSettings: resetSettings,
    exportSettings: exportSettings,
    importSettings: importSettings,
    loadSettings: loadSettings
  };
};
describe('useSettings', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
  });
  it('应该返回默认设置', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook.result;
    expect(result.current.settings.notifications.healthReminders).toBe(true);
    expect(result.current.settings.privacy.dataSharing).toBe(false);
    expect(result.current.settings.display.theme).toBe('light');
    expect(result.current.settings.health.stepGoal).toBe(10000);
  });
  it('应该加载保存的设置', (0, _asyncToGenerator2.default)(function* () {
    var savedSettings = {
      notifications: {
        healthReminders: false
      },
      display: {
        theme: 'dark'
      }
    };
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(savedSettings));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.settings.notifications.healthReminders).toBe(false);
    expect(result.current.settings.display.theme).toBe('dark');
  }));
  it('应该更新通知设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateNotificationSettings({
        healthReminders: false,
        soundEnabled: false
      });
    }));
    expect(result.current.settings.notifications.healthReminders).toBe(false);
    expect(result.current.settings.notifications.soundEnabled).toBe(false);
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
  it('应该更新隐私设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updatePrivacySettings({
        dataSharing: true,
        biometricAuth: true
      });
    }));
    expect(result.current.settings.privacy.dataSharing).toBe(true);
    expect(result.current.settings.privacy.biometricAuth).toBe(true);
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
  it('应该更新显示设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateDisplaySettings({
        theme: 'dark',
        fontSize: 'large',
        language: 'en-US'
      });
    }));
    expect(result.current.settings.display.theme).toBe('dark');
    expect(result.current.settings.display.fontSize).toBe('large');
    expect(result.current.settings.display.language).toBe('en-US');
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
  it('应该更新健康设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateHealthSettings({
        stepGoal: 12000,
        waterGoal: 2500,
        units: 'imperial'
      });
    }));
    expect(result.current.settings.health.stepGoal).toBe(12000);
    expect(result.current.settings.health.waterGoal).toBe(2500);
    expect(result.current.settings.health.units).toBe('imperial');
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
  it('应该重置所有设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateDisplaySettings({
        theme: 'dark'
      });
    }));
    expect(result.current.settings.display.theme).toBe('dark');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.resetSettings();
    }));
    expect(result.current.settings.display.theme).toBe('light');
    expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('user_settings');
  }));
  it('应该导出设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var exported = yield result.current.exportSettings();
      expect(typeof exported).toBe('string');
      expect(JSON.parse(exported)).toEqual(result.current.settings);
    }));
  }));
  it('应该导入设置', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook9.result;
    var importSettings = {
      display: {
        theme: 'dark',
        fontSize: 'large'
      },
      health: {
        stepGoal: 15000
      }
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.importSettings(JSON.stringify(importSettings));
    }));
    expect(result.current.settings.display.theme).toBe('dark');
    expect(result.current.settings.display.fontSize).toBe('large');
    expect(result.current.settings.health.stepGoal).toBe(15000);
    expect(mockAsyncStorage.setItem).toHaveBeenCalled();
  }));
  it('应该处理加载设置错误', (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.error).toBe('加载设置失败');
  }));
  it('应该处理更新设置错误', (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateNotificationSettings({
        healthReminders: false
      });
    }));
    expect(result.current.error).toBe('更新通知设置失败');
  }));
  it('应该处理导入无效JSON错误', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.importSettings('invalid json');
    }));
    expect(result.current.error).toBe('导入设置失败');
  }));
  it('应该正确管理加载状态', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.loading).toBe(false);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateNotificationSettings({
        healthReminders: false
      });
    }));
    expect(result.current.loading).toBe(false);
  }));
  it('应该保持其他设置不变', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook12.result;
    var originalPrivacy = result.current.settings.privacy;
    var originalHealth = result.current.settings.health;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateDisplaySettings({
        theme: 'dark'
      });
    }));
    expect(result.current.settings.privacy).toEqual(originalPrivacy);
    expect(result.current.settings.health).toEqual(originalHealth);
  }));
  it('应该支持部分设置更新', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return useSettings();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateNotificationSettings({
        healthReminders: false
      });
    }));
    expect(result.current.settings.notifications.agentMessages).toBe(true);
    expect(result.current.settings.notifications.soundEnabled).toBe(true);
    expect(result.current.settings.notifications.healthReminders).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,