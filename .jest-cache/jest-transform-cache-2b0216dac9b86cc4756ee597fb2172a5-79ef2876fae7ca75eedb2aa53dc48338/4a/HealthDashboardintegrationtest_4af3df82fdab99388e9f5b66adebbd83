59674ca3a18d326e49f412d64d871a40
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var mockHealthData = {
  bloodPressure: {
    systolic: 120,
    diastolic: 80,
    timestamp: '2024-01-15T10:00:00Z',
    trend: 'stable'
  },
  heartRate: {
    value: 72,
    timestamp: '2024-01-15T10:00:00Z',
    trend: 'up'
  },
  weight: {
    value: 70,
    timestamp: '2024-01-15T10:00:00Z',
    trend: 'down'
  },
  steps: {
    value: 8500,
    goal: 10000,
    timestamp: '2024-01-15T10:00:00Z'
  },
  sleep: {
    duration: 7.5,
    quality: 'good',
    timestamp: '2024-01-15T06:00:00Z'
  }
};
var MockHealthDashboard = function MockHealthDashboard() {
  var _React$useState = _react.default.useState(null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    selectedMetric = _React$useState2[0],
    setSelectedMetric = _React$useState2[1];
  var _React$useState3 = _react.default.useState('week'),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    timeRange = _React$useState4[0],
    setTimeRange = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    refreshing = _React$useState6[0],
    setRefreshing = _React$useState6[1];
  var handleRefresh = function handleRefresh() {
    setRefreshing(true);
    setTimeout(function () {
      return setRefreshing(false);
    }, 1000);
  };
  var handleMetricPress = function handleMetricPress(metric) {
    setSelectedMetric(metric);
  };
  var handleTimeRangeChange = function handleTimeRangeChange(range) {
    setTimeRange(range);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
    testID: "health-dashboard",
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "dashboard-header",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "dashboard-title",
        children: "\u5065\u5EB7\u4EEA\u8868\u677F"
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "refresh-button",
        onPress: handleRefresh,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: refreshing ? '刷新中...' : '刷新'
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "time-range-selector",
      children: ['day', 'week', 'month', 'year'].map(function (range) {
        return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
          testID: `time-range-${range}`,
          onPress: function onPress() {
            return handleTimeRangeChange(range);
          },
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            style: {
              fontWeight: timeRange === range ? 'bold' : 'normal'
            },
            children: range === 'day' ? '日' : range === 'week' ? '周' : range === 'month' ? '月' : '年'
          })
        }, range);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "health-metrics",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "blood-pressure-card",
        onPress: function onPress() {
          return handleMetricPress('bloodPressure');
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "blood-pressure-content",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "blood-pressure-title",
            children: "\u8840\u538B"
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "blood-pressure-value",
            children: [mockHealthData.bloodPressure.systolic, "/", mockHealthData.bloodPressure.diastolic]
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "blood-pressure-trend",
            children: mockHealthData.bloodPressure.trend === 'stable' ? '稳定' : '变化'
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "heart-rate-card",
        onPress: function onPress() {
          return handleMetricPress('heartRate');
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "heart-rate-content",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "heart-rate-title",
            children: "\u5FC3\u7387"
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "heart-rate-value",
            children: [mockHealthData.heartRate.value, " bpm"]
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "heart-rate-trend",
            children: mockHealthData.heartRate.trend === 'up' ? '上升' : '下降'
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "weight-card",
        onPress: function onPress() {
          return handleMetricPress('weight');
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "weight-content",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "weight-title",
            children: "\u4F53\u91CD"
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "weight-value",
            children: [mockHealthData.weight.value, " kg"]
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "weight-trend",
            children: mockHealthData.weight.trend === 'down' ? '下降' : '上升'
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "steps-card",
        onPress: function onPress() {
          return handleMetricPress('steps');
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "steps-content",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "steps-title",
            children: "\u6B65\u6570"
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "steps-value",
            children: mockHealthData.steps.value
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "steps-goal",
            children: ["\u76EE\u6807: ", mockHealthData.steps.goal]
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "steps-progress",
            children: [Math.round(mockHealthData.steps.value / mockHealthData.steps.goal * 100), "%"]
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "sleep-card",
        onPress: function onPress() {
          return handleMetricPress('sleep');
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "sleep-content",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: "sleep-title",
            children: "\u7761\u7720"
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "sleep-value",
            children: [mockHealthData.sleep.duration, " \u5C0F\u65F6"]
          }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
            testID: "sleep-quality",
            children: ["\u8D28\u91CF: ", mockHealthData.sleep.quality === 'good' ? '良好' : '一般']
          })]
        })
      })]
    }), selectedMetric && (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "metric-detail-view",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "detail-title",
        children: selectedMetric === 'bloodPressure' ? '血压详情' : selectedMetric === 'heartRate' ? '心率详情' : selectedMetric === 'weight' ? '体重详情' : selectedMetric === 'steps' ? '步数详情' : selectedMetric === 'sleep' ? '睡眠详情' : '详情'
      }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "detail-time-range",
        children: ["\u65F6\u95F4\u8303\u56F4: ", timeRange]
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "close-detail",
        onPress: function onPress() {
          return setSelectedMetric(null);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u5173\u95ED"
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "health-recommendations",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "recommendations-title",
        children: "\u5065\u5EB7\u5EFA\u8BAE"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "recommendation-1",
        children: "\u4FDD\u6301\u89C4\u5F8B\u7684\u8FD0\u52A8\u4E60\u60EF"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "recommendation-2",
        children: "\u6CE8\u610F\u996E\u98DF\u5747\u8861"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "recommendation-3",
        children: "\u4FDD\u8BC1\u5145\u8DB3\u7684\u7761\u7720"
      })]
    })]
  });
};
describe('HealthDashboard Integration', function () {
  it('应该正确渲染健康仪表板', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('health-dashboard')).toBeTruthy();
    expect(getByTestId('dashboard-header')).toBeTruthy();
    expect(getByText('健康仪表板')).toBeTruthy();
    expect(getByTestId('health-metrics')).toBeTruthy();
  });
  it('应该显示所有健康指标卡片', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    expect(getByTestId('blood-pressure-card')).toBeTruthy();
    expect(getByTestId('heart-rate-card')).toBeTruthy();
    expect(getByTestId('weight-card')).toBeTruthy();
    expect(getByTestId('steps-card')).toBeTruthy();
    expect(getByTestId('sleep-card')).toBeTruthy();
    expect(getByText('120/80')).toBeTruthy();
    expect(getByText('72 bpm')).toBeTruthy();
    expect(getByText('70 kg')).toBeTruthy();
    expect(getByText('8500')).toBeTruthy();
    expect(getByText('7.5 小时')).toBeTruthy();
  });
  it('应该显示健康指标趋势', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByText = _render3.getByText;
    expect(getByText('稳定')).toBeTruthy();
    expect(getByText('上升')).toBeTruthy();
    expect(getByText('下降')).toBeTruthy();
  });
  it('应该显示步数进度', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByText = _render4.getByText;
    expect(getByText('目标: 10000')).toBeTruthy();
    expect(getByText('85%')).toBeTruthy();
  });
  it('应该支持时间范围选择', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('time-range-selector')).toBeTruthy();
    expect(getByTestId('time-range-day')).toBeTruthy();
    expect(getByTestId('time-range-week')).toBeTruthy();
    expect(getByTestId('time-range-month')).toBeTruthy();
    expect(getByTestId('time-range-year')).toBeTruthy();
  });
  it('应该能够切换时间范围', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render6.getByTestId;
    var monthButton = getByTestId('time-range-month');
    _reactNative.fireEvent.press(monthButton);
    var bloodPressureCard = getByTestId('blood-pressure-card');
    _reactNative.fireEvent.press(bloodPressureCard);
    expect(getByTestId('detail-time-range')).toBeTruthy();
  });
  it('应该支持刷新功能', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render7.getByTestId,
      getByText = _render7.getByText;
    var refreshButton = getByTestId('refresh-button');
    expect(getByText('刷新')).toBeTruthy();
    _reactNative.fireEvent.press(refreshButton);
    expect(getByText('刷新中...')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('刷新')).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
  it('应该能够查看指标详情', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render8.getByTestId,
      queryByTestId = _render8.queryByTestId;
    expect(queryByTestId('metric-detail-view')).toBeNull();
    var bloodPressureCard = getByTestId('blood-pressure-card');
    _reactNative.fireEvent.press(bloodPressureCard);
    expect(getByTestId('metric-detail-view')).toBeTruthy();
    expect(getByTestId('detail-title')).toBeTruthy();
  });
  it('应该能够关闭指标详情', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render9.getByTestId,
      queryByTestId = _render9.queryByTestId;
    var heartRateCard = getByTestId('heart-rate-card');
    _reactNative.fireEvent.press(heartRateCard);
    expect(getByTestId('metric-detail-view')).toBeTruthy();
    var closeButton = getByTestId('close-detail');
    _reactNative.fireEvent.press(closeButton);
    expect(queryByTestId('metric-detail-view')).toBeNull();
  });
  it('应该显示不同指标的详情标题', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render0.getByTestId,
      getByText = _render0.getByText;
    var testCases = [{
      card: 'blood-pressure-card',
      title: '血压详情'
    }, {
      card: 'heart-rate-card',
      title: '心率详情'
    }, {
      card: 'weight-card',
      title: '体重详情'
    }, {
      card: 'steps-card',
      title: '步数详情'
    }, {
      card: 'sleep-card',
      title: '睡眠详情'
    }];
    testCases.forEach(function (_ref2) {
      var card = _ref2.card,
        title = _ref2.title;
      var cardElement = getByTestId(card);
      _reactNative.fireEvent.press(cardElement);
      expect(getByText(title)).toBeTruthy();
      var closeButton = getByTestId('close-detail');
      _reactNative.fireEvent.press(closeButton);
    });
  });
  it('应该显示健康建议', function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render1.getByTestId,
      getByText = _render1.getByText;
    expect(getByTestId('health-recommendations')).toBeTruthy();
    expect(getByText('健康建议')).toBeTruthy();
    expect(getByText('保持规律的运动习惯')).toBeTruthy();
    expect(getByText('注意饮食均衡')).toBeTruthy();
    expect(getByText('保证充足的睡眠')).toBeTruthy();
  });
  it('应该正确计算和显示步数完成百分比', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByText = _render10.getByText;
    expect(getByText('85%')).toBeTruthy();
  });
  it('应该显示睡眠质量状态', function () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByText = _render11.getByText;
    expect(getByText('质量: 良好')).toBeTruthy();
  });
  it('应该支持滚动查看所有内容', function () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthDashboard, {})),
      getByTestId = _render12.getByTestId;
    var scrollView = getByTestId('health-dashboard');
    expect(scrollView).toBeTruthy();
    _reactNative.fireEvent.scroll(scrollView, {
      nativeEvent: {
        contentOffset: {
          y: 100
        },
        contentSize: {
          height: 1000
        },
        layoutMeasurement: {
          height: 500
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,