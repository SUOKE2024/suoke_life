{"version":3,"names":["_getJestObj","mock","apiClient","post","jest","fn","get","put","delete","storeAuthTokens","clearAuthTokens","getAuthToken","getRefreshToken","getDeviceId","mockResolvedValue","Alert","alert","_interopRequireDefault","require","_asyncToGenerator2","_authService","_apiClient","_require2","mockApiClient","describe","beforeEach","clearAllMocks","it","default","mockLoginResponse","user","id","email","username","accessToken","refreshToken","expiresIn","success","data","timestamp","Date","now","result","authService","login","password","expect","toEqual","toHaveBeenCalledWith","deviceId","error","code","message","rejects","toThrow","mockRegisterResponse","register","mockRefreshResponse","_require","refreshAccessToken","mockUser","getCurrentUser","changePassword","resolves","not","oldPassword","newPassword","resetPassword","logout"],"sources":["authService.test.ts"],"sourcesContent":["import { Alert } from 'react-native';\nimport authService from '../../services/authService';\n\n// Mock apiClient\njest.mock('../../services/apiClient', () => ({\n  apiClient: {\n    post: jest.fn(),\n    get: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n}));\n\n// Mock authUtils\njest.mock('../../utils/authUtils', () => ({\n  storeAuthTokens: jest.fn(),\n  clearAuthTokens: jest.fn(),\n  getAuthToken: jest.fn(),\n  getRefreshToken: jest.fn(),\n  getDeviceId: jest.fn().mockResolvedValue('mock-device-id'),\n}));\n\n// Mock Alert\njest.mock('react-native', () => ({\n  Alert: {\n    alert: jest.fn(),\n  },\n}));\n\nimport { apiClient } from '../../services/apiClient';\n\nconst mockApiClient = apiClient as jest.Mocked<typeof apiClient>;\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('登录功能', () => {\n    it('应该成功登录用户', async () => {\n      const mockLoginResponse = {\n        user: {\n          id: 'user123',\n          email: 'test@example.com',\n          username: '测试用户',\n        },\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n        expiresIn: 3600,\n      };\n\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        data: mockLoginResponse,\n        timestamp: Date.now(),\n      });\n\n      const result = await authService.login({\n        email: 'test@example.com',\n        password: 'password123',\n      });\n\n      expect(result).toEqual(mockLoginResponse);\n      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/login', {\n        email: 'test@example.com',\n        password: 'password123',\n        deviceId: 'mock-device-id',\n      });\n    });\n\n    it('应该处理登录失败', async () => {\n      mockApiClient.post.mockResolvedValue({\n        success: false,\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: '用户名或密码错误',\n        },\n        timestamp: Date.now(),\n      });\n\n      await expect(authService.login({\n        email: 'test@example.com',\n        password: 'wrongpassword',\n      })).rejects.toThrow('用户名或密码错误');\n    });\n  });\n\n  describe('注册功能', () => {\n    it('应该成功注册新用户', async () => {\n      const mockRegisterResponse = {\n        user: {\n          id: 'user123',\n          email: 'newuser@example.com',\n          username: '新用户',\n        },\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n        expiresIn: 3600,\n      };\n\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        data: mockRegisterResponse,\n        timestamp: Date.now(),\n      });\n\n      const result = await authService.register({\n        username: '新用户',\n        email: 'newuser@example.com',\n        password: 'password123',\n      });\n\n      expect(result).toEqual(mockRegisterResponse);\n    });\n  });\n\n  describe('令牌管理', () => {\n    it('应该成功刷新令牌', async () => {\n      const mockRefreshResponse = {\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        expiresIn: 3600,\n      };\n\n      // Mock getRefreshToken\n      const { getRefreshToken } = require('../../utils/authUtils');\n      getRefreshToken.mockResolvedValue('old-refresh-token');\n\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        data: mockRefreshResponse,\n        timestamp: Date.now(),\n      });\n\n      const result = await authService.refreshAccessToken();\n\n      expect(result).toEqual(mockRefreshResponse);\n      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/refresh', {\n        refreshToken: 'old-refresh-token',\n      });\n    });\n  });\n\n  describe('用户信息管理', () => {\n    it('应该获取当前用户信息', async () => {\n      const mockUser = {\n        id: 'user123',\n        email: 'test@example.com',\n        username: '测试用户',\n      };\n\n      mockApiClient.get.mockResolvedValue({\n        success: true,\n        data: mockUser,\n        timestamp: Date.now(),\n      });\n\n      const result = await authService.getCurrentUser();\n\n      expect(result).toEqual(mockUser);\n      expect(mockApiClient.get).toHaveBeenCalledWith('/auth/me');\n    });\n  });\n\n  describe('密码管理', () => {\n    it('应该成功修改密码', async () => {\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        timestamp: Date.now(),\n      });\n\n      await expect(authService.changePassword('oldPassword', 'newPassword')).resolves.not.toThrow();\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/change-password', {\n        oldPassword: 'oldPassword',\n        newPassword: 'newPassword',\n      });\n    });\n\n    it('应该成功重置密码', async () => {\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        timestamp: Date.now(),\n      });\n\n      await expect(authService.resetPassword({\n        email: 'test@example.com',\n        code: '123456',\n        newPassword: 'newPassword',\n      })).resolves.not.toThrow();\n    });\n  });\n\n  describe('登出功能', () => {\n    it('应该成功登出用户', async () => {\n      mockApiClient.post.mockResolvedValue({\n        success: true,\n        timestamp: Date.now(),\n      });\n\n      await expect(authService.logout()).resolves.not.toThrow();\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/logout');\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}