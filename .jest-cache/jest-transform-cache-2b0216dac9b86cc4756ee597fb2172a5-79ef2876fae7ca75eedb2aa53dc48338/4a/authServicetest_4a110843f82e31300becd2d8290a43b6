50123efa8a8e38f680720a1931f0db62
_getJestObj().mock('../../services/apiClient', function () {
  return {
    apiClient: {
      post: jest.fn(),
      get: jest.fn(),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock('../../utils/authUtils', function () {
  return {
    storeAuthTokens: jest.fn(),
    clearAuthTokens: jest.fn(),
    getAuthToken: jest.fn(),
    getRefreshToken: jest.fn(),
    getDeviceId: jest.fn().mockResolvedValue('mock-device-id')
  };
});
_getJestObj().mock('react-native', function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = _interopRequireDefault(require("../../services/authService"));
var _apiClient = require("../../services/apiClient");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApiClient = _apiClient.apiClient;
describe('AuthService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('登录功能', function () {
    it('应该成功登录用户', (0, _asyncToGenerator2.default)(function* () {
      var mockLoginResponse = {
        user: {
          id: 'user123',
          email: 'test@example.com',
          username: '测试用户'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token',
        expiresIn: 3600
      };
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockLoginResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(result).toEqual(mockLoginResponse);
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/login', {
        email: 'test@example.com',
        password: 'password123',
        deviceId: 'mock-device-id'
      });
    }));
    it('应该处理登录失败', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: false,
        error: {
          code: 'INVALID_CREDENTIALS',
          message: '用户名或密码错误'
        },
        timestamp: Date.now()
      });
      yield expect(_authService.default.login({
        email: 'test@example.com',
        password: 'wrongpassword'
      })).rejects.toThrow('用户名或密码错误');
    }));
  });
  describe('注册功能', function () {
    it('应该成功注册新用户', (0, _asyncToGenerator2.default)(function* () {
      var mockRegisterResponse = {
        user: {
          id: 'user123',
          email: 'newuser@example.com',
          username: '新用户'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token',
        expiresIn: 3600
      };
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockRegisterResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.register({
        username: '新用户',
        email: 'newuser@example.com',
        password: 'password123'
      });
      expect(result).toEqual(mockRegisterResponse);
    }));
  });
  describe('令牌管理', function () {
    it('应该成功刷新令牌', (0, _asyncToGenerator2.default)(function* () {
      var mockRefreshResponse = {
        accessToken: 'new-access-token',
        refreshToken: 'new-refresh-token',
        expiresIn: 3600
      };
      var _require = require('../../utils/authUtils'),
        getRefreshToken = _require.getRefreshToken;
      getRefreshToken.mockResolvedValue('old-refresh-token');
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockRefreshResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.refreshAccessToken();
      expect(result).toEqual(mockRefreshResponse);
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/refresh', {
        refreshToken: 'old-refresh-token'
      });
    }));
  });
  describe('用户信息管理', function () {
    it('应该获取当前用户信息', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        username: '测试用户'
      };
      mockApiClient.get.mockResolvedValue({
        success: true,
        data: mockUser,
        timestamp: Date.now()
      });
      var result = yield _authService.default.getCurrentUser();
      expect(result).toEqual(mockUser);
      expect(mockApiClient.get).toHaveBeenCalledWith('/auth/me');
    }));
  });
  describe('密码管理', function () {
    it('应该成功修改密码', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.changePassword('oldPassword', 'newPassword')).resolves.not.toThrow();
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/change-password', {
        oldPassword: 'oldPassword',
        newPassword: 'newPassword'
      });
    }));
    it('应该成功重置密码', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.resetPassword({
        email: 'test@example.com',
        code: '123456',
        newPassword: 'newPassword'
      })).resolves.not.toThrow();
    }));
  });
  describe('登出功能', function () {
    it('应该成功登出用户', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.logout()).resolves.not.toThrow();
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/logout');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,