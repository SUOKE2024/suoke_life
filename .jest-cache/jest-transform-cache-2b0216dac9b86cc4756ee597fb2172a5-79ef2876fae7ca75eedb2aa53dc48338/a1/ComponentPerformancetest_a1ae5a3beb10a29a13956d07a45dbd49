dcc8f3c7024c7b58775f90b09537824f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _testUtils = require("../utils/testUtils");
var _jsxRuntime = require("react/jsx-runtime");
var MockProfileHeader = function MockProfileHeader(_ref) {
  var userProfile = _ref.userProfile,
    onEditPress = _ref.onEditPress,
    getHealthScoreColor = _ref.getHealthScoreColor,
    getMemberLevelText = _ref.getMemberLevelText;
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return React.createElement(View, {
    testID: 'profile-header'
  }, React.createElement(Text, {
    testID: 'user-name'
  }, userProfile.name), React.createElement(Text, {
    testID: 'health-score'
  }, userProfile.healthScore), React.createElement(TouchableOpacity, {
    onPress: onEditPress,
    testID: 'edit-button'
  }, React.createElement(Text, null, '编辑')));
};
var MockHealthMetricCard = function MockHealthMetricCard(_ref2) {
  var metric = _ref2.metric,
    onPress = _ref2.onPress,
    getTrendIcon = _ref2.getTrendIcon;
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return React.createElement(TouchableOpacity, {
    testID: 'health-metric-card',
    onPress: onPress
  }, React.createElement(View, null, React.createElement(Text, {
    testID: 'metric-name'
  }, metric.name), React.createElement(Text, {
    testID: 'metric-value'
  }, metric.value), React.createElement(Text, {
    testID: 'metric-unit'
  }, metric.unit)));
};
describe('Component Performance Tests', function () {
  var mockUserProfile = {
    name: _testUtils.MockDataGenerator.randomString(10),
    healthScore: _testUtils.MockDataGenerator.randomNumber(60, 100),
    memberLevel: 'premium',
    joinDate: '2024-01-01',
    totalDiagnosis: _testUtils.MockDataGenerator.randomNumber(1, 50),
    consecutiveDays: _testUtils.MockDataGenerator.randomNumber(1, 100),
    healthPoints: _testUtils.MockDataGenerator.randomNumber(100, 1000)
  };
  var mockHealthMetric = {
    id: 'test',
    name: '测试指标',
    value: _testUtils.MockDataGenerator.randomNumber(50, 100),
    unit: '分',
    target: 80,
    icon: 'heart',
    color: '#FF6B6B',
    trend: 'up',
    suggestion: '保持良好状态'
  };
  var mockGetHealthScoreColor = function mockGetHealthScoreColor(score) {
    return score >= 80 ? '#4CAF50' : '#FF9500';
  };
  var mockGetMemberLevelText = function mockGetMemberLevelText(level) {
    return level === 'premium' ? '高级会员' : '普通会员';
  };
  var mockGetTrendIcon = function mockGetTrendIcon(trend) {
    return trend === 'up' ? 'trending-up' : 'trending-down';
  };
  describe('单组件性能测试', function () {
    it('ProfileHeader应该在合理时间内渲染', function () {
      _testUtils.TestUtils.expectRenderTimeBelow(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }, 1000);
    });
    it('HealthMetricCard应该在合理时间内渲染', function () {
      _testUtils.TestUtils.expectRenderTimeBelow(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
          metric: mockHealthMetric,
          getTrendIcon: mockGetTrendIcon
        }));
      }, 500);
    });
  });
  describe('批量渲染性能测试', function () {
    it('多个ProfileHeader组件应该高效渲染', function () {
      _testUtils.TestUtils.expectBatchRenderTimeBelow(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }, 10, 2000);
    });
    it('多个HealthMetricCard组件应该高效渲染', function () {
      _testUtils.TestUtils.expectBatchRenderTimeBelow(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
          metric: mockHealthMetric,
          getTrendIcon: mockGetTrendIcon
        }));
      }, 20, 2000);
    });
  });
  describe('组件生命周期性能测试', function () {
    it('组件重新渲染应该高效', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        rerender = _render.rerender;
      _testUtils.TestUtils.expectRenderTimeBelow(function () {
        rerender((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: Object.assign({}, mockUserProfile, {
            healthScore: 95
          }),
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }, 50);
    });
    it('组件卸载应该正常工作', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        unmount = _render2.unmount;
      _testUtils.TestUtils.expectRenderTimeBelow(function () {
        unmount();
      }, 20);
    });
  });
  describe('内存性能测试', function () {
    it('不应该有明显的内存泄漏', function () {
      var hasMemoryLeak = _testUtils.TestUtils.detectMemoryLeak(function () {
        var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
            metric: mockHealthMetric,
            getTrendIcon: mockGetTrendIcon
          })),
          unmount = _render3.unmount;
        unmount();
      }, 50);
      expect(hasMemoryLeak).toBe(false);
    });
  });
  describe('性能基准测试', function () {
    it('应该建立ProfileHeader性能基准', function () {
      var benchmark = _testUtils.TestUtils.createPerformanceBenchmark('ProfileHeader渲染', function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      });
      var result = benchmark.run(10);
      expect(result.average).toBeLessThan(1000);
      expect(result.p95).toBeLessThan(1500);
      expect(result.iterations).toBe(10);
    });
    it('应该建立HealthMetricCard性能基准', function () {
      var benchmark = _testUtils.TestUtils.createPerformanceBenchmark('HealthMetricCard渲染', function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
          metric: mockHealthMetric,
          getTrendIcon: mockGetTrendIcon
        }));
      });
      var result = benchmark.run(15);
      expect(result.average).toBeLessThan(500);
      expect(result.p99).toBeLessThan(1000);
      expect(result.iterations).toBe(15);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,