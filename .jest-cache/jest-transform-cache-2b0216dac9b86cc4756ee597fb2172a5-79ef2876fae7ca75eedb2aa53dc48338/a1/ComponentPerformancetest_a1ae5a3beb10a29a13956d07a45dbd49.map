{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_testUtils","_jsxRuntime","MockProfileHeader","_ref","userProfile","onEditPress","getHealthScoreColor","getMemberLevelText","React","_require","View","Text","TouchableOpacity","createElement","testID","name","healthScore","onPress","MockHealthMetricCard","_ref2","metric","getTrendIcon","_require2","value","unit","describe","mockUserProfile","MockDataGenerator","randomString","randomNumber","memberLevel","joinDate","totalDiagnosis","consecutiveDays","healthPoints","mockHealthMetric","id","target","icon","color","trend","suggestion","mockGetHealthScoreColor","score","mockGetMemberLevelText","level","mockGetTrendIcon","it","TestUtils","expectRenderTimeBelow","render","jsx","expectBatchRenderTimeBelow","_render","rerender","Object","assign","_render2","unmount","hasMemoryLeak","detectMemoryLeak","_render3","expect","toBe","benchmark","createPerformanceBenchmark","result","run","average","toBeLessThan","p95","iterations","p99"],"sources":["ComponentPerformance.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { TestUtils, MockDataGenerator } from '../utils/testUtils';\n\n// Mock组件，避免Icon依赖问题\nconst MockProfileHeader = ({ userProfile, onEditPress, getHealthScoreColor, getMemberLevelText }: any) => {\n  const React = require('react');\n  const { View, Text, TouchableOpacity } = require('react-native');\n  \n  return React.createElement(View, { testID: 'profile-header' },\n    React.createElement(Text, { testID: 'user-name' }, userProfile.name),\n    React.createElement(Text, { testID: 'health-score' }, userProfile.healthScore),\n    React.createElement(TouchableOpacity, { onPress: onEditPress, testID: 'edit-button' },\n      React.createElement(Text, null, '编辑')\n    )\n  );\n};\n\nconst MockHealthMetricCard = ({ metric, onPress, getTrendIcon }: any) => {\n  const React = require('react');\n  const { View, Text, TouchableOpacity } = require('react-native');\n  \n  return React.createElement(TouchableOpacity, { \n    testID: 'health-metric-card',\n    onPress: onPress \n  },\n    React.createElement(View, null,\n      React.createElement(Text, { testID: 'metric-name' }, metric.name),\n      React.createElement(Text, { testID: 'metric-value' }, metric.value),\n      React.createElement(Text, { testID: 'metric-unit' }, metric.unit)\n    )\n  );\n};\n\ndescribe('Component Performance Tests', () => {\n  // Mock数据\n  const mockUserProfile = {\n    name: MockDataGenerator.randomString(10),\n    healthScore: MockDataGenerator.randomNumber(60, 100),\n    memberLevel: 'premium',\n    joinDate: '2024-01-01',\n    totalDiagnosis: MockDataGenerator.randomNumber(1, 50),\n    consecutiveDays: MockDataGenerator.randomNumber(1, 100),\n    healthPoints: MockDataGenerator.randomNumber(100, 1000),\n  };\n\n  const mockHealthMetric = {\n    id: 'test',\n    name: '测试指标',\n    value: MockDataGenerator.randomNumber(50, 100),\n    unit: '分',\n    target: 80,\n    icon: 'heart',\n    color: '#FF6B6B',\n    trend: 'up' as const,\n    suggestion: '保持良好状态',\n  };\n\n  const mockGetHealthScoreColor = (score: number) => score >= 80 ? '#4CAF50' : '#FF9500';\n  const mockGetMemberLevelText = (level: string) => level === 'premium' ? '高级会员' : '普通会员';\n  const mockGetTrendIcon = (trend: string) => trend === 'up' ? 'trending-up' : 'trending-down';\n\n  describe('单组件性能测试', () => {\n    it('ProfileHeader应该在合理时间内渲染', () => {\n      TestUtils.expectRenderTimeBelow(() => {\n        render(\n          <MockProfileHeader\n            userProfile={mockUserProfile}\n            onEditPress={() => {}}\n            getHealthScoreColor={mockGetHealthScoreColor}\n            getMemberLevelText={mockGetMemberLevelText}\n          />\n        );\n      }, 1000); // 1000ms内完成渲染（测试环境较慢）\n    });\n\n    it('HealthMetricCard应该在合理时间内渲染', () => {\n      TestUtils.expectRenderTimeBelow(() => {\n        render(\n          <MockHealthMetricCard\n            metric={mockHealthMetric}\n            getTrendIcon={mockGetTrendIcon}\n          />\n        );\n      }, 500); // 500ms内完成渲染\n    });\n  });\n\n  describe('批量渲染性能测试', () => {\n    it('多个ProfileHeader组件应该高效渲染', () => {\n      TestUtils.expectBatchRenderTimeBelow(() => {\n        render(\n          <MockProfileHeader\n            userProfile={mockUserProfile}\n            onEditPress={() => {}}\n            getHealthScoreColor={mockGetHealthScoreColor}\n            getMemberLevelText={mockGetMemberLevelText}\n          />\n        );\n      }, 10, 2000); // 10个组件在2000ms内渲染完成\n    });\n\n    it('多个HealthMetricCard组件应该高效渲染', () => {\n      TestUtils.expectBatchRenderTimeBelow(() => {\n        render(\n          <MockHealthMetricCard\n            metric={mockHealthMetric}\n            getTrendIcon={mockGetTrendIcon}\n          />\n        );\n      }, 20, 2000); // 20个组件在2000ms内渲染完成\n    });\n  });\n\n  describe('组件生命周期性能测试', () => {\n    it('组件重新渲染应该高效', () => {\n      const { rerender } = render(\n        <MockProfileHeader\n          userProfile={mockUserProfile}\n          onEditPress={() => {}}\n          getHealthScoreColor={mockGetHealthScoreColor}\n          getMemberLevelText={mockGetMemberLevelText}\n        />\n      );\n\n      TestUtils.expectRenderTimeBelow(() => {\n        rerender(\n          <MockProfileHeader\n            userProfile={{ ...mockUserProfile, healthScore: 95 }}\n            onEditPress={() => {}}\n            getHealthScoreColor={mockGetHealthScoreColor}\n            getMemberLevelText={mockGetMemberLevelText}\n          />\n        );\n      }, 50); // 重新渲染应该在50ms内完成\n    });\n\n    it('组件卸载应该正常工作', () => {\n      const { unmount } = render(\n        <MockProfileHeader\n          userProfile={mockUserProfile}\n          onEditPress={() => {}}\n          getHealthScoreColor={mockGetHealthScoreColor}\n          getMemberLevelText={mockGetMemberLevelText}\n        />\n      );\n\n      TestUtils.expectRenderTimeBelow(() => {\n        unmount();\n      }, 20); // 卸载应该在20ms内完成\n    });\n  });\n\n  describe('内存性能测试', () => {\n    it('不应该有明显的内存泄漏', () => {\n      const hasMemoryLeak = TestUtils.detectMemoryLeak(() => {\n        const { unmount } = render(\n          <MockHealthMetricCard\n            metric={mockHealthMetric}\n            getTrendIcon={mockGetTrendIcon}\n          />\n        );\n        unmount();\n      }, 50);\n\n      expect(hasMemoryLeak).toBe(false);\n    });\n  });\n\n  describe('性能基准测试', () => {\n    it('应该建立ProfileHeader性能基准', () => {\n      const benchmark = TestUtils.createPerformanceBenchmark(\n        'ProfileHeader渲染',\n        () => {\n          render(\n            <MockProfileHeader\n              userProfile={mockUserProfile}\n              onEditPress={() => {}}\n              getHealthScoreColor={mockGetHealthScoreColor}\n              getMemberLevelText={mockGetMemberLevelText}\n            />\n          );\n        }\n      );\n\n      const result = benchmark.run(10);\n      \n      expect(result.average).toBeLessThan(1000);\n      expect(result.p95).toBeLessThan(1500);\n      expect(result.iterations).toBe(10);\n    });\n\n    it('应该建立HealthMetricCard性能基准', () => {\n      const benchmark = TestUtils.createPerformanceBenchmark(\n        'HealthMetricCard渲染',\n        () => {\n          render(\n            <MockHealthMetricCard\n              metric={mockHealthMetric}\n              getTrendIcon={mockGetTrendIcon}\n            />\n          );\n        }\n      );\n\n      const result = benchmark.run(15);\n      \n      expect(result.average).toBeLessThan(500);\n      expect(result.p99).toBeLessThan(1000);\n      expect(result.iterations).toBe(15);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}