8adfaac03cf0467bde89510ced80e1a7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _testUtils = require("../utils/testUtils");
var _jsxRuntime = require("react/jsx-runtime");
var MockProfileHeader = function MockProfileHeader(_ref) {
  var userProfile = _ref.userProfile,
    onEditPress = _ref.onEditPress,
    getHealthScoreColor = _ref.getHealthScoreColor,
    getMemberLevelText = _ref.getMemberLevelText;
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return React.createElement(View, {
    testID: 'profile-header'
  }, React.createElement(Text, {
    testID: 'user-name'
  }, userProfile.name), React.createElement(Text, {
    testID: 'health-score'
  }, userProfile.healthScore), React.createElement(TouchableOpacity, {
    onPress: onEditPress,
    testID: 'edit-button'
  }, React.createElement(Text, null, '编辑')));
};
var MockHealthMetricCard = function MockHealthMetricCard(_ref2) {
  var metric = _ref2.metric,
    onPress = _ref2.onPress,
    getTrendIcon = _ref2.getTrendIcon;
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return React.createElement(TouchableOpacity, {
    onPress: onPress,
    testID: 'health-metric-card'
  }, React.createElement(View, null, React.createElement(Text, {
    testID: 'metric-name'
  }, metric.name), React.createElement(Text, {
    testID: 'metric-value'
  }, metric.value), React.createElement(Text, {
    testID: 'metric-unit'
  }, metric.unit)));
};
var mockUserProfile = {
  id: '1',
  name: '测试用户',
  healthScore: 85,
  memberLevel: 'premium'
};
var mockHealthMetric = {
  id: 'heart_rate',
  name: '心率',
  value: 72,
  unit: 'bpm',
  trend: 'up'
};
var mockGetHealthScoreColor = function mockGetHealthScoreColor(score) {
  return score > 80 ? '#4CAF50' : '#FF9800';
};
var mockGetMemberLevelText = function mockGetMemberLevelText(level) {
  return level === 'premium' ? '高级会员' : '普通会员';
};
var mockGetTrendIcon = function mockGetTrendIcon(trend) {
  return trend === 'up' ? 'trending-up' : 'trending-down';
};
describe('Component Performance Tests', function () {
  describe('基础渲染测试', function () {
    it('ProfileHeader应该能够正常渲染', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        getByTestId = _render.getByTestId;
      expect(getByTestId('profile-header')).toBeTruthy();
      expect(getByTestId('user-name')).toBeTruthy();
      expect(getByTestId('health-score')).toBeTruthy();
    });
    it('HealthMetricCard应该能够正常渲染', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
          metric: mockHealthMetric,
          getTrendIcon: mockGetTrendIcon
        })),
        getByTestId = _render2.getByTestId;
      expect(getByTestId('health-metric-card')).toBeTruthy();
      expect(getByTestId('metric-name')).toBeTruthy();
      expect(getByTestId('metric-value')).toBeTruthy();
    });
  });
  describe('性能测试', function () {
    it('ProfileHeader渲染性能应该可接受', function () {
      var renderTime = _testUtils.TestUtils.measureRenderTime(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      });
      expect(renderTime).toBeLessThan(10000);
    });
    it('HealthMetricCard渲染性能应该可接受', function () {
      var renderTime = _testUtils.TestUtils.measureRenderTime(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
          metric: mockHealthMetric,
          getTrendIcon: mockGetTrendIcon
        }));
      });
      expect(renderTime).toBeLessThan(5000);
    });
    it('批量渲染多个组件应该高效', function () {
      var renderTime = _testUtils.TestUtils.measureRenderTime(function () {
        for (var i = 0; i < 5; i++) {
          (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHealthMetricCard, {
            metric: Object.assign({}, mockHealthMetric, {
              id: `metric_${i}`
            }),
            getTrendIcon: mockGetTrendIcon
          }));
        }
      });
      expect(renderTime).toBeLessThan(15000);
    });
  });
  describe('内存测试', function () {
    it('组件渲染不应该导致明显的内存问题', function () {
      var initialMemory = _testUtils.TestUtils.getMemoryUsage();
      for (var i = 0; i < 10; i++) {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: Object.assign({}, mockUserProfile, {
            id: `user_${i}`
          }),
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }
      var finalMemory = _testUtils.TestUtils.getMemoryUsage();
      var memoryIncrease = finalMemory - initialMemory;
      expect(memoryIncrease).toBeLessThan(100);
    });
  });
  describe('组件生命周期测试', function () {
    it('组件卸载应该正常工作', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        unmount = _render3.unmount;
      expect(function () {
        return unmount();
      }).not.toThrow();
    });
    it('组件重新渲染应该正常工作', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        rerender = _render4.rerender;
      expect(function () {
        rerender((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: Object.assign({}, mockUserProfile, {
            name: '更新的用户'
          }),
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }).not.toThrow();
    });
  });
  describe('性能基准测试', function () {
    it('应该建立基本的性能基准', function () {
      var benchmark = _testUtils.TestUtils.createPerformanceBenchmark('ProfileHeader渲染', function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockProfileHeader, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      });
      var result = benchmark.run(3);
      expect(result.average).toBeGreaterThan(0);
      expect(result.iterations).toBe(3);
      expect(result.min).toBeGreaterThan(0);
      expect(result.max).toBeGreaterThan(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,