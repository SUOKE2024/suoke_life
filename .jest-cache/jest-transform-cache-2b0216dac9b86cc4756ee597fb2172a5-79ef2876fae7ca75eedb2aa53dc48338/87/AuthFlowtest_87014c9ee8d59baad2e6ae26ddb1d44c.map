{"version":3,"names":["_getJestObj","mock","authService","mockAuthService","_interopRequireDefault","require","_asyncToGenerator2","_slicedToArray2","_react","_reactNative","_reactRedux","_reactNative2","_store","_jsxRuntime","_require","jest","login","fn","register","logout","getCurrentUser","refreshToken","LoginComponent","_React$useState","React","useState","_React$useState2","default","email","setEmail","_React$useState3","_React$useState4","password","setPassword","_React$useState5","_React$useState6","loading","setLoading","_React$useState7","_React$useState8","error","setError","handleLogin","_ref","console","apply","arguments","jsxs","View","testID","children","jsx","TextInput","value","onChangeText","placeholder","secureTextEntry","Text","TouchableOpacity","onPress","disabled","RegisterComponent","_React$useState9","_React$useState0","_React$useState1","_React$useState10","_React$useState11","_React$useState12","confirmPassword","setConfirmPassword","_React$useState13","_React$useState14","_React$useState15","_React$useState16","handleRegister","_ref2","HomeComponent","_React$useState17","_React$useState18","handleLogout","_ref3","TestWrapper","_ref4","Provider","store","describe","beforeEach","clearAllMocks","it","mockResolvedValue","user","id","name","token","_render","render","getByTestId","emailInput","passwordInput","loginButton","fireEvent","changeText","press","waitFor","expect","toHaveBeenCalledWith","mockRejectedValue","Error","consoleSpy","spyOn","mockImplementation","_render2","getByText","any","toBeTruthy","mockRestore","resolveLogin","Promise","resolve","_render3","_render4","_render5","confirmPasswordInput","registerButton","_render6","not","toHaveBeenCalled","_render7","undefined","_render8","logoutButton","resolveLogout","_render9","startTime","performance","now","_render0","endTime","totalTime","toBeLessThan","_render1","i","toHaveBeenCalledTimes","iterations","times","_render10","unmount","push","averageTime","reduce","sum","time","_render11","_render12"],"sources":["AuthFlow.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { store } from '../../store';\n\n// Mock AuthService\nconst mockAuthService = {\n  login: jest.fn(),\n  register: jest.fn(),\n  logout: jest.fn(),\n  getCurrentUser: jest.fn(),\n  refreshToken: jest.fn(),\n};\n\njest.mock('../../services/authService', () => ({\n  authService: mockAuthService,\n}));\n\n// 简化的登录组件\nconst LoginComponent = () => {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const handleLogin = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      await mockAuthService.login({ email, password });\n    } catch (error) {\n      console.error('Login failed:', error);\n      setError('登录失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View testID=\"login-component\">\n      <TextInput\n        testID=\"email-input\"\n        value={email}\n        onChangeText={setEmail}\n        placeholder=\"邮箱\"\n      />\n      <TextInput\n        testID=\"password-input\"\n        value={password}\n        onChangeText={setPassword}\n        placeholder=\"密码\"\n        secureTextEntry\n      />\n      {error ? <Text testID=\"error-message\">{error}</Text> : null}\n      <TouchableOpacity\n        testID=\"login-button\"\n        onPress={handleLogin}\n        disabled={loading}\n      >\n        <Text>{loading ? '登录中...' : '登录'}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n// 简化的注册组件\nconst RegisterComponent = () => {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [confirmPassword, setConfirmPassword] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const handleRegister = async () => {\n    if (password !== confirmPassword) {\n      setError('密码不匹配');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    try {\n      await mockAuthService.register({ email, password });\n    } catch (error) {\n      console.error('Registration failed:', error);\n      setError('注册失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View testID=\"register-component\">\n      <TextInput\n        testID=\"register-email-input\"\n        value={email}\n        onChangeText={setEmail}\n        placeholder=\"邮箱\"\n      />\n      <TextInput\n        testID=\"register-password-input\"\n        value={password}\n        onChangeText={setPassword}\n        placeholder=\"密码\"\n        secureTextEntry\n      />\n      <TextInput\n        testID=\"confirm-password-input\"\n        value={confirmPassword}\n        onChangeText={setConfirmPassword}\n        placeholder=\"确认密码\"\n        secureTextEntry\n      />\n      {error ? <Text testID=\"error-message\">{error}</Text> : null}\n      <TouchableOpacity\n        testID=\"register-button\"\n        onPress={handleRegister}\n        disabled={loading}\n      >\n        <Text>{loading ? '注册中...' : '注册'}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n// 简化的主页组件\nconst HomeComponent = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  const handleLogout = async () => {\n    setLoading(true);\n    try {\n      await mockAuthService.logout();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View testID=\"home-component\">\n      <Text testID=\"welcome-message\">欢迎回来！</Text>\n      <TouchableOpacity \n        testID=\"logout-button\" \n        onPress={handleLogout}\n        disabled={loading}\n      >\n        <Text>{loading ? '登出中...' : '登出'}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n// 测试包装器\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <Provider store={store}>\n    {children}\n  </Provider>\n);\n\ndescribe('认证流程集成测试', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('登录流程', () => {\n    it('应该成功完成登录流程', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      // 输入邮箱和密码\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n\n      // 点击登录按钮\n      fireEvent.press(loginButton);\n\n      // 等待登录完成\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalledWith({\n          email: 'test@example.com',\n          password: 'password123'\n        });\n      });\n    });\n\n    it('应该处理登录错误', async () => {\n      mockAuthService.login.mockRejectedValue(new Error('登录失败'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'wrongpassword');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));\n        expect(getByText('登录失败')).toBeTruthy();\n      });\n\n      consoleSpy.mockRestore();\n    });\n\n    it('应该在登录过程中显示加载状态', async () => {\n      let resolveLogin: (value: any) => void;\n      mockAuthService.login.mockImplementation(() => new Promise(resolve => {\n        resolveLogin = resolve;\n      }));\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      // 检查加载状态\n      expect(getByText('登录中...')).toBeTruthy();\n\n      // 完成登录\n      resolveLogin!({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      await waitFor(() => {\n        expect(getByText('登录')).toBeTruthy();\n      });\n    });\n\n    it('应该处理空输入', async () => {\n      const { getByTestId } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const loginButton = getByTestId('login-button');\n\n      // 不输入任何内容直接点击登录\n      fireEvent.press(loginButton);\n\n      // 验证AuthService.login被调用时使用了空字符串\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalledWith({\n          email: '',\n          password: ''\n        });\n      });\n    });\n  });\n\n  describe('注册流程', () => {\n    it('应该成功完成注册流程', async () => {\n      mockAuthService.register.mockResolvedValue({\n        user: { id: '2', email: 'newuser@example.com', name: '新用户' },\n        token: 'new-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <RegisterComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'newuser@example.com');\n      fireEvent.changeText(passwordInput, 'newpassword123');\n      fireEvent.changeText(confirmPasswordInput, 'newpassword123');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.register).toHaveBeenCalledWith({\n          email: 'newuser@example.com',\n          password: 'newpassword123'\n        });\n      });\n    });\n\n    it('应该验证密码匹配', async () => {\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <RegisterComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'newuser@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.changeText(confirmPasswordInput, 'differentpassword');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(getByText('密码不匹配')).toBeTruthy();\n      });\n\n      // 验证register服务没有被调用\n      expect(mockAuthService.register).not.toHaveBeenCalled();\n    });\n\n    it('应该处理注册错误', async () => {\n      mockAuthService.register.mockRejectedValue(new Error('注册失败'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <RegisterComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'newuser@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.changeText(confirmPasswordInput, 'password123');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Registration failed:', expect.any(Error));\n        expect(getByText('注册失败')).toBeTruthy();\n      });\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('登出流程', () => {\n    it('应该成功完成登出流程', async () => {\n      mockAuthService.logout.mockResolvedValue(undefined);\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <HomeComponent />\n        </TestWrapper>\n      );\n\n      const logoutButton = getByTestId('logout-button');\n      fireEvent.press(logoutButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.logout).toHaveBeenCalled();\n      });\n    });\n\n    it('应该在登出过程中显示加载状态', async () => {\n      let resolveLogout: (value: any) => void;\n      mockAuthService.logout.mockImplementation(() => new Promise(resolve => {\n        resolveLogout = resolve;\n      }));\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <HomeComponent />\n        </TestWrapper>\n      );\n\n      const logoutButton = getByTestId('logout-button');\n      fireEvent.press(logoutButton);\n\n      // 检查加载状态\n      expect(getByText('登出中...')).toBeTruthy();\n\n      // 完成登出\n      resolveLogout!(undefined);\n\n      await waitFor(() => {\n        expect(getByText('登出')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('性能测试', () => {\n    it('登录流程应该在合理时间内完成', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const startTime = performance.now();\n      \n      const { getByTestId } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(1000); // 1秒内完成\n    });\n\n    it('应该高效处理多个并发登录请求', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n\n      const startTime = performance.now();\n\n      // 模拟快速多次点击\n      for (let i = 0; i < 5; i++) {\n        fireEvent.press(loginButton);\n      }\n\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(2000); // 2秒内完成\n      // 验证只调用了一次（防止重复提交）\n      expect(mockAuthService.login).toHaveBeenCalledTimes(1);\n    });\n\n    it('组件渲染性能测试', async () => {\n      const iterations = 10;\n      const times = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const startTime = performance.now();\n        \n        const { unmount } = render(\n          <TestWrapper>\n            <LoginComponent />\n          </TestWrapper>\n        );\n        \n        const endTime = performance.now();\n        unmount();\n        times.push(endTime - startTime);\n      }\n\n      const averageTime = times.reduce((sum, time) => sum + time, 0) / iterations;\n      expect(averageTime).toBeLessThan(100); // 平均渲染时间应该小于100ms\n    });\n  });\n\n  describe('错误处理', () => {\n    it('应该处理网络错误', async () => {\n      mockAuthService.login.mockRejectedValue(new Error('网络连接失败'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <LoginComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));\n        expect(getByText('登录失败')).toBeTruthy();\n      });\n\n      consoleSpy.mockRestore();\n    });\n\n    it('应该处理服务器错误', async () => {\n      mockAuthService.register.mockRejectedValue(new Error('服务器内部错误'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId, getByText } = render(\n        <TestWrapper>\n          <RegisterComponent />\n        </TestWrapper>\n      );\n\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.changeText(confirmPasswordInput, 'password123');\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Registration failed:', expect.any(Error));\n        expect(getByText('注册失败')).toBeTruthy();\n      });\n\n      consoleSpy.mockRestore();\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}