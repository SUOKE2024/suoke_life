1a29da797b7cfb540ad713be39eaf641
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('react-native-mmkv', function () {
  return {
    MMKV: jest.fn().mockImplementation(function () {
      return {
        set: jest.fn(),
        getString: jest.fn(),
        getNumber: jest.fn(),
        getBoolean: jest.fn(),
        contains: jest.fn(),
        delete: jest.fn(),
        clearAll: jest.fn(),
        getAllKeys: jest.fn(function () {
          return [];
        })
      };
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        dispatch: jest.fn(),
        setOptions: jest.fn(),
        isFocused: jest.fn(function () {
          return true;
        }),
        addListener: jest.fn(),
        removeListener: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        name: 'TestScreen',
        key: 'test-key'
      };
    },
    useFocusEffect: jest.fn(),
    useIsFocused: function useIsFocused() {
      return true;
    }
  });
});
_getJestObj().mock('react-redux', function () {
  return Object.assign({}, jest.requireActual('react-redux'), {
    useSelector: jest.fn(),
    useDispatch: function useDispatch() {
      return jest.fn();
    }
  });
});
_getJestObj().mock('react-native-device-info', function () {
  return {
    getUniqueId: jest.fn(function () {
      return Promise.resolve('test-device-id');
    }),
    getSystemName: jest.fn(function () {
      return 'iOS';
    }),
    getSystemVersion: jest.fn(function () {
      return '14.0';
    }),
    getModel: jest.fn(function () {
      return 'iPhone';
    }),
    getBrand: jest.fn(function () {
      return 'Apple';
    }),
    getDeviceId: jest.fn(function () {
      return 'test-device';
    }),
    isEmulator: jest.fn(function () {
      return Promise.resolve(true);
    }),
    hasNotch: jest.fn(function () {
      return false;
    }),
    hasDynamicIsland: jest.fn(function () {
      return false;
    })
  };
});
_getJestObj().mock('react-native-permissions', function () {
  return {
    PERMISSIONS: {
      IOS: {
        CAMERA: 'ios.permission.CAMERA',
        MICROPHONE: 'ios.permission.MICROPHONE',
        LOCATION_WHEN_IN_USE: 'ios.permission.LOCATION_WHEN_IN_USE'
      },
      ANDROID: {
        CAMERA: 'android.permission.CAMERA',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION'
      }
    },
    RESULTS: {
      GRANTED: 'granted',
      DENIED: 'denied',
      BLOCKED: 'blocked',
      UNAVAILABLE: 'unavailable'
    },
    check: jest.fn(function () {
      return Promise.resolve('granted');
    }),
    request: jest.fn(function () {
      return Promise.resolve('granted');
    }),
    requestMultiple: jest.fn(function () {
      return Promise.resolve({});
    })
  };
});
_getJestObj().mock('react-native-vision-camera', function () {
  return {
    Camera: 'Camera',
    useCameraDevices: jest.fn(function () {
      return {
        back: {
          id: 'back',
          position: 'back'
        },
        front: {
          id: 'front',
          position: 'front'
        }
      };
    }),
    useCameraFormat: jest.fn(),
    useFrameProcessor: jest.fn()
  };
});
_getJestObj().mock('react-native-voice', function () {
  return {
    default: {
      start: jest.fn(function () {
        return Promise.resolve();
      }),
      stop: jest.fn(function () {
        return Promise.resolve();
      }),
      cancel: jest.fn(function () {
        return Promise.resolve();
      }),
      destroy: jest.fn(function () {
        return Promise.resolve();
      }),
      removeAllListeners: jest.fn(),
      isAvailable: jest.fn(function () {
        return Promise.resolve(true);
      }),
      onSpeechStart: jest.fn(),
      onSpeechEnd: jest.fn(),
      onSpeechResults: jest.fn(),
      onSpeechError: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    fetch: jest.fn(function () {
      return Promise.resolve({
        type: 'wifi',
        isConnected: true,
        isInternetReachable: true
      });
    }),
    addEventListener: jest.fn(function () {
      return jest.fn();
    })
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-vector-icons/Ionicons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-vector-icons/FontAwesome', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: function Provider(_ref) {
      var children = _ref.children;
      return children;
    },
    DefaultTheme: {},
    configureFonts: jest.fn(),
    Button: 'Button',
    Text: 'Text',
    Card: 'Card',
    Surface: 'Surface',
    Portal: function Portal(_ref2) {
      var children = _ref2.children;
      return children;
    },
    Modal: 'Modal',
    Snackbar: 'Snackbar'
  };
});
_getJestObj().mock('react-native-chart-kit', function () {
  return {
    LineChart: 'LineChart',
    BarChart: 'BarChart',
    PieChart: 'PieChart',
    ProgressChart: 'ProgressChart',
    ContributionGraph: 'ContributionGraph'
  };
});
_getJestObj().mock('react-native-svg', function () {
  return {
    Svg: 'Svg',
    Circle: 'Circle',
    Ellipse: 'Ellipse',
    G: 'G',
    Text: 'Text',
    TSpan: 'TSpan',
    TextPath: 'TextPath',
    Path: 'Path',
    Polygon: 'Polygon',
    Polyline: 'Polyline',
    Line: 'Line',
    Rect: 'Rect',
    Use: 'Use',
    Image: 'Image',
    Symbol: 'Symbol',
    Defs: 'Defs',
    LinearGradient: 'LinearGradient',
    RadialGradient: 'RadialGradient',
    Stop: 'Stop',
    ClipPath: 'ClipPath',
    Pattern: 'Pattern',
    Mask: 'Mask'
  };
});
_getJestObj().mock('./components/common/Icon', function () {
  var React = require('react');
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    __esModule: true,
    default: function _default(_ref3) {
      var name = _ref3.name,
        size = _ref3.size,
        color = _ref3.color,
        style = _ref3.style,
        testID = _ref3.testID,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
      return React.createElement(Text, Object.assign({
        testID: testID || `icon-${name}`,
        style: [{
          fontSize: size || 24,
          color: color || '#000'
        }, style]
      }, props), name);
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    MaterialCommunityIcons: function MaterialCommunityIcons(_ref4) {
      var name = _ref4.name,
        size = _ref4.size,
        color = _ref4.color,
        style = _ref4.style,
        testID = _ref4.testID,
        props = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);
      var React = require('react');
      var _require2 = require('react-native'),
        Text = _require2.Text;
      return React.createElement(Text, Object.assign({
        testID: testID || `icon-${name}`,
        style: [{
          fontSize: size || 24,
          color: color || '#000'
        }, style]
      }, props), name);
    },
    Ionicons: function Ionicons(_ref5) {
      var name = _ref5.name,
        size = _ref5.size,
        color = _ref5.color,
        style = _ref5.style,
        testID = _ref5.testID,
        props = (0, _objectWithoutProperties2.default)(_ref5, _excluded3);
      var React = require('react');
      var _require3 = require('react-native'),
        Text = _require3.Text;
      return React.createElement(Text, Object.assign({
        testID: testID || `icon-${name}`,
        style: [{
          fontSize: size || 24,
          color: color || '#000'
        }, style]
      }, props), name);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
require("react-native-gesture-handler/jestSetup");
var _excluded = ["name", "size", "color", "style", "testID"],
  _excluded2 = ["name", "size", "color", "style", "testID"],
  _excluded3 = ["name", "size", "color", "style", "testID"];
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
if (!global.performance) {
  global.performance = {
    now: jest.fn(function () {
      return Date.now();
    }),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByName: jest.fn(function () {
      return [];
    }),
    getEntriesByType: jest.fn(function () {
      return [];
    }),
    clearMarks: jest.fn(),
    clearMeasures: jest.fn()
  };
}
if (typeof global.gc === 'undefined') {
  global.gc = jest.fn();
}
afterEach(function () {
  jest.clearAllMocks();
});
var originalError = console.error;
beforeAll(function () {
  console.error = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === 'string' && (args[0].includes('Warning: ReactDOM.render is deprecated') || args[0].includes('Warning: componentWillReceiveProps'))) {
      return;
    }
    originalError.call.apply(originalError, [console].concat(args));
  };
});
afterAll(function () {
  console.error = originalError;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,