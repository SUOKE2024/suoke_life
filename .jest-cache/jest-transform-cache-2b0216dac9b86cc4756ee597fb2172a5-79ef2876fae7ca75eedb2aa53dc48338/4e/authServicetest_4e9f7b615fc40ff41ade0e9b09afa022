db76259e61810274ed9af654f4962bd0
_getJestObj().mock('../../services/apiClient', function () {
  return {
    apiClient: {
      post: jest.fn(),
      get: jest.fn(),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock('../../utils/authUtils', function () {
  return {
    storeAuthTokens: jest.fn(),
    clearAuthTokens: jest.fn(),
    getAuthToken: jest.fn(),
    getRefreshToken: jest.fn(),
    getDeviceId: jest.fn().mockResolvedValue('mock-device-id')
  };
});
_getJestObj().mock('react-native', function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn(function () {
      return {
        post: jest.fn(),
        get: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        interceptors: {
          request: {
            use: jest.fn()
          },
          response: {
            use: jest.fn()
          }
        }
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = _interopRequireDefault(require("../../services/authService"));
var _apiClient = require("../../services/apiClient");
function _getJestObj() {
  var _require22 = require("@jest/globals"),
    jest = _require22.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApiClient = _apiClient.apiClient;
describe('AuthService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('登录功能', function () {
    it('应该成功登录用户', (0, _asyncToGenerator2.default)(function* () {
      var mockLoginResponse = {
        user: {
          id: 'user123',
          email: 'test@example.com',
          username: '测试用户'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token',
        expiresIn: 3600
      };
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockLoginResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(result).toEqual(mockLoginResponse);
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/login', {
        email: 'test@example.com',
        password: 'password123',
        deviceId: 'mock-device-id'
      });
    }));
    it('应该处理登录失败', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: false,
        error: {
          code: 'INVALID_CREDENTIALS',
          message: '用户名或密码错误'
        },
        timestamp: Date.now()
      });
      yield expect(_authService.default.login({
        email: 'test@example.com',
        password: 'wrongpassword'
      })).rejects.toThrow('用户名或密码错误');
    }));
  });
  describe('注册功能', function () {
    it('应该成功注册新用户', (0, _asyncToGenerator2.default)(function* () {
      var mockRegisterResponse = {
        user: {
          id: 'user123',
          email: 'newuser@example.com',
          username: '新用户'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token',
        expiresIn: 3600
      };
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockRegisterResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.register({
        username: '新用户',
        email: 'newuser@example.com',
        password: 'password123'
      });
      expect(result).toEqual(mockRegisterResponse);
    }));
  });
  describe('令牌管理', function () {
    it('应该成功刷新令牌', (0, _asyncToGenerator2.default)(function* () {
      var mockRefreshResponse = {
        accessToken: 'new-access-token',
        refreshToken: 'new-refresh-token',
        expiresIn: 3600
      };
      var _require = require('../../utils/authUtils'),
        getRefreshToken = _require.getRefreshToken;
      getRefreshToken.mockResolvedValue('old-refresh-token');
      mockApiClient.post.mockResolvedValue({
        success: true,
        data: mockRefreshResponse,
        timestamp: Date.now()
      });
      var result = yield _authService.default.refreshAccessToken();
      expect(result).toEqual(mockRefreshResponse);
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/refresh', {
        refreshToken: 'old-refresh-token'
      });
    }));
  });
  describe('用户信息管理', function () {
    it('应该获取当前用户信息', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        username: '测试用户'
      };
      mockApiClient.get.mockResolvedValue({
        success: true,
        data: mockUser,
        timestamp: Date.now()
      });
      var result = yield _authService.default.getCurrentUser();
      expect(result).toEqual(mockUser);
      expect(mockApiClient.get).toHaveBeenCalledWith('/auth/me');
    }));
  });
  describe('密码管理', function () {
    it('应该成功修改密码', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.changePassword('oldPassword', 'newPassword')).resolves.not.toThrow();
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/change-password', {
        oldPassword: 'oldPassword',
        newPassword: 'newPassword'
      });
    }));
    it('应该成功重置密码', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.resetPassword({
        email: 'test@example.com',
        code: '123456',
        newPassword: 'newPassword'
      })).resolves.not.toThrow();
    }));
  });
  describe('登出功能', function () {
    it('应该成功登出用户', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.post.mockResolvedValue({
        success: true,
        timestamp: Date.now()
      });
      yield expect(_authService.default.logout()).resolves.not.toThrow();
      expect(mockApiClient.post).toHaveBeenCalledWith('/auth/logout');
    }));
  });
  describe('login', function () {
    it('should login successfully with valid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: {
            id: '1',
            email: 'test@example.com',
            username: 'testuser'
          },
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
          expiresIn: 3600
        }
      };
      var _require2 = require('../../services/apiClient'),
        apiClient = _require2.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var credentials = {
        email: 'test@example.com',
        password: 'password'
      };
      var result = yield _authService.default.login(credentials);
      expect(apiClient.post).toHaveBeenCalledWith('/auth/login', Object.assign({}, credentials, {
        deviceId: 'mock-device-id'
      }));
      expect(result).toEqual(mockResponse.data);
    }));
    it('should throw error for invalid credentials', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: {
          message: 'Invalid credentials'
        }
      };
      var _require3 = require('../../services/apiClient'),
        apiClient = _require3.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var credentials = {
        email: 'invalid@example.com',
        password: 'wrongpassword'
      };
      yield expect(_authService.default.login(credentials)).rejects.toThrow('Invalid credentials');
    }));
    it('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      var _require4 = require('../../services/apiClient'),
        apiClient = _require4.apiClient;
      apiClient.post.mockRejectedValue(new Error('Network Error'));
      var credentials = {
        email: 'test@example.com',
        password: 'password'
      };
      yield expect(_authService.default.login(credentials)).rejects.toThrow('Network Error');
    }));
  });
  describe('register', function () {
    it('should register successfully with valid data', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          user: {
            id: '1',
            email: 'newuser@example.com',
            username: 'newuser'
          },
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
          expiresIn: 3600
        }
      };
      var _require5 = require('../../services/apiClient'),
        apiClient = _require5.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var userData = {
        username: 'newuser',
        email: 'newuser@example.com',
        password: 'password123'
      };
      var result = yield _authService.default.register(userData);
      expect(apiClient.post).toHaveBeenCalledWith('/auth/register', Object.assign({}, userData, {
        deviceId: 'mock-device-id'
      }));
      expect(result).toEqual(mockResponse.data);
    }));
    it('should throw error for duplicate email', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: {
          message: 'Email already exists'
        }
      };
      var _require6 = require('../../services/apiClient'),
        apiClient = _require6.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var userData = {
        username: 'existinguser',
        email: 'existing@example.com',
        password: 'password123'
      };
      yield expect(_authService.default.register(userData)).rejects.toThrow('Email already exists');
    }));
  });
  describe('logout', function () {
    it('should logout successfully', (0, _asyncToGenerator2.default)(function* () {
      var _require7 = require('../../services/apiClient'),
        apiClient = _require7.apiClient;
      apiClient.post.mockResolvedValue({
        success: true
      });
      yield _authService.default.logout();
      expect(apiClient.post).toHaveBeenCalledWith('/auth/logout');
    }));
    it('should clear local tokens even if server logout fails', (0, _asyncToGenerator2.default)(function* () {
      var _require8 = require('../../services/apiClient'),
        apiClient = _require8.apiClient;
      var _require9 = require('../../utils/authUtils'),
        clearAuthTokens = _require9.clearAuthTokens;
      apiClient.post.mockRejectedValue(new Error('Server error'));
      yield _authService.default.logout();
      expect(clearAuthTokens).toHaveBeenCalled();
    }));
  });
  describe('getCurrentUser', function () {
    it('should return current user data', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: '1',
        email: 'test@example.com',
        username: 'testuser'
      };
      var mockResponse = {
        success: true,
        data: mockUser
      };
      var _require0 = require('../../services/apiClient'),
        apiClient = _require0.apiClient;
      apiClient.get.mockResolvedValue(mockResponse);
      var result = yield _authService.default.getCurrentUser();
      expect(apiClient.get).toHaveBeenCalledWith('/auth/me');
      expect(result).toEqual(mockUser);
    }));
    it('should handle unauthorized access', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: {
          message: 'Unauthorized'
        }
      };
      var _require1 = require('../../services/apiClient'),
        apiClient = _require1.apiClient;
      apiClient.get.mockResolvedValue(mockResponse);
      yield expect(_authService.default.getCurrentUser()).rejects.toThrow('Unauthorized');
    }));
  });
  describe('refreshAccessToken', function () {
    it('should refresh token successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          accessToken: 'new-access-token',
          refreshToken: 'new-refresh-token',
          expiresIn: 3600
        }
      };
      var _require10 = require('../../services/apiClient'),
        apiClient = _require10.apiClient;
      var _require11 = require('../../utils/authUtils'),
        getRefreshToken = _require11.getRefreshToken;
      getRefreshToken.mockResolvedValue('old-refresh-token');
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _authService.default.refreshAccessToken();
      expect(apiClient.post).toHaveBeenCalledWith('/auth/refresh', {
        refreshToken: 'old-refresh-token'
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should handle missing refresh token', (0, _asyncToGenerator2.default)(function* () {
      var _require12 = require('../../utils/authUtils'),
        getRefreshToken = _require12.getRefreshToken;
      getRefreshToken.mockResolvedValue(null);
      yield expect(_authService.default.refreshAccessToken()).rejects.toThrow('No refresh token available');
    }));
  });
  describe('forgotPassword', function () {
    it('should send password reset email', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true
      };
      var _require13 = require('../../services/apiClient'),
        apiClient = _require13.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var request = {
        email: 'test@example.com'
      };
      yield _authService.default.forgotPassword(request);
      expect(apiClient.post).toHaveBeenCalledWith('/auth/forgot-password', request);
    }));
    it('should handle non-existent email', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: {
          message: 'Email not found'
        }
      };
      var _require14 = require('../../services/apiClient'),
        apiClient = _require14.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var request = {
        email: 'nonexistent@example.com'
      };
      yield expect(_authService.default.forgotPassword(request)).rejects.toThrow('Email not found');
    }));
  });
  describe('resetPassword', function () {
    it('should reset password successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          message: 'Password reset successful'
        }
      };
      var mockPost = jest.fn().mockResolvedValue(mockResponse);
      _authService.default.api.post = mockPost;
      var result = yield _authService.default.resetPassword('reset-token', 'newpassword123');
      expect(mockPost).toHaveBeenCalledWith('/auth/reset-password', {
        token: 'reset-token',
        password: 'newpassword123'
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should handle invalid reset token', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Invalid or expired token');
      var mockPost = jest.fn().mockRejectedValue(mockError);
      _authService.default.api.post = mockPost;
      yield expect(_authService.default.resetPassword('invalid-token', 'newpassword123')).rejects.toThrow('Invalid or expired token');
    }));
  });
  describe('validateToken', function () {
    it('should validate token successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          valid: true
        }
      };
      var mockPost = jest.fn().mockResolvedValue(mockResponse);
      _authService.default.api.post = mockPost;
      var result = yield _authService.default.validateToken('valid-token');
      expect(mockPost).toHaveBeenCalledWith('/auth/validate', {
        token: 'valid-token'
      });
      expect(result).toBe(true);
    }));
    it('should return false for invalid token', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Invalid token');
      var mockPost = jest.fn().mockRejectedValue(mockError);
      _authService.default.api.post = mockPost;
      var result = yield _authService.default.validateToken('invalid-token');
      expect(result).toBe(false);
    }));
  });
  describe('updateProfile', function () {
    it('should update user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          id: '1',
          email: 'test@example.com',
          name: 'Updated Name',
          avatar: 'new-avatar-url'
        }
      };
      var mockPut = jest.fn().mockResolvedValue(mockResponse);
      _authService.default.api.put = mockPut;
      var updateData = {
        name: 'Updated Name',
        avatar: 'new-avatar-url'
      };
      var result = yield _authService.default.updateProfile(updateData);
      expect(mockPut).toHaveBeenCalledWith('/auth/profile', updateData);
      expect(result).toEqual(mockResponse.data);
    }));
    it('should handle profile update errors', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Update failed');
      var mockPut = jest.fn().mockRejectedValue(mockError);
      _authService.default.api.put = mockPut;
      var updateData = {
        name: 'Updated Name'
      };
      yield expect(_authService.default.updateProfile(updateData)).rejects.toThrow('Update failed');
    }));
  });
  describe('changePassword', function () {
    it('should change password successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true
      };
      var _require15 = require('../../services/apiClient'),
        apiClient = _require15.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      yield _authService.default.changePassword('oldpassword', 'newpassword123');
      expect(apiClient.post).toHaveBeenCalledWith('/auth/change-password', {
        oldPassword: 'oldpassword',
        newPassword: 'newpassword123'
      });
    }));
    it('should handle incorrect old password', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: {
          message: 'Incorrect old password'
        }
      };
      var _require16 = require('../../services/apiClient'),
        apiClient = _require16.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      yield expect(_authService.default.changePassword('wrongpassword', 'newpassword123')).rejects.toThrow('Incorrect old password');
    }));
  });
  describe('checkEmailExists', function () {
    it('should return true for existing email', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          exists: true
        }
      };
      var _require17 = require('../../services/apiClient'),
        apiClient = _require17.apiClient;
      apiClient.get.mockResolvedValue(mockResponse);
      var result = yield _authService.default.checkEmailExists('existing@example.com');
      expect(result).toBe(true);
      expect(apiClient.get).toHaveBeenCalledWith('/auth/check-email/existing@example.com');
    }));
    it('should return false for non-existent email', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          exists: false
        }
      };
      var _require18 = require('../../services/apiClient'),
        apiClient = _require18.apiClient;
      apiClient.get.mockResolvedValue(mockResponse);
      var result = yield _authService.default.checkEmailExists('new@example.com');
      expect(result).toBe(false);
    }));
  });
  describe('checkAuthStatus', function () {
    it('should return true for valid authentication', (0, _asyncToGenerator2.default)(function* () {
      var _require19 = require('../../utils/authUtils'),
        getAuthToken = _require19.getAuthToken;
      var _require20 = require('../../services/apiClient'),
        apiClient = _require20.apiClient;
      getAuthToken.mockResolvedValue('valid-token');
      apiClient.get.mockResolvedValue({
        success: true
      });
      var result = yield _authService.default.checkAuthStatus();
      expect(result).toBe(true);
    }));
    it('should return false for invalid authentication', (0, _asyncToGenerator2.default)(function* () {
      var _require21 = require('../../utils/authUtils'),
        getAuthToken = _require21.getAuthToken;
      getAuthToken.mockResolvedValue(null);
      var result = yield _authService.default.checkAuthStatus();
      expect(result).toBe(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhcGlDbGllbnQiLCJwb3N0IiwiamVzdCIsImZuIiwiZ2V0IiwicHV0IiwiZGVsZXRlIiwic3RvcmVBdXRoVG9rZW5zIiwiY2xlYXJBdXRoVG9rZW5zIiwiZ2V0QXV0aFRva2VuIiwiZ2V0UmVmcmVzaFRva2VuIiwiZ2V0RGV2aWNlSWQiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIkFsZXJ0IiwiYWxlcnQiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImNyZWF0ZSIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJyZXNwb25zZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2F1dGhTZXJ2aWNlIiwiX2FwaUNsaWVudCIsIl9yZXF1aXJlMjIiLCJtb2NrQXBpQ2xpZW50IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiZGVmYXVsdCIsIm1vY2tMb2dpblJlc3BvbnNlIiwidXNlciIsImlkIiwiZW1haWwiLCJ1c2VybmFtZSIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwiZXhwaXJlc0luIiwic3VjY2VzcyIsImRhdGEiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwicmVzdWx0IiwiYXV0aFNlcnZpY2UiLCJsb2dpbiIsInBhc3N3b3JkIiwiZXhwZWN0IiwidG9FcXVhbCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiZGV2aWNlSWQiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwicmVqZWN0cyIsInRvVGhyb3ciLCJtb2NrUmVnaXN0ZXJSZXNwb25zZSIsInJlZ2lzdGVyIiwibW9ja1JlZnJlc2hSZXNwb25zZSIsIl9yZXF1aXJlIiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwibW9ja1VzZXIiLCJnZXRDdXJyZW50VXNlciIsImNoYW5nZVBhc3N3b3JkIiwicmVzb2x2ZXMiLCJub3QiLCJvbGRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwicmVzZXRQYXNzd29yZCIsImxvZ291dCIsIm1vY2tSZXNwb25zZSIsIl9yZXF1aXJlMiIsImNyZWRlbnRpYWxzIiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcXVpcmUzIiwiX3JlcXVpcmU0IiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsIl9yZXF1aXJlNSIsInVzZXJEYXRhIiwiX3JlcXVpcmU2IiwiX3JlcXVpcmU3IiwiX3JlcXVpcmU4IiwiX3JlcXVpcmU5IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZXF1aXJlMCIsIl9yZXF1aXJlMSIsIl9yZXF1aXJlMTAiLCJfcmVxdWlyZTExIiwiX3JlcXVpcmUxMiIsIl9yZXF1aXJlMTMiLCJmb3Jnb3RQYXNzd29yZCIsIl9yZXF1aXJlMTQiLCJtb2NrUG9zdCIsImFwaSIsInRva2VuIiwibW9ja0Vycm9yIiwidmFsaWQiLCJ2YWxpZGF0ZVRva2VuIiwidG9CZSIsIm5hbWUiLCJhdmF0YXIiLCJtb2NrUHV0IiwidXBkYXRlRGF0YSIsInVwZGF0ZVByb2ZpbGUiLCJfcmVxdWlyZTE1IiwiX3JlcXVpcmUxNiIsImV4aXN0cyIsIl9yZXF1aXJlMTciLCJjaGVja0VtYWlsRXhpc3RzIiwiX3JlcXVpcmUxOCIsIl9yZXF1aXJlMTkiLCJfcmVxdWlyZTIwIiwiY2hlY2tBdXRoU3RhdHVzIiwiX3JlcXVpcmUyMSJdLCJzb3VyY2VzIjpbImF1dGhTZXJ2aWNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxlcnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IGF1dGhTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2F1dGhTZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luUmVxdWVzdCwgUmVnaXN0ZXJSZXF1ZXN0LCBGb3Jnb3RQYXNzd29yZFJlcXVlc3QgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdXRoU2VydmljZSc7XG5cbi8vIE1vY2sgYXBpQ2xpZW50XG5qZXN0Lm1vY2soJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcsICgpID0+ICh7XG4gIGFwaUNsaWVudDoge1xuICAgIHBvc3Q6IGplc3QuZm4oKSxcbiAgICBnZXQ6IGplc3QuZm4oKSxcbiAgICBwdXQ6IGplc3QuZm4oKSxcbiAgICBkZWxldGU6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBhdXRoVXRpbHNcbmplc3QubW9jaygnLi4vLi4vdXRpbHMvYXV0aFV0aWxzJywgKCkgPT4gKHtcbiAgc3RvcmVBdXRoVG9rZW5zOiBqZXN0LmZuKCksXG4gIGNsZWFyQXV0aFRva2VuczogamVzdC5mbigpLFxuICBnZXRBdXRoVG9rZW46IGplc3QuZm4oKSxcbiAgZ2V0UmVmcmVzaFRva2VuOiBqZXN0LmZuKCksXG4gIGdldERldmljZUlkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ21vY2stZGV2aWNlLWlkJyksXG59KSk7XG5cbi8vIE1vY2sgQWxlcnRcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4gKHtcbiAgQWxlcnQ6IHtcbiAgICBhbGVydDogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG5pbXBvcnQgeyBhcGlDbGllbnQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnO1xuXG5jb25zdCBtb2NrQXBpQ2xpZW50ID0gYXBpQ2xpZW50IGFzIGplc3QuTW9ja2VkPHR5cGVvZiBhcGlDbGllbnQ+O1xuXG4vLyBNb2NrIEFzeW5jU3RvcmFnZVxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XG4gIGdldEl0ZW06IGplc3QuZm4oKSxcbiAgc2V0SXRlbTogamVzdC5mbigpLFxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXG4gIGNsZWFyOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgYXhpb3Ncbmplc3QubW9jaygnYXhpb3MnLCAoKSA9PiAoe1xuICBjcmVhdGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBwb3N0OiBqZXN0LmZuKCksXG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgcHV0OiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgaW50ZXJjZXB0b3JzOiB7XG4gICAgICByZXF1ZXN0OiB7IHVzZTogamVzdC5mbigpIH0sXG4gICAgICByZXNwb25zZTogeyB1c2U6IGplc3QuZm4oKSB9LFxuICAgIH0sXG4gIH0pKSxcbn0pKTtcblxuZGVzY3JpYmUoJ0F1dGhTZXJ2aWNlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+eZu+W9leWKn+iDvScsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l5oiQ5Yqf55m75b2V55So5oi3JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xvZ2luUmVzcG9uc2UgPSB7XG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBpZDogJ3VzZXIxMjMnLFxuICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgdXNlcm5hbWU6ICfmtYvor5XnlKjmiLcnLFxuICAgICAgICB9LFxuICAgICAgICBhY2Nlc3NUb2tlbjogJ21vY2stYWNjZXNzLXRva2VuJyxcbiAgICAgICAgcmVmcmVzaFRva2VuOiAnbW9jay1yZWZyZXNoLXRva2VuJyxcbiAgICAgICAgZXhwaXJlc0luOiAzNjAwLFxuICAgICAgfTtcblxuICAgICAgbW9ja0FwaUNsaWVudC5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogbW9ja0xvZ2luUmVzcG9uc2UsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5sb2dpbih7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0xvZ2luUmVzcG9uc2UpO1xuICAgICAgZXhwZWN0KG1vY2tBcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2xvZ2luJywge1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgICAgZGV2aWNlSWQ6ICdtb2NrLWRldmljZS1pZCcsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6XlpITnkIbnmbvlvZXlpLHotKUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9DUkVERU5USUFMUycsXG4gICAgICAgICAgbWVzc2FnZTogJ+eUqOaIt+WQjeaIluWvhueggemUmeivrycsXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UubG9naW4oe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3dyb25ncGFzc3dvcmQnLFxuICAgICAgfSkpLnJlamVjdHMudG9UaHJvdygn55So5oi35ZCN5oiW5a+G56CB6ZSZ6K+vJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfms6jlhozlip/og70nLCAoKSA9PiB7XG4gICAgaXQoJ+W6lOivpeaIkOWKn+azqOWGjOaWsOeUqOaItycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZWdpc3RlclJlc3BvbnNlID0ge1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6ICd1c2VyMTIzJyxcbiAgICAgICAgICBlbWFpbDogJ25ld3VzZXJAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHVzZXJuYW1lOiAn5paw55So5oi3JyxcbiAgICAgICAgfSxcbiAgICAgICAgYWNjZXNzVG9rZW46ICdtb2NrLWFjY2Vzcy10b2tlbicsXG4gICAgICAgIHJlZnJlc2hUb2tlbjogJ21vY2stcmVmcmVzaC10b2tlbicsXG4gICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tBcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IG1vY2tSZWdpc3RlclJlc3BvbnNlLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UucmVnaXN0ZXIoe1xuICAgICAgICB1c2VybmFtZTogJ+aWsOeUqOaItycsXG4gICAgICAgIGVtYWlsOiAnbmV3dXNlckBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1JlZ2lzdGVyUmVzcG9uc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5Luk54mM566h55CGJywgKCkgPT4ge1xuICAgIGl0KCflupTor6XmiJDlip/liLfmlrDku6TniYwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVmcmVzaFJlc3BvbnNlID0ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogJ25ldy1hY2Nlc3MtdG9rZW4nLFxuICAgICAgICByZWZyZXNoVG9rZW46ICduZXctcmVmcmVzaC10b2tlbicsXG4gICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgZ2V0UmVmcmVzaFRva2VuXG4gICAgICBjb25zdCB7IGdldFJlZnJlc2hUb2tlbiB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYXV0aFV0aWxzJyk7XG4gICAgICBnZXRSZWZyZXNoVG9rZW4ubW9ja1Jlc29sdmVkVmFsdWUoJ29sZC1yZWZyZXNoLXRva2VuJyk7XG5cbiAgICAgIG1vY2tBcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IG1vY2tSZWZyZXNoUmVzcG9uc2UsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUmVmcmVzaFJlc3BvbnNlKTtcbiAgICAgIGV4cGVjdChtb2NrQXBpQ2xpZW50LnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9yZWZyZXNoJywge1xuICAgICAgICByZWZyZXNoVG9rZW46ICdvbGQtcmVmcmVzaC10b2tlbicsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+eUqOaIt+S/oeaBr+euoeeQhicsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6I635Y+W5b2T5YmN55So5oi35L+h5oGvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAndXNlcjEyMycsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHVzZXJuYW1lOiAn5rWL6K+V55So5oi3JyxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tBcGlDbGllbnQuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogbW9ja1VzZXIsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5nZXRDdXJyZW50VXNlcigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tVc2VyKTtcbiAgICAgIGV4cGVjdChtb2NrQXBpQ2xpZW50LmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL21lJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCflr4bnoIHnrqHnkIYnLCAoKSA9PiB7XG4gICAgaXQoJ+W6lOivpeaIkOWKn+S/ruaUueWvhueggScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UuY2hhbmdlUGFzc3dvcmQoJ29sZFBhc3N3b3JkJywgJ25ld1Bhc3N3b3JkJykpLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG5cbiAgICAgIGV4cGVjdChtb2NrQXBpQ2xpZW50LnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9jaGFuZ2UtcGFzc3dvcmQnLCB7XG4gICAgICAgIG9sZFBhc3N3b3JkOiAnb2xkUGFzc3dvcmQnLFxuICAgICAgICBuZXdQYXNzd29yZDogJ25ld1Bhc3N3b3JkJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeaIkOWKn+mHjee9ruWvhueggScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoYXV0aFNlcnZpY2UucmVzZXRQYXNzd29yZCh7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIGNvZGU6ICcxMjM0NTYnLFxuICAgICAgICBuZXdQYXNzd29yZDogJ25ld1Bhc3N3b3JkJyxcbiAgICAgIH0pKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn55m75Ye65Yqf6IO9JywgKCkgPT4ge1xuICAgIGl0KCflupTor6XmiJDlip/nmbvlh7rnlKjmiLcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLmxvZ291dCgpKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuXG4gICAgICBleHBlY3QobW9ja0FwaUNsaWVudC5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2F1dGgvbG9nb3V0Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdsb2dpbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGxvZ2luIHN1Y2Nlc3NmdWxseSB3aXRoIHZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgICB1c2VybmFtZTogJ3Rlc3R1c2VyJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjY2Vzc1Rva2VuOiAnbW9jay1hY2Nlc3MtdG9rZW4nLFxuICAgICAgICAgIHJlZnJlc2hUb2tlbjogJ21vY2stcmVmcmVzaC10b2tlbicsXG4gICAgICAgICAgZXhwaXJlc0luOiAzNjAwLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBhcGlDbGllbnQgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcpO1xuICAgICAgYXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgY3JlZGVudGlhbHM6IExvZ2luUmVxdWVzdCA9IHtcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5sb2dpbihjcmVkZW50aWFscyk7XG5cbiAgICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2xvZ2luJywge1xuICAgICAgICAuLi5jcmVkZW50aWFscyxcbiAgICAgICAgZGV2aWNlSWQ6ICdtb2NrLWRldmljZS1pZCcsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlLmRhdGEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBmb3IgaW52YWxpZCBjcmVkZW50aWFscycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7IG1lc3NhZ2U6ICdJbnZhbGlkIGNyZWRlbnRpYWxzJyB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBhcGlDbGllbnQgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcpO1xuICAgICAgYXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgY3JlZGVudGlhbHM6IExvZ2luUmVxdWVzdCA9IHtcbiAgICAgICAgZW1haWw6ICdpbnZhbGlkQGV4YW1wbGUuY29tJyxcbiAgICAgICAgcGFzc3dvcmQ6ICd3cm9uZ3Bhc3N3b3JkJyxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5sb2dpbihjcmVkZW50aWFscykpLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCBjcmVkZW50aWFscycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGFwaUNsaWVudCB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvYXBpQ2xpZW50Jyk7XG4gICAgICBhcGlDbGllbnQucG9zdC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgRXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBMb2dpblJlcXVlc3QgPSB7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQnLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLmxvZ2luKGNyZWRlbnRpYWxzKSkucmVqZWN0cy50b1Rocm93KCdOZXR3b3JrIEVycm9yJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZWdpc3RlcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlZ2lzdGVyIHN1Y2Nlc3NmdWxseSB3aXRoIHZhbGlkIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICBpZDogJzEnLFxuICAgICAgICAgICAgZW1haWw6ICduZXd1c2VyQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICAgIHVzZXJuYW1lOiAnbmV3dXNlcicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhY2Nlc3NUb2tlbjogJ21vY2stYWNjZXNzLXRva2VuJyxcbiAgICAgICAgICByZWZyZXNoVG9rZW46ICdtb2NrLXJlZnJlc2gtdG9rZW4nLFxuICAgICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHVzZXJEYXRhOiBSZWdpc3RlclJlcXVlc3QgPSB7XG4gICAgICAgIHVzZXJuYW1lOiAnbmV3dXNlcicsXG4gICAgICAgIGVtYWlsOiAnbmV3dXNlckBleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UucmVnaXN0ZXIodXNlckRhdGEpO1xuXG4gICAgICBleHBlY3QoYXBpQ2xpZW50LnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9yZWdpc3RlcicsIHtcbiAgICAgICAgLi4udXNlckRhdGEsXG4gICAgICAgIGRldmljZUlkOiAnbW9jay1kZXZpY2UtaWQnLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZS5kYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGR1cGxpY2F0ZSBlbWFpbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiB7IG1lc3NhZ2U6ICdFbWFpbCBhbHJlYWR5IGV4aXN0cycgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHVzZXJEYXRhOiBSZWdpc3RlclJlcXVlc3QgPSB7XG4gICAgICAgIHVzZXJuYW1lOiAnZXhpc3Rpbmd1c2VyJyxcbiAgICAgICAgZW1haWw6ICdleGlzdGluZ0BleGFtcGxlLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLnJlZ2lzdGVyKHVzZXJEYXRhKSkucmVqZWN0cy50b1Rocm93KCdFbWFpbCBhbHJlYWR5IGV4aXN0cycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnbG9nb3V0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbG9nb3V0IHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KTtcblxuICAgICAgYXdhaXQgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG5cbiAgICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2xvZ291dCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjbGVhciBsb2NhbCB0b2tlbnMgZXZlbiBpZiBzZXJ2ZXIgbG9nb3V0IGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBhcGlDbGllbnQgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcpO1xuICAgICAgY29uc3QgeyBjbGVhckF1dGhUb2tlbnMgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2F1dGhVdGlscycpO1xuICAgICAgXG4gICAgICBhcGlDbGllbnQucG9zdC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1NlcnZlciBlcnJvcicpKTtcblxuICAgICAgYXdhaXQgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG5cbiAgICAgIGV4cGVjdChjbGVhckF1dGhUb2tlbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEN1cnJlbnRVc2VyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGN1cnJlbnQgdXNlciBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHVzZXJuYW1lOiAndGVzdHVzZXInLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiBtb2NrVXNlcixcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5nZXQubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UuZ2V0Q3VycmVudFVzZXIoKTtcblxuICAgICAgZXhwZWN0KGFwaUNsaWVudC5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9tZScpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrVXNlcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB1bmF1dGhvcml6ZWQgYWNjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHsgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5nZXQubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLmdldEN1cnJlbnRVc2VyKCkpLnJlamVjdHMudG9UaHJvdygnVW5hdXRob3JpemVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZWZyZXNoQWNjZXNzVG9rZW4nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZWZyZXNoIHRva2VuIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFjY2Vzc1Rva2VuOiAnbmV3LWFjY2Vzcy10b2tlbicsXG4gICAgICAgICAgcmVmcmVzaFRva2VuOiAnbmV3LXJlZnJlc2gtdG9rZW4nLFxuICAgICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGNvbnN0IHsgZ2V0UmVmcmVzaFRva2VuIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hdXRoVXRpbHMnKTtcbiAgICAgIFxuICAgICAgZ2V0UmVmcmVzaFRva2VuLm1vY2tSZXNvbHZlZFZhbHVlKCdvbGQtcmVmcmVzaC10b2tlbicpO1xuICAgICAgYXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UucmVmcmVzaEFjY2Vzc1Rva2VuKCk7XG5cbiAgICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3JlZnJlc2gnLCB7XG4gICAgICAgIHJlZnJlc2hUb2tlbjogJ29sZC1yZWZyZXNoLXRva2VuJyxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUmVzcG9uc2UuZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIHJlZnJlc2ggdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldFJlZnJlc2hUb2tlbiB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYXV0aFV0aWxzJyk7XG4gICAgICBnZXRSZWZyZXNoVG9rZW4ubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5yZWZyZXNoQWNjZXNzVG9rZW4oKSkucmVqZWN0cy50b1Rocm93KCdObyByZWZyZXNoIHRva2VuIGF2YWlsYWJsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZm9yZ290UGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzZW5kIHBhc3N3b3JkIHJlc2V0IGVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICBjb25zdCB7IGFwaUNsaWVudCB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvYXBpQ2xpZW50Jyk7XG4gICAgICBhcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0OiBGb3Jnb3RQYXNzd29yZFJlcXVlc3QgPSB7XG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBhdXRoU2VydmljZS5mb3Jnb3RQYXNzd29yZChyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KGFwaUNsaWVudC5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2F1dGgvZm9yZ290LXBhc3N3b3JkJywgcmVxdWVzdCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBub24tZXhpc3RlbnQgZW1haWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogeyBtZXNzYWdlOiAnRW1haWwgbm90IGZvdW5kJyB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBhcGlDbGllbnQgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcpO1xuICAgICAgYXBpQ2xpZW50LnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogRm9yZ290UGFzc3dvcmRSZXF1ZXN0ID0ge1xuICAgICAgICBlbWFpbDogJ25vbmV4aXN0ZW50QGV4YW1wbGUuY29tJyxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChhdXRoU2VydmljZS5mb3Jnb3RQYXNzd29yZChyZXF1ZXN0KSkucmVqZWN0cy50b1Rocm93KCdFbWFpbCBub3QgZm91bmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Jlc2V0UGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXNldCBwYXNzd29yZCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7IGRhdGE6IHsgbWVzc2FnZTogJ1Bhc3N3b3JkIHJlc2V0IHN1Y2Nlc3NmdWwnIH0gfTtcbiAgICAgIGNvbnN0IG1vY2tQb3N0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG4gICAgICAoYXV0aFNlcnZpY2UgYXMgYW55KS5hcGkucG9zdCA9IG1vY2tQb3N0O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5yZXNldFBhc3N3b3JkKFxuICAgICAgICAncmVzZXQtdG9rZW4nLFxuICAgICAgICAnbmV3cGFzc3dvcmQxMjMnXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1Bvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9yZXNldC1wYXNzd29yZCcsIHtcbiAgICAgICAgdG9rZW46ICdyZXNldC10b2tlbicsXG4gICAgICAgIHBhc3N3b3JkOiAnbmV3cGFzc3dvcmQxMjMnLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZS5kYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgcmVzZXQgdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRXJyb3IgPSBuZXcgRXJyb3IoJ0ludmFsaWQgb3IgZXhwaXJlZCB0b2tlbicpO1xuICAgICAgY29uc3QgbW9ja1Bvc3QgPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUobW9ja0Vycm9yKTtcbiAgICAgIChhdXRoU2VydmljZSBhcyBhbnkpLmFwaS5wb3N0ID0gbW9ja1Bvc3Q7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgYXV0aFNlcnZpY2UucmVzZXRQYXNzd29yZCgnaW52YWxpZC10b2tlbicsICduZXdwYXNzd29yZDEyMycpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCBvciBleHBpcmVkIHRva2VuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZVRva2VuJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdG9rZW4gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0geyBkYXRhOiB7IHZhbGlkOiB0cnVlIH0gfTtcbiAgICAgIGNvbnN0IG1vY2tQb3N0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG4gICAgICAoYXV0aFNlcnZpY2UgYXMgYW55KS5hcGkucG9zdCA9IG1vY2tQb3N0O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS52YWxpZGF0ZVRva2VuKCd2YWxpZC10b2tlbicpO1xuXG4gICAgICBleHBlY3QobW9ja1Bvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC92YWxpZGF0ZScsIHtcbiAgICAgICAgdG9rZW46ICd2YWxpZC10b2tlbicsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmb3IgaW52YWxpZCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbicpO1xuICAgICAgY29uc3QgbW9ja1Bvc3QgPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUobW9ja0Vycm9yKTtcbiAgICAgIChhdXRoU2VydmljZSBhcyBhbnkpLmFwaS5wb3N0ID0gbW9ja1Bvc3Q7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dGhTZXJ2aWNlLnZhbGlkYXRlVG9rZW4oJ2ludmFsaWQtdG9rZW4nKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1cGRhdGVQcm9maWxlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIHVzZXIgcHJvZmlsZSBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBpZDogJzEnLFxuICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgbmFtZTogJ1VwZGF0ZWQgTmFtZScsXG4gICAgICAgICAgYXZhdGFyOiAnbmV3LWF2YXRhci11cmwnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1B1dCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzcG9uc2UpO1xuICAgICAgKGF1dGhTZXJ2aWNlIGFzIGFueSkuYXBpLnB1dCA9IG1vY2tQdXQ7XG5cbiAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAgICAgIG5hbWU6ICdVcGRhdGVkIE5hbWUnLFxuICAgICAgICBhdmF0YXI6ICduZXctYXZhdGFyLXVybCcsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS51cGRhdGVQcm9maWxlKHVwZGF0ZURhdGEpO1xuXG4gICAgICBleHBlY3QobW9ja1B1dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3Byb2ZpbGUnLCB1cGRhdGVEYXRhKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlLmRhdGEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcHJvZmlsZSB1cGRhdGUgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0Vycm9yID0gbmV3IEVycm9yKCdVcGRhdGUgZmFpbGVkJyk7XG4gICAgICBjb25zdCBtb2NrUHV0ID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKG1vY2tFcnJvcik7XG4gICAgICAoYXV0aFNlcnZpY2UgYXMgYW55KS5hcGkucHV0ID0gbW9ja1B1dDtcblxuICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHsgbmFtZTogJ1VwZGF0ZWQgTmFtZScgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGF1dGhTZXJ2aWNlLnVwZGF0ZVByb2ZpbGUodXBkYXRlRGF0YSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ1VwZGF0ZSBmYWlsZWQnXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2hhbmdlUGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjaGFuZ2UgcGFzc3dvcmQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICBjb25zdCB7IGFwaUNsaWVudCB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvYXBpQ2xpZW50Jyk7XG4gICAgICBhcGlDbGllbnQucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBhd2FpdCBhdXRoU2VydmljZS5jaGFuZ2VQYXNzd29yZCgnb2xkcGFzc3dvcmQnLCAnbmV3cGFzc3dvcmQxMjMnKTtcblxuICAgICAgZXhwZWN0KGFwaUNsaWVudC5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2F1dGgvY2hhbmdlLXBhc3N3b3JkJywge1xuICAgICAgICBvbGRQYXNzd29yZDogJ29sZHBhc3N3b3JkJyxcbiAgICAgICAgbmV3UGFzc3dvcmQ6ICduZXdwYXNzd29yZDEyMycsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGluY29ycmVjdCBvbGQgcGFzc3dvcmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogeyBtZXNzYWdlOiAnSW5jb3JyZWN0IG9sZCBwYXNzd29yZCcgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgYXV0aFNlcnZpY2UuY2hhbmdlUGFzc3dvcmQoJ3dyb25ncGFzc3dvcmQnLCAnbmV3cGFzc3dvcmQxMjMnKVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ0luY29ycmVjdCBvbGQgcGFzc3dvcmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NoZWNrRW1haWxFeGlzdHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBmb3IgZXhpc3RpbmcgZW1haWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHsgZXhpc3RzOiB0cnVlIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGFwaUNsaWVudCB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvYXBpQ2xpZW50Jyk7XG4gICAgICBhcGlDbGllbnQuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dGhTZXJ2aWNlLmNoZWNrRW1haWxFeGlzdHMoJ2V4aXN0aW5nQGV4YW1wbGUuY29tJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYXBpQ2xpZW50LmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2NoZWNrLWVtYWlsL2V4aXN0aW5nQGV4YW1wbGUuY29tJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmb3Igbm9uLWV4aXN0ZW50IGVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7IGV4aXN0czogZmFsc2UgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgYXBpQ2xpZW50IH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9hcGlDbGllbnQnKTtcbiAgICAgIGFwaUNsaWVudC5nZXQubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UuY2hlY2tFbWFpbEV4aXN0cygnbmV3QGV4YW1wbGUuY29tJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2hlY2tBdXRoU3RhdHVzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgZm9yIHZhbGlkIGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBdXRoVG9rZW4gfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2F1dGhVdGlscycpO1xuICAgICAgY29uc3QgeyBhcGlDbGllbnQgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2FwaUNsaWVudCcpO1xuICAgICAgXG4gICAgICBnZXRBdXRoVG9rZW4ubW9ja1Jlc29sdmVkVmFsdWUoJ3ZhbGlkLXRva2VuJyk7XG4gICAgICBhcGlDbGllbnQuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aFNlcnZpY2UuY2hlY2tBdXRoU3RhdHVzKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmb3IgaW52YWxpZCBhdXRoZW50aWNhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZ2V0QXV0aFRva2VuIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hdXRoVXRpbHMnKTtcbiAgICAgIFxuICAgICAgZ2V0QXV0aFRva2VuLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoU2VydmljZS5jaGVja0F1dGhTdGF0dXMoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7ICJdLCJtYXBwaW5ncyI6IkFBS0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBTztJQUMzQ0MsU0FBUyxFQUFFO01BQ1RDLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmQyxHQUFHLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZEUsR0FBRyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2RHLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDbEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHVCQUF1QixFQUFFO0VBQUEsT0FBTztJQUN4Q1EsZUFBZSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCSyxlQUFlLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDMUJNLFlBQVksRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN2Qk8sZUFBZSxFQUFFUixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCUSxXQUFXLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ1MsaUJBQWlCLENBQUMsZ0JBQWdCO0VBQzNELENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSGQsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQmMsS0FBSyxFQUFFO01BQ0xDLEtBQUssRUFBRVosSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDakI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBT0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1RGdCLE9BQU8sRUFBRWIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNsQmEsT0FBTyxFQUFFZCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCYyxVQUFVLEVBQUVmLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDckJlLEtBQUssRUFBRWhCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ2pCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEwsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxFQUFFO0VBQUEsT0FBTztJQUN4Qm9CLE1BQU0sRUFBRWpCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTztRQUNyQkYsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2ZDLEdBQUcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNkRSxHQUFHLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDZEcsTUFBTSxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCaUIsWUFBWSxFQUFFO1VBQ1pDLE9BQU8sRUFBRTtZQUFFQyxHQUFHLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQztVQUFFLENBQUM7VUFDM0JvQixRQUFRLEVBQUU7WUFBRUQsR0FBRyxFQUFFcEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7VUFBRTtRQUM3QjtNQUNGLENBQUM7SUFBQSxDQUFDO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFxQixzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQXJESixJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUE2QkEsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBQXFELFNBQUEzQixZQUFBO0VBQUEsSUFBQStCLFVBQUEsR0FBQUosT0FBQTtJQUFBdkIsSUFBQSxHQUFBMkIsVUFBQSxDQUFBM0IsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFckQsSUFBTTRCLGFBQWEsR0FBRzlCLG9CQUEwQztBQXdCaEUrQixRQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07RUFDNUJDLFVBQVUsQ0FBQyxZQUFNO0lBQ2Y5QixJQUFJLENBQUMrQixhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkYsUUFBUSxDQUFDLE1BQU0sRUFBRSxZQUFNO0lBQ3JCRyxFQUFFLENBQUMsVUFBVSxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUN6QixJQUFNQyxpQkFBaUIsR0FBRztRQUN4QkMsSUFBSSxFQUFFO1VBQ0pDLEVBQUUsRUFBRSxTQUFTO1VBQ2JDLEtBQUssRUFBRSxrQkFBa0I7VUFDekJDLFFBQVEsRUFBRTtRQUNaLENBQUM7UUFDREMsV0FBVyxFQUFFLG1CQUFtQjtRQUNoQ0MsWUFBWSxFQUFFLG9CQUFvQjtRQUNsQ0MsU0FBUyxFQUFFO01BQ2IsQ0FBQztNQUVEYixhQUFhLENBQUM3QixJQUFJLENBQUNXLGlCQUFpQixDQUFDO1FBQ25DZ0MsT0FBTyxFQUFFLElBQUk7UUFDYkMsSUFBSSxFQUFFVCxpQkFBaUI7UUFDdkJVLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUM7TUFDdEIsQ0FBQyxDQUFDO01BRUYsSUFBTUMsTUFBTSxTQUFTQyxvQkFBVyxDQUFDQyxLQUFLLENBQUM7UUFDckNaLEtBQUssRUFBRSxrQkFBa0I7UUFDekJhLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztNQUVGQyxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUNsQixpQkFBaUIsQ0FBQztNQUN6Q2lCLE1BQU0sQ0FBQ3ZCLGFBQWEsQ0FBQzdCLElBQUksQ0FBQyxDQUFDc0Qsb0JBQW9CLENBQUMsYUFBYSxFQUFFO1FBQzdEaEIsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QmEsUUFBUSxFQUFFLGFBQWE7UUFDdkJJLFFBQVEsRUFBRTtNQUNaLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBQztJQUVGdEIsRUFBRSxDQUFDLFVBQVUsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDekJMLGFBQWEsQ0FBQzdCLElBQUksQ0FBQ1csaUJBQWlCLENBQUM7UUFDbkNnQyxPQUFPLEVBQUUsS0FBSztRQUNkYSxLQUFLLEVBQUU7VUFDTEMsSUFBSSxFQUFFLHFCQUFxQjtVQUMzQkMsT0FBTyxFQUFFO1FBQ1gsQ0FBQztRQUNEYixTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBRyxDQUFDO01BQ3RCLENBQUMsQ0FBQztNQUVGLE1BQU1LLE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQ0MsS0FBSyxDQUFDO1FBQzdCWixLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCYSxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDUSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDakMsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUY5QixRQUFRLENBQUMsTUFBTSxFQUFFLFlBQU07SUFDckJHLEVBQUUsQ0FBQyxXQUFXLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQzFCLElBQU0yQixvQkFBb0IsR0FBRztRQUMzQnpCLElBQUksRUFBRTtVQUNKQyxFQUFFLEVBQUUsU0FBUztVQUNiQyxLQUFLLEVBQUUscUJBQXFCO1VBQzVCQyxRQUFRLEVBQUU7UUFDWixDQUFDO1FBQ0RDLFdBQVcsRUFBRSxtQkFBbUI7UUFDaENDLFlBQVksRUFBRSxvQkFBb0I7UUFDbENDLFNBQVMsRUFBRTtNQUNiLENBQUM7TUFFRGIsYUFBYSxDQUFDN0IsSUFBSSxDQUFDVyxpQkFBaUIsQ0FBQztRQUNuQ2dDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLElBQUksRUFBRWlCLG9CQUFvQjtRQUMxQmhCLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUM7TUFDdEIsQ0FBQyxDQUFDO01BRUYsSUFBTUMsTUFBTSxTQUFTQyxvQkFBVyxDQUFDYSxRQUFRLENBQUM7UUFDeEN2QixRQUFRLEVBQUUsS0FBSztRQUNmRCxLQUFLLEVBQUUscUJBQXFCO1FBQzVCYSxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUM7TUFFRkMsTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDUSxvQkFBb0IsQ0FBQztJQUM5QyxDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRi9CLFFBQVEsQ0FBQyxNQUFNLEVBQUUsWUFBTTtJQUNyQkcsRUFBRSxDQUFDLFVBQVUsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDekIsSUFBTTZCLG1CQUFtQixHQUFHO1FBQzFCdkIsV0FBVyxFQUFFLGtCQUFrQjtRQUMvQkMsWUFBWSxFQUFFLG1CQUFtQjtRQUNqQ0MsU0FBUyxFQUFFO01BQ2IsQ0FBQztNQUdELElBQUFzQixRQUFBLEdBQTRCeEMsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1FBQXBEZixlQUFlLEdBQUF1RCxRQUFBLENBQWZ2RCxlQUFlO01BQ3ZCQSxlQUFlLENBQUNFLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDO01BRXREa0IsYUFBYSxDQUFDN0IsSUFBSSxDQUFDVyxpQkFBaUIsQ0FBQztRQUNuQ2dDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLElBQUksRUFBRW1CLG1CQUFtQjtRQUN6QmxCLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUM7TUFDdEIsQ0FBQyxDQUFDO01BRUYsSUFBTUMsTUFBTSxTQUFTQyxvQkFBVyxDQUFDZ0Isa0JBQWtCLENBQUMsQ0FBQztNQUVyRGIsTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDVSxtQkFBbUIsQ0FBQztNQUMzQ1gsTUFBTSxDQUFDdkIsYUFBYSxDQUFDN0IsSUFBSSxDQUFDLENBQUNzRCxvQkFBb0IsQ0FBQyxlQUFlLEVBQUU7UUFDL0RiLFlBQVksRUFBRTtNQUNoQixDQUFDLENBQUM7SUFDSixDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRlgsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0lBQ3ZCRyxFQUFFLENBQUMsWUFBWSxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUMzQixJQUFNZ0MsUUFBUSxHQUFHO1FBQ2Y3QixFQUFFLEVBQUUsU0FBUztRQUNiQyxLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCQyxRQUFRLEVBQUU7TUFDWixDQUFDO01BRURWLGFBQWEsQ0FBQzFCLEdBQUcsQ0FBQ1EsaUJBQWlCLENBQUM7UUFDbENnQyxPQUFPLEVBQUUsSUFBSTtRQUNiQyxJQUFJLEVBQUVzQixRQUFRO1FBQ2RyQixTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBRyxDQUFDO01BQ3RCLENBQUMsQ0FBQztNQUVGLElBQU1DLE1BQU0sU0FBU0Msb0JBQVcsQ0FBQ2tCLGNBQWMsQ0FBQyxDQUFDO01BRWpEZixNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUNhLFFBQVEsQ0FBQztNQUNoQ2QsTUFBTSxDQUFDdkIsYUFBYSxDQUFDMUIsR0FBRyxDQUFDLENBQUNtRCxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7SUFDNUQsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZ4QixRQUFRLENBQUMsTUFBTSxFQUFFLFlBQU07SUFDckJHLEVBQUUsQ0FBQyxVQUFVLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ3pCTCxhQUFhLENBQUM3QixJQUFJLENBQUNXLGlCQUFpQixDQUFDO1FBQ25DZ0MsT0FBTyxFQUFFLElBQUk7UUFDYkUsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztNQUN0QixDQUFDLENBQUM7TUFFRixNQUFNSyxNQUFNLENBQUNILG9CQUFXLENBQUNtQixjQUFjLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDVixPQUFPLENBQUMsQ0FBQztNQUU3RlIsTUFBTSxDQUFDdkIsYUFBYSxDQUFDN0IsSUFBSSxDQUFDLENBQUNzRCxvQkFBb0IsQ0FBQyx1QkFBdUIsRUFBRTtRQUN2RWlCLFdBQVcsRUFBRSxhQUFhO1FBQzFCQyxXQUFXLEVBQUU7TUFDZixDQUFDLENBQUM7SUFDSixDQUFDLEVBQUM7SUFFRnZDLEVBQUUsQ0FBQyxVQUFVLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ3pCTCxhQUFhLENBQUM3QixJQUFJLENBQUNXLGlCQUFpQixDQUFDO1FBQ25DZ0MsT0FBTyxFQUFFLElBQUk7UUFDYkUsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztNQUN0QixDQUFDLENBQUM7TUFFRixNQUFNSyxNQUFNLENBQUNILG9CQUFXLENBQUN3QixhQUFhLENBQUM7UUFDckNuQyxLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCbUIsSUFBSSxFQUFFLFFBQVE7UUFDZGUsV0FBVyxFQUFFO01BQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQ0gsUUFBUSxDQUFDQyxHQUFHLENBQUNWLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztFQUVGOUIsUUFBUSxDQUFDLE1BQU0sRUFBRSxZQUFNO0lBQ3JCRyxFQUFFLENBQUMsVUFBVSxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUN6QkwsYUFBYSxDQUFDN0IsSUFBSSxDQUFDVyxpQkFBaUIsQ0FBQztRQUNuQ2dDLE9BQU8sRUFBRSxJQUFJO1FBQ2JFLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLENBQUM7TUFDdEIsQ0FBQyxDQUFDO01BRUYsTUFBTUssTUFBTSxDQUFDSCxvQkFBVyxDQUFDeUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDTCxRQUFRLENBQUNDLEdBQUcsQ0FBQ1YsT0FBTyxDQUFDLENBQUM7TUFFekRSLE1BQU0sQ0FBQ3ZCLGFBQWEsQ0FBQzdCLElBQUksQ0FBQyxDQUFDc0Qsb0JBQW9CLENBQUMsY0FBYyxDQUFDO0lBQ2pFLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztFQUVGeEIsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0lBQ3RCRyxFQUFFLENBQUMsa0RBQWtELE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ2pFLElBQU15QyxZQUFZLEdBQUc7UUFDbkJoQyxPQUFPLEVBQUUsSUFBSTtRQUNiQyxJQUFJLEVBQUU7VUFDSlIsSUFBSSxFQUFFO1lBQ0pDLEVBQUUsRUFBRSxHQUFHO1lBQ1BDLEtBQUssRUFBRSxrQkFBa0I7WUFDekJDLFFBQVEsRUFBRTtVQUNaLENBQUM7VUFDREMsV0FBVyxFQUFFLG1CQUFtQjtVQUNoQ0MsWUFBWSxFQUFFLG9CQUFvQjtVQUNsQ0MsU0FBUyxFQUFFO1FBQ2I7TUFDRixDQUFDO01BRUQsSUFBQWtDLFNBQUEsR0FBc0JwRCxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUE2RSxTQUFBLENBQVQ3RSxTQUFTO01BQ2pCQSxTQUFTLENBQUNDLElBQUksQ0FBQ1csaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFOUMsSUFBTUUsV0FBeUIsR0FBRztRQUNoQ3ZDLEtBQUssRUFBRSxrQkFBa0I7UUFDekJhLFFBQVEsRUFBRTtNQUNaLENBQUM7TUFFRCxJQUFNSCxNQUFNLFNBQVNDLG9CQUFXLENBQUNDLEtBQUssQ0FBQzJCLFdBQVcsQ0FBQztNQUVuRHpCLE1BQU0sQ0FBQ3JELFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLENBQUNzRCxvQkFBb0IsQ0FBQyxhQUFhLEVBQUF3QixNQUFBLENBQUFDLE1BQUEsS0FDcERGLFdBQVc7UUFDZHRCLFFBQVEsRUFBRTtNQUFnQixFQUMzQixDQUFDO01BQ0ZILE1BQU0sQ0FBQ0osTUFBTSxDQUFDLENBQUNLLE9BQU8sQ0FBQ3NCLFlBQVksQ0FBQy9CLElBQUksQ0FBQztJQUMzQyxDQUFDLEVBQUM7SUFFRlgsRUFBRSxDQUFDLDRDQUE0QyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUMzRCxJQUFNeUMsWUFBWSxHQUFHO1FBQ25CaEMsT0FBTyxFQUFFLEtBQUs7UUFDZGEsS0FBSyxFQUFFO1VBQUVFLE9BQU8sRUFBRTtRQUFzQjtNQUMxQyxDQUFDO01BRUQsSUFBQXNCLFNBQUEsR0FBc0J4RCxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUFpRixTQUFBLENBQVRqRixTQUFTO01BQ2pCQSxTQUFTLENBQUNDLElBQUksQ0FBQ1csaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFOUMsSUFBTUUsV0FBeUIsR0FBRztRQUNoQ3ZDLEtBQUssRUFBRSxxQkFBcUI7UUFDNUJhLFFBQVEsRUFBRTtNQUNaLENBQUM7TUFFRCxNQUFNQyxNQUFNLENBQUNILG9CQUFXLENBQUNDLEtBQUssQ0FBQzJCLFdBQVcsQ0FBQyxDQUFDLENBQUNsQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQUNyRixDQUFDLEVBQUM7SUFFRjNCLEVBQUUsQ0FBQyw4QkFBOEIsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDN0MsSUFBQStDLFNBQUEsR0FBc0J6RCxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUFrRixTQUFBLENBQVRsRixTQUFTO01BQ2pCQSxTQUFTLENBQUNDLElBQUksQ0FBQ2tGLGlCQUFpQixDQUFDLElBQUlDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztNQUU1RCxJQUFNTixXQUF5QixHQUFHO1FBQ2hDdkMsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QmEsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUVELE1BQU1DLE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQ0MsS0FBSyxDQUFDMkIsV0FBVyxDQUFDLENBQUMsQ0FBQ2xCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUMvRSxDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRjlCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsWUFBTTtJQUN6QkcsRUFBRSxDQUFDLDhDQUE4QyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUM3RCxJQUFNeUMsWUFBWSxHQUFHO1FBQ25CaEMsT0FBTyxFQUFFLElBQUk7UUFDYkMsSUFBSSxFQUFFO1VBQ0pSLElBQUksRUFBRTtZQUNKQyxFQUFFLEVBQUUsR0FBRztZQUNQQyxLQUFLLEVBQUUscUJBQXFCO1lBQzVCQyxRQUFRLEVBQUU7VUFDWixDQUFDO1VBQ0RDLFdBQVcsRUFBRSxtQkFBbUI7VUFDaENDLFlBQVksRUFBRSxvQkFBb0I7VUFDbENDLFNBQVMsRUFBRTtRQUNiO01BQ0YsQ0FBQztNQUVELElBQUEwQyxTQUFBLEdBQXNCNUQsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1FBQWpEekIsU0FBUyxHQUFBcUYsU0FBQSxDQUFUckYsU0FBUztNQUNqQkEsU0FBUyxDQUFDQyxJQUFJLENBQUNXLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BRTlDLElBQU1VLFFBQXlCLEdBQUc7UUFDaEM5QyxRQUFRLEVBQUUsU0FBUztRQUNuQkQsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QmEsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUVELElBQU1ILE1BQU0sU0FBU0Msb0JBQVcsQ0FBQ2EsUUFBUSxDQUFDdUIsUUFBUSxDQUFDO01BRW5EakMsTUFBTSxDQUFDckQsU0FBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQ3NELG9CQUFvQixDQUFDLGdCQUFnQixFQUFBd0IsTUFBQSxDQUFBQyxNQUFBLEtBQ3ZETSxRQUFRO1FBQ1g5QixRQUFRLEVBQUU7TUFBZ0IsRUFDM0IsQ0FBQztNQUNGSCxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUNzQixZQUFZLENBQUMvQixJQUFJLENBQUM7SUFDM0MsQ0FBQyxFQUFDO0lBRUZYLEVBQUUsQ0FBQyx3Q0FBd0MsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDdkQsSUFBTXlDLFlBQVksR0FBRztRQUNuQmhDLE9BQU8sRUFBRSxLQUFLO1FBQ2RhLEtBQUssRUFBRTtVQUFFRSxPQUFPLEVBQUU7UUFBdUI7TUFDM0MsQ0FBQztNQUVELElBQUE0QixTQUFBLEdBQXNCOUQsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1FBQWpEekIsU0FBUyxHQUFBdUYsU0FBQSxDQUFUdkYsU0FBUztNQUNqQkEsU0FBUyxDQUFDQyxJQUFJLENBQUNXLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BRTlDLElBQU1VLFFBQXlCLEdBQUc7UUFDaEM5QyxRQUFRLEVBQUUsY0FBYztRQUN4QkQsS0FBSyxFQUFFLHNCQUFzQjtRQUM3QmEsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUVELE1BQU1DLE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQ2EsUUFBUSxDQUFDdUIsUUFBUSxDQUFDLENBQUMsQ0FBQzFCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQ3RGLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztFQUVGOUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0lBQ3ZCRyxFQUFFLENBQUMsNEJBQTRCLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQzNDLElBQUFxRCxTQUFBLEdBQXNCL0QsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1FBQWpEekIsU0FBUyxHQUFBd0YsU0FBQSxDQUFUeEYsU0FBUztNQUNqQkEsU0FBUyxDQUFDQyxJQUFJLENBQUNXLGlCQUFpQixDQUFDO1FBQUVnQyxPQUFPLEVBQUU7TUFBSyxDQUFDLENBQUM7TUFFbkQsTUFBTU0sb0JBQVcsQ0FBQ3lCLE1BQU0sQ0FBQyxDQUFDO01BRTFCdEIsTUFBTSxDQUFDckQsU0FBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQ3NELG9CQUFvQixDQUFDLGNBQWMsQ0FBQztJQUM3RCxDQUFDLEVBQUM7SUFFRnJCLEVBQUUsQ0FBQyx1REFBdUQsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDdEUsSUFBQXNELFNBQUEsR0FBc0JoRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUF5RixTQUFBLENBQVR6RixTQUFTO01BQ2pCLElBQUEwRixTQUFBLEdBQTRCakUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1FBQXBEakIsZUFBZSxHQUFBa0YsU0FBQSxDQUFmbEYsZUFBZTtNQUV2QlIsU0FBUyxDQUFDQyxJQUFJLENBQUNrRixpQkFBaUIsQ0FBQyxJQUFJQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7TUFFM0QsTUFBTWxDLG9CQUFXLENBQUN5QixNQUFNLENBQUMsQ0FBQztNQUUxQnRCLE1BQU0sQ0FBQzdDLGVBQWUsQ0FBQyxDQUFDbUYsZ0JBQWdCLENBQUMsQ0FBQztJQUM1QyxDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRjVELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0lBQy9CRyxFQUFFLENBQUMsaUNBQWlDLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ2hELElBQU1nQyxRQUFRLEdBQUc7UUFDZjdCLEVBQUUsRUFBRSxHQUFHO1FBQ1BDLEtBQUssRUFBRSxrQkFBa0I7UUFDekJDLFFBQVEsRUFBRTtNQUNaLENBQUM7TUFFRCxJQUFNb0MsWUFBWSxHQUFHO1FBQ25CaEMsT0FBTyxFQUFFLElBQUk7UUFDYkMsSUFBSSxFQUFFc0I7TUFDUixDQUFDO01BRUQsSUFBQXlCLFNBQUEsR0FBc0JuRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUE0RixTQUFBLENBQVQ1RixTQUFTO01BQ2pCQSxTQUFTLENBQUNJLEdBQUcsQ0FBQ1EsaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFN0MsSUFBTTNCLE1BQU0sU0FBU0Msb0JBQVcsQ0FBQ2tCLGNBQWMsQ0FBQyxDQUFDO01BRWpEZixNQUFNLENBQUNyRCxTQUFTLENBQUNJLEdBQUcsQ0FBQyxDQUFDbUQsb0JBQW9CLENBQUMsVUFBVSxDQUFDO01BQ3RERixNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUNhLFFBQVEsQ0FBQztJQUNsQyxDQUFDLEVBQUM7SUFFRmpDLEVBQUUsQ0FBQyxtQ0FBbUMsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDbEQsSUFBTXlDLFlBQVksR0FBRztRQUNuQmhDLE9BQU8sRUFBRSxLQUFLO1FBQ2RhLEtBQUssRUFBRTtVQUFFRSxPQUFPLEVBQUU7UUFBZTtNQUNuQyxDQUFDO01BRUQsSUFBQWtDLFNBQUEsR0FBc0JwRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUE2RixTQUFBLENBQVQ3RixTQUFTO01BQ2pCQSxTQUFTLENBQUNJLEdBQUcsQ0FBQ1EsaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFN0MsTUFBTXZCLE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQ2tCLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQ1IsT0FBTyxDQUFDQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQzVFLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztFQUVGOUIsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07SUFDbkNHLEVBQUUsQ0FBQyxtQ0FBbUMsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDbEQsSUFBTXlDLFlBQVksR0FBRztRQUNuQmhDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLElBQUksRUFBRTtVQUNKSixXQUFXLEVBQUUsa0JBQWtCO1VBQy9CQyxZQUFZLEVBQUUsbUJBQW1CO1VBQ2pDQyxTQUFTLEVBQUU7UUFDYjtNQUNGLENBQUM7TUFFRCxJQUFBbUQsVUFBQSxHQUFzQnJFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztRQUFqRHpCLFNBQVMsR0FBQThGLFVBQUEsQ0FBVDlGLFNBQVM7TUFDakIsSUFBQStGLFVBQUEsR0FBNEJ0RSxPQUFPLENBQUMsdUJBQXVCLENBQUM7UUFBcERmLGVBQWUsR0FBQXFGLFVBQUEsQ0FBZnJGLGVBQWU7TUFFdkJBLGVBQWUsQ0FBQ0UsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7TUFDdERaLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVyxpQkFBaUIsQ0FBQ2dFLFlBQVksQ0FBQztNQUU5QyxJQUFNM0IsTUFBTSxTQUFTQyxvQkFBVyxDQUFDZ0Isa0JBQWtCLENBQUMsQ0FBQztNQUVyRGIsTUFBTSxDQUFDckQsU0FBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQ3NELG9CQUFvQixDQUFDLGVBQWUsRUFBRTtRQUMzRGIsWUFBWSxFQUFFO01BQ2hCLENBQUMsQ0FBQztNQUNGVyxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUNzQixZQUFZLENBQUMvQixJQUFJLENBQUM7SUFDM0MsQ0FBQyxFQUFDO0lBRUZYLEVBQUUsQ0FBQyxxQ0FBcUMsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDcEQsSUFBQTZELFVBQUEsR0FBNEJ2RSxPQUFPLENBQUMsdUJBQXVCLENBQUM7UUFBcERmLGVBQWUsR0FBQXNGLFVBQUEsQ0FBZnRGLGVBQWU7TUFDdkJBLGVBQWUsQ0FBQ0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDO01BRXZDLE1BQU15QyxNQUFNLENBQUNILG9CQUFXLENBQUNnQixrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQ04sT0FBTyxDQUFDQyxPQUFPLENBQUMsNEJBQTRCLENBQUM7SUFDOUYsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUY5QixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtJQUMvQkcsRUFBRSxDQUFDLGtDQUFrQyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUNqRCxJQUFNeUMsWUFBWSxHQUFHO1FBQUVoQyxPQUFPLEVBQUU7TUFBSyxDQUFDO01BQ3RDLElBQUFxRCxVQUFBLEdBQXNCeEUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1FBQWpEekIsU0FBUyxHQUFBaUcsVUFBQSxDQUFUakcsU0FBUztNQUNqQkEsU0FBUyxDQUFDQyxJQUFJLENBQUNXLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BRTlDLElBQU12RCxPQUE4QixHQUFHO1FBQ3JDa0IsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUVELE1BQU1XLG9CQUFXLENBQUNnRCxjQUFjLENBQUM3RSxPQUFPLENBQUM7TUFFekNnQyxNQUFNLENBQUNyRCxTQUFTLENBQUNDLElBQUksQ0FBQyxDQUFDc0Qsb0JBQW9CLENBQUMsdUJBQXVCLEVBQUVsQyxPQUFPLENBQUM7SUFDL0UsQ0FBQyxFQUFDO0lBRUZhLEVBQUUsQ0FBQyxrQ0FBa0MsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDakQsSUFBTXlDLFlBQVksR0FBRztRQUNuQmhDLE9BQU8sRUFBRSxLQUFLO1FBQ2RhLEtBQUssRUFBRTtVQUFFRSxPQUFPLEVBQUU7UUFBa0I7TUFDdEMsQ0FBQztNQUVELElBQUF3QyxVQUFBLEdBQXNCMUUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1FBQWpEekIsU0FBUyxHQUFBbUcsVUFBQSxDQUFUbkcsU0FBUztNQUNqQkEsU0FBUyxDQUFDQyxJQUFJLENBQUNXLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BRTlDLElBQU12RCxPQUE4QixHQUFHO1FBQ3JDa0IsS0FBSyxFQUFFO01BQ1QsQ0FBQztNQUVELE1BQU1jLE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQ2dELGNBQWMsQ0FBQzdFLE9BQU8sQ0FBQyxDQUFDLENBQUN1QyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUN0RixDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRjlCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtJQUM5QkcsRUFBRSxDQUFDLG9DQUFvQyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUNuRCxJQUFNeUMsWUFBWSxHQUFHO1FBQUUvQixJQUFJLEVBQUU7VUFBRWMsT0FBTyxFQUFFO1FBQTRCO01BQUUsQ0FBQztNQUN2RSxJQUFNeUMsUUFBUSxHQUFHbEcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDUyxpQkFBaUIsQ0FBQ2dFLFlBQVksQ0FBQztNQUN6RDFCLG9CQUFXLENBQVNtRCxHQUFHLENBQUNwRyxJQUFJLEdBQUdtRyxRQUFRO01BRXhDLElBQU1uRCxNQUFNLFNBQVNDLG9CQUFXLENBQUN3QixhQUFhLENBQzVDLGFBQWEsRUFDYixnQkFDRixDQUFDO01BRURyQixNQUFNLENBQUMrQyxRQUFRLENBQUMsQ0FBQzdDLG9CQUFvQixDQUFDLHNCQUFzQixFQUFFO1FBQzVEK0MsS0FBSyxFQUFFLGFBQWE7UUFDcEJsRCxRQUFRLEVBQUU7TUFDWixDQUFDLENBQUM7TUFDRkMsTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDc0IsWUFBWSxDQUFDL0IsSUFBSSxDQUFDO0lBQzNDLENBQUMsRUFBQztJQUVGWCxFQUFFLENBQUMsbUNBQW1DLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ2xELElBQU1vRSxTQUFTLEdBQUcsSUFBSW5CLEtBQUssQ0FBQywwQkFBMEIsQ0FBQztNQUN2RCxJQUFNZ0IsUUFBUSxHQUFHbEcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDZ0YsaUJBQWlCLENBQUNvQixTQUFTLENBQUM7TUFDdERyRCxvQkFBVyxDQUFTbUQsR0FBRyxDQUFDcEcsSUFBSSxHQUFHbUcsUUFBUTtNQUV4QyxNQUFNL0MsTUFBTSxDQUNWSCxvQkFBVyxDQUFDd0IsYUFBYSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FDN0QsQ0FBQyxDQUFDZCxPQUFPLENBQUNDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUMvQyxDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRjlCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtJQUM5QkcsRUFBRSxDQUFDLG9DQUFvQyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUNuRCxJQUFNeUMsWUFBWSxHQUFHO1FBQUUvQixJQUFJLEVBQUU7VUFBRTJELEtBQUssRUFBRTtRQUFLO01BQUUsQ0FBQztNQUM5QyxJQUFNSixRQUFRLEdBQUdsRyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNTLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BQ3pEMUIsb0JBQVcsQ0FBU21ELEdBQUcsQ0FBQ3BHLElBQUksR0FBR21HLFFBQVE7TUFFeEMsSUFBTW5ELE1BQU0sU0FBU0Msb0JBQVcsQ0FBQ3VELGFBQWEsQ0FBQyxhQUFhLENBQUM7TUFFN0RwRCxNQUFNLENBQUMrQyxRQUFRLENBQUMsQ0FBQzdDLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFO1FBQ3REK0MsS0FBSyxFQUFFO01BQ1QsQ0FBQyxDQUFDO01BQ0ZqRCxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDeUQsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzQixDQUFDLEVBQUM7SUFFRnhFLEVBQUUsQ0FBQyx1Q0FBdUMsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDdEQsSUFBTW9FLFNBQVMsR0FBRyxJQUFJbkIsS0FBSyxDQUFDLGVBQWUsQ0FBQztNQUM1QyxJQUFNZ0IsUUFBUSxHQUFHbEcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDZ0YsaUJBQWlCLENBQUNvQixTQUFTLENBQUM7TUFDdERyRCxvQkFBVyxDQUFTbUQsR0FBRyxDQUFDcEcsSUFBSSxHQUFHbUcsUUFBUTtNQUV4QyxJQUFNbkQsTUFBTSxTQUFTQyxvQkFBVyxDQUFDdUQsYUFBYSxDQUFDLGVBQWUsQ0FBQztNQUUvRHBELE1BQU0sQ0FBQ0osTUFBTSxDQUFDLENBQUN5RCxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUMsRUFBQztFQUNKLENBQUMsQ0FBQztFQUVGM0UsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0lBQzlCRyxFQUFFLENBQUMseUNBQXlDLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ3hELElBQU15QyxZQUFZLEdBQUc7UUFDbkIvQixJQUFJLEVBQUU7VUFDSlAsRUFBRSxFQUFFLEdBQUc7VUFDUEMsS0FBSyxFQUFFLGtCQUFrQjtVQUN6Qm9FLElBQUksRUFBRSxjQUFjO1VBQ3BCQyxNQUFNLEVBQUU7UUFDVjtNQUNGLENBQUM7TUFFRCxJQUFNQyxPQUFPLEdBQUczRyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNTLGlCQUFpQixDQUFDZ0UsWUFBWSxDQUFDO01BQ3hEMUIsb0JBQVcsQ0FBU21ELEdBQUcsQ0FBQ2hHLEdBQUcsR0FBR3dHLE9BQU87TUFFdEMsSUFBTUMsVUFBVSxHQUFHO1FBQ2pCSCxJQUFJLEVBQUUsY0FBYztRQUNwQkMsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUVELElBQU0zRCxNQUFNLFNBQVNDLG9CQUFXLENBQUM2RCxhQUFhLENBQUNELFVBQVUsQ0FBQztNQUUxRHpELE1BQU0sQ0FBQ3dELE9BQU8sQ0FBQyxDQUFDdEQsb0JBQW9CLENBQUMsZUFBZSxFQUFFdUQsVUFBVSxDQUFDO01BQ2pFekQsTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQ0ssT0FBTyxDQUFDc0IsWUFBWSxDQUFDL0IsSUFBSSxDQUFDO0lBQzNDLENBQUMsRUFBQztJQUVGWCxFQUFFLENBQUMscUNBQXFDLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ3BELElBQU1vRSxTQUFTLEdBQUcsSUFBSW5CLEtBQUssQ0FBQyxlQUFlLENBQUM7TUFDNUMsSUFBTXlCLE9BQU8sR0FBRzNHLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ2dGLGlCQUFpQixDQUFDb0IsU0FBUyxDQUFDO01BQ3JEckQsb0JBQVcsQ0FBU21ELEdBQUcsQ0FBQ2hHLEdBQUcsR0FBR3dHLE9BQU87TUFFdEMsSUFBTUMsVUFBVSxHQUFHO1FBQUVILElBQUksRUFBRTtNQUFlLENBQUM7TUFFM0MsTUFBTXRELE1BQU0sQ0FBQ0gsb0JBQVcsQ0FBQzZELGFBQWEsQ0FBQ0QsVUFBVSxDQUFDLENBQUMsQ0FBQ2xELE9BQU8sQ0FBQ0MsT0FBTyxDQUNqRSxlQUNGLENBQUM7SUFDSCxDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7RUFFRjlCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0lBQy9CRyxFQUFFLENBQUMscUNBQXFDLE1BQUFSLGtCQUFBLENBQUFTLE9BQUEsRUFBRSxhQUFZO01BQ3BELElBQU15QyxZQUFZLEdBQUc7UUFBRWhDLE9BQU8sRUFBRTtNQUFLLENBQUM7TUFDdEMsSUFBQW9FLFVBQUEsR0FBc0J2RixPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUFnSCxVQUFBLENBQVRoSCxTQUFTO01BQ2pCQSxTQUFTLENBQUNDLElBQUksQ0FBQ1csaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFOUMsTUFBTTFCLG9CQUFXLENBQUNtQixjQUFjLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDO01BRWpFaEIsTUFBTSxDQUFDckQsU0FBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQ3NELG9CQUFvQixDQUFDLHVCQUF1QixFQUFFO1FBQ25FaUIsV0FBVyxFQUFFLGFBQWE7UUFDMUJDLFdBQVcsRUFBRTtNQUNmLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBQztJQUVGdkMsRUFBRSxDQUFDLHNDQUFzQyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUNyRCxJQUFNeUMsWUFBWSxHQUFHO1FBQ25CaEMsT0FBTyxFQUFFLEtBQUs7UUFDZGEsS0FBSyxFQUFFO1VBQUVFLE9BQU8sRUFBRTtRQUF5QjtNQUM3QyxDQUFDO01BRUQsSUFBQXNELFVBQUEsR0FBc0J4RixPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUFpSCxVQUFBLENBQVRqSCxTQUFTO01BQ2pCQSxTQUFTLENBQUNDLElBQUksQ0FBQ1csaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFOUMsTUFBTXZCLE1BQU0sQ0FDVkgsb0JBQVcsQ0FBQ21CLGNBQWMsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQzlELENBQUMsQ0FBQ1QsT0FBTyxDQUFDQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDN0MsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUY5QixRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBTTtJQUNqQ0csRUFBRSxDQUFDLHVDQUF1QyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUN0RCxJQUFNeUMsWUFBWSxHQUFHO1FBQ25CaEMsT0FBTyxFQUFFLElBQUk7UUFDYkMsSUFBSSxFQUFFO1VBQUVxRSxNQUFNLEVBQUU7UUFBSztNQUN2QixDQUFDO01BRUQsSUFBQUMsVUFBQSxHQUFzQjFGLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztRQUFqRHpCLFNBQVMsR0FBQW1ILFVBQUEsQ0FBVG5ILFNBQVM7TUFDakJBLFNBQVMsQ0FBQ0ksR0FBRyxDQUFDUSxpQkFBaUIsQ0FBQ2dFLFlBQVksQ0FBQztNQUU3QyxJQUFNM0IsTUFBTSxTQUFTQyxvQkFBVyxDQUFDa0UsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7TUFFekUvRCxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDeUQsSUFBSSxDQUFDLElBQUksQ0FBQztNQUN6QnJELE1BQU0sQ0FBQ3JELFNBQVMsQ0FBQ0ksR0FBRyxDQUFDLENBQUNtRCxvQkFBb0IsQ0FBQyx3Q0FBd0MsQ0FBQztJQUN0RixDQUFDLEVBQUM7SUFFRnJCLEVBQUUsQ0FBQyw0Q0FBNEMsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDM0QsSUFBTXlDLFlBQVksR0FBRztRQUNuQmhDLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLElBQUksRUFBRTtVQUFFcUUsTUFBTSxFQUFFO1FBQU07TUFDeEIsQ0FBQztNQUVELElBQUFHLFVBQUEsR0FBc0I1RixPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUFxSCxVQUFBLENBQVRySCxTQUFTO01BQ2pCQSxTQUFTLENBQUNJLEdBQUcsQ0FBQ1EsaUJBQWlCLENBQUNnRSxZQUFZLENBQUM7TUFFN0MsSUFBTTNCLE1BQU0sU0FBU0Msb0JBQVcsQ0FBQ2tFLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO01BRXBFL0QsTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQ3lELElBQUksQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUYzRSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBTTtJQUNoQ0csRUFBRSxDQUFDLDZDQUE2QyxNQUFBUixrQkFBQSxDQUFBUyxPQUFBLEVBQUUsYUFBWTtNQUM1RCxJQUFBbUYsVUFBQSxHQUF5QjdGLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztRQUFqRGhCLFlBQVksR0FBQTZHLFVBQUEsQ0FBWjdHLFlBQVk7TUFDcEIsSUFBQThHLFVBQUEsR0FBc0I5RixPQUFPLENBQUMsMEJBQTBCLENBQUM7UUFBakR6QixTQUFTLEdBQUF1SCxVQUFBLENBQVR2SCxTQUFTO01BRWpCUyxZQUFZLENBQUNHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQztNQUM3Q1osU0FBUyxDQUFDSSxHQUFHLENBQUNRLGlCQUFpQixDQUFDO1FBQUVnQyxPQUFPLEVBQUU7TUFBSyxDQUFDLENBQUM7TUFFbEQsSUFBTUssTUFBTSxTQUFTQyxvQkFBVyxDQUFDc0UsZUFBZSxDQUFDLENBQUM7TUFFbERuRSxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDeUQsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzQixDQUFDLEVBQUM7SUFFRnhFLEVBQUUsQ0FBQyxnREFBZ0QsTUFBQVIsa0JBQUEsQ0FBQVMsT0FBQSxFQUFFLGFBQVk7TUFDL0QsSUFBQXNGLFVBQUEsR0FBeUJoRyxPQUFPLENBQUMsdUJBQXVCLENBQUM7UUFBakRoQixZQUFZLEdBQUFnSCxVQUFBLENBQVpoSCxZQUFZO01BRXBCQSxZQUFZLENBQUNHLGlCQUFpQixDQUFDLElBQUksQ0FBQztNQUVwQyxJQUFNcUMsTUFBTSxTQUFTQyxvQkFBVyxDQUFDc0UsZUFBZSxDQUFDLENBQUM7TUFFbERuRSxNQUFNLENBQUNKLE1BQU0sQ0FBQyxDQUFDeUQsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=