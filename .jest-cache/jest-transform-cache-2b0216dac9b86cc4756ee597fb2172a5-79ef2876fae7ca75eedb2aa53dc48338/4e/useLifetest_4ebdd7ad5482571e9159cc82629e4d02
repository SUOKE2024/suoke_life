bc23fa77c435729f1b1474380ef27500
_getJestObj().mock('react-native', function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useLife = require("../../hooks/useLife");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = _reactNative2.Alert.alert;
describe('useLife', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('应该初始化默认状态', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook.result;
    expect(result.current.suggestions).toBeDefined();
    expect(result.current.healthMetrics).toBeDefined();
    expect(result.current.lifePlans).toBeDefined();
    expect(result.current.habits).toBeDefined();
    expect(result.current.goals).toBeDefined();
    expect(result.current.activeTab).toBe('suggestions');
    expect(result.current.loading).toBe(false);
    expect(result.current.refreshing).toBe(false);
  });
  it('应该正确切换活动标签', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('metrics');
    });
    expect(result.current.activeTab).toBe('metrics');
    (0, _reactNative.act)(function () {
      result.current.setActiveTab('plans');
    });
    expect(result.current.activeTab).toBe('plans');
  });
  it('应该正确完成建议', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook3.result;
    var suggestion = result.current.suggestions[0];
    (0, _reactNative.act)(function () {
      result.current.completeSuggestion(suggestion);
    });
    var updatedSuggestion = result.current.suggestions.find(function (s) {
      return s.id === suggestion.id;
    });
    expect(updatedSuggestion == null ? void 0 : updatedSuggestion.completed).toBe(true);
    expect(mockAlert).toHaveBeenCalledWith('建议已完成！', expect.stringContaining(suggestion.title), expect.any(Array));
  });
  it('应该正确查看建议详情', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook4.result;
    var suggestion = result.current.suggestions[0];
    (0, _reactNative.act)(function () {
      result.current.viewSuggestionDetail(suggestion);
    });
    expect(mockAlert).toHaveBeenCalledWith(suggestion.title, expect.stringContaining(suggestion.description), expect.any(Array));
  });
  it('应该正确查看计划详情', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook5.result;
    var plan = result.current.lifePlans[0];
    (0, _reactNative.act)(function () {
      result.current.viewPlanDetail(plan);
    });
    expect(mockAlert).toHaveBeenCalledWith(plan.title, expect.stringContaining(plan.description), expect.any(Array));
  });
  it('应该正确执行计划行动', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook6.result;
    var plan = result.current.lifePlans[0];
    var initialProgress = plan.progress;
    (0, _reactNative.act)(function () {
      result.current.executePlanAction(plan);
    });
    expect(mockAlert).toHaveBeenCalledWith('执行行动', expect.stringContaining(plan.nextAction), expect.any(Array));
  });
  it('应该正确获取分类文本', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook7.result;
    expect(result.current.getCategoryText('diet')).toBe('饮食');
    expect(result.current.getCategoryText('exercise')).toBe('运动');
    expect(result.current.getCategoryText('sleep')).toBe('睡眠');
    expect(result.current.getCategoryText('unknown')).toBe('unknown');
  });
  it('应该正确获取优先级文本和颜色', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook8.result;
    expect(result.current.getPriorityText('high')).toBe('高');
    expect(result.current.getPriorityText('medium')).toBe('中');
    expect(result.current.getPriorityText('low')).toBe('低');
    expect(result.current.getPriorityColor('high')).toBe('#FF3B30');
    expect(result.current.getPriorityColor('medium')).toBe('#FF9500');
    expect(result.current.getPriorityColor('low')).toBe('#34C759');
  });
  it('应该正确获取趋势图标', function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook9.result;
    expect(result.current.getTrendIcon('up')).toBe('trending-up');
    expect(result.current.getTrendIcon('down')).toBe('trending-down');
    expect(result.current.getTrendIcon('stable')).toBe('trending-neutral');
    expect(result.current.getTrendIcon('unknown')).toBe('trending-neutral');
  });
  it('应该正确刷新数据', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshData();
    }));
    expect(mockAlert).toHaveBeenCalledWith('刷新成功', '数据已更新');
  }));
  it('应该正确过滤建议', function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook1.result;
    var dietSuggestions = result.current.filterSuggestions('diet');
    expect(dietSuggestions.every(function (s) {
      return s.category === 'diet';
    })).toBe(true);
    var highPrioritySuggestions = result.current.filterSuggestions(undefined, 'high');
    expect(highPrioritySuggestions.every(function (s) {
      return s.priority === 'high';
    })).toBe(true);
    var completedSuggestions = result.current.filterSuggestions(undefined, undefined, true);
    expect(completedSuggestions.every(function (s) {
      return s.completed === true;
    })).toBe(true);
  });
  it('应该正确获取今日建议', function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook10.result;
    var todaySuggestions = result.current.getTodaySuggestions();
    expect(Array.isArray(todaySuggestions)).toBe(true);
    expect(todaySuggestions.length).toBeLessThanOrEqual(3);
    expect(todaySuggestions.every(function (s) {
      return !s.completed && s.priority === 'high';
    })).toBe(true);
  });
  it('应该正确获取推荐行动', function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook11.result;
    var recommendations = result.current.getRecommendedActions();
    expect(Array.isArray(recommendations)).toBe(true);
  });
  it('应该正确更新健康指标', function () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook12.result;
    var metric = result.current.healthMetrics[0];
    var newValue = 95;
    (0, _reactNative.act)(function () {
      result.current.updateHealthMetric(metric.id, newValue);
    });
    var updatedMetric = result.current.healthMetrics.find(function (m) {
      return m.id === metric.id;
    });
    expect(updatedMetric == null ? void 0 : updatedMetric.value).toBe(newValue);
  });
  it('应该正确计算统计数据', function () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useLife.useLife)();
      }),
      result = _renderHook13.result;
    expect(result.current.stats.totalSuggestions).toBeGreaterThan(0);
    expect(result.current.stats.completedSuggestions).toBeGreaterThanOrEqual(0);
    expect(result.current.stats.completionRate).toBeGreaterThanOrEqual(0);
    expect(result.current.stats.activePlans).toBeGreaterThanOrEqual(0);
    expect(result.current.stats.completedPlans).toBeGreaterThanOrEqual(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,