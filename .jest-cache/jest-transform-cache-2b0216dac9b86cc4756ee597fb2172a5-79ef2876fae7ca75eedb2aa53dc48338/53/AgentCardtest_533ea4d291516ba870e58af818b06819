47690f162c19ef4dd706613aa8ca847f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var MockAgentCard = function MockAgentCard(_ref) {
  var agent = _ref.agent,
    _onPress = _ref.onPress;
  return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
    onPress: function onPress() {
      return _onPress && _onPress(agent);
    },
    children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: agent.name
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: agent.specialty
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: agent.description
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: agent.status === 'online' ? '在线' : '离线'
      })]
    })
  });
};
var mockAgent = {
  id: 'xiaoai',
  name: '小艾',
  specialty: '健康咨询',
  description: '专业的健康管理顾问',
  avatar: 'https://example.com/xiaoai.jpg',
  status: 'online'
};
describe('AgentCard', function () {
  it('应该正确渲染智能体卡片', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByText = _render.getByText;
    expect(getByText('小艾')).toBeTruthy();
    expect(getByText('健康咨询')).toBeTruthy();
    expect(getByText('专业的健康管理顾问')).toBeTruthy();
  });
  it('应该显示智能体状态', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByText = _render2.getByText;
    expect(getByText('在线')).toBeTruthy();
  });
  it('应该显示离线状态', function () {
    var offlineAgent = Object.assign({}, mockAgent, {
      status: 'offline'
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: offlineAgent
      })),
      getByText = _render3.getByText;
    expect(getByText('离线')).toBeTruthy();
  });
  it('应该处理点击事件', function () {
    var _nameElement$parent;
    var mockOnPress = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent,
        onPress: mockOnPress
      })),
      getByText = _render4.getByText;
    var nameElement = getByText('小艾');
    var touchableElement = (_nameElement$parent = nameElement.parent) == null ? void 0 : _nameElement$parent.parent;
    if (touchableElement) {
      _reactNative.fireEvent.press(touchableElement);
      expect(mockOnPress).toHaveBeenCalledWith(mockAgent);
    }
  });
  it('应该正确显示基本信息', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByText = _render5.getByText;
    expect(getByText('小艾')).toBeTruthy();
    expect(getByText('健康咨询')).toBeTruthy();
    expect(getByText('专业的健康管理顾问')).toBeTruthy();
  });
  it('应该处理缺少onPress的情况', function () {
    var _nameElement$parent2;
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByText = _render6.getByText;
    var nameElement = getByText('小艾');
    var touchableElement = (_nameElement$parent2 = nameElement.parent) == null ? void 0 : _nameElement$parent2.parent;
    if (touchableElement) {
      expect(function () {
        return _reactNative.fireEvent.press(touchableElement);
      }).not.toThrow();
    }
  });
  it('应该正确渲染组件结构', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByText = _render7.getByText;
    expect(getByText('小艾')).toBeTruthy();
    expect(getByText('在线')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,