d18cacd205bc60c2221f6fa68c3b5f68
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMemoryHistory;
var _nonSecure = require("nanoid/non-secure");
function createMemoryHistory() {
  var index = 0;
  var items = [];
  var pending = [];
  var interrupt = function interrupt() {
    pending.forEach(function (it) {
      var cb = it.cb;
      it.cb = function () {
        return cb(true);
      };
    });
  };
  var history = {
    get index() {
      var _window$history$state;
      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;
      if (id) {
        var _index = items.findIndex(function (item) {
          return item.id === id;
        });
        return _index > -1 ? _index : 0;
      }
      return 0;
    },
    get: function get(index) {
      return items[index];
    },
    backIndex: function backIndex(_ref) {
      var path = _ref.path;
      for (var i = index - 1; i >= 0; i--) {
        var item = items[i];
        if (item.path === path) {
          return i;
        }
      }
      return -1;
    },
    push: function push(_ref2) {
      var path = _ref2.path,
        state = _ref2.state;
      interrupt();
      var id = (0, _nonSecure.nanoid)();
      items = items.slice(0, index + 1);
      items.push({
        path: path,
        state: state,
        id: id
      });
      index = items.length - 1;
      window.history.pushState({
        id: id
      }, '', path);
    },
    replace: function replace(_ref3) {
      var _ref4;
      var _window$history$state2;
      var path = _ref3.path,
        state = _ref3.state;
      interrupt();
      var id = (_ref4 = (_window$history$state2 = window.history.state) === null || _window$history$state2 === void 0 ? void 0 : _window$history$state2.id) != null ? _ref4 : (0, _nonSecure.nanoid)();
      var pathWithHash = path;
      if (!items.length || items.findIndex(function (item) {
        return item.id === id;
      }) < 0) {
        pathWithHash = pathWithHash + location.hash;
        items = [{
          path: pathWithHash,
          state: state,
          id: id
        }];
        index = 0;
      } else {
        if (items[index].path === path) {
          pathWithHash = pathWithHash + location.hash;
        }
        items[index] = {
          path: path,
          state: state,
          id: id
        };
      }
      window.history.replaceState({
        id: id
      }, '', pathWithHash);
    },
    go: function go(n) {
      interrupt();
      var nextIndex = index + n;
      var lastItemIndex = items.length - 1;
      if (n < 0 && !items[nextIndex]) {
        n = -index;
        index = 0;
      } else if (n > 0 && nextIndex > lastItemIndex) {
        n = lastItemIndex - index;
        index = lastItemIndex;
      } else {
        index = nextIndex;
      }
      if (n === 0) {
        return;
      }
      return new Promise(function (resolve, reject) {
        var done = function done(interrupted) {
          clearTimeout(timer);
          if (interrupted) {
            reject(new Error('History was changed during navigation.'));
            return;
          }
          var title = window.document.title;
          window.document.title = '';
          window.document.title = title;
          resolve();
        };
        pending.push({
          ref: done,
          cb: done
        });
        var timer = setTimeout(function () {
          var index = pending.findIndex(function (it) {
            return it.ref === done;
          });
          if (index > -1) {
            pending[index].cb();
            pending.splice(index, 1);
          }
        }, 100);
        var _onPopState = function onPopState() {
          var _window$history$state3;
          var id = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id;
          var currentIndex = items.findIndex(function (item) {
            return item.id === id;
          });
          index = Math.max(currentIndex, 0);
          var last = pending.pop();
          window.removeEventListener('popstate', _onPopState);
          last === null || last === void 0 ? void 0 : last.cb();
        };
        window.addEventListener('popstate', _onPopState);
        window.history.go(n);
      });
    },
    listen: function listen(listener) {
      var onPopState = function onPopState() {
        if (pending.length) {
          return;
        }
        listener();
      };
      window.addEventListener('popstate', onPopState);
      return function () {
        return window.removeEventListener('popstate', onPopState);
      };
    }
  };
  return history;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJpbmRleCIsIml0ZW1zIiwicGVuZGluZyIsImludGVycnVwdCIsImZvckVhY2giLCJpdCIsImNiIiwiaGlzdG9yeSIsIl93aW5kb3ckaGlzdG9yeSRzdGF0ZSIsImlkIiwid2luZG93Iiwic3RhdGUiLCJmaW5kSW5kZXgiLCJpdGVtIiwiZ2V0IiwiYmFja0luZGV4IiwiX3JlZiIsInBhdGgiLCJpIiwicHVzaCIsIl9yZWYyIiwibmFub2lkIiwic2xpY2UiLCJsZW5ndGgiLCJwdXNoU3RhdGUiLCJyZXBsYWNlIiwiX3JlZjMiLCJfcmVmNCIsIl93aW5kb3ckaGlzdG9yeSRzdGF0ZTIiLCJwYXRoV2l0aEhhc2giLCJsb2NhdGlvbiIsImhhc2giLCJyZXBsYWNlU3RhdGUiLCJnbyIsIm4iLCJuZXh0SW5kZXgiLCJsYXN0SXRlbUluZGV4IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkb25lIiwiaW50ZXJydXB0ZWQiLCJjbGVhclRpbWVvdXQiLCJ0aW1lciIsIkVycm9yIiwidGl0bGUiLCJkb2N1bWVudCIsInJlZiIsInNldFRpbWVvdXQiLCJzcGxpY2UiLCJvblBvcFN0YXRlIiwiX3dpbmRvdyRoaXN0b3J5JHN0YXRlMyIsImN1cnJlbnRJbmRleCIsIk1hdGgiLCJtYXgiLCJsYXN0IiwicG9wIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJsaXN0ZW5lciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcmVhdGVNZW1vcnlIaXN0b3J5LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBV2UsU0FBU0MsbUJBQW1CQSxDQUFBLEVBQUc7RUFDNUMsSUFBSUMsS0FBSyxHQUFHLENBQUM7RUFDYixJQUFJQyxLQUFzQixHQUFHLEVBQUU7RUFJL0Is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VUFBQSxFQUFDO1VBRXhELElBQUl4QyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZEUsT0FBTyxDQUFDRixLQUFLLENBQUMsQ0FBQ00sRUFBRSxFQUFFO1lBQ25CSixPQUFPLENBQUMrQyxNQUFNLENBQUNqRCxLQUFLLEVBQUUsQ0FBQyxDQUFDO1VBQzFCO1FBQ0YsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUVQLElBQU1rRCxXQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFTO1VBQUEsSUFBQUMsc0JBQUE7VUFDdkIsSUFBTTFDLEVBQUUsSUFBQTBDLHNCQUFBLEdBQUd6QyxNQUFNLENBQUNILE9BQU8sQ0FBQ0ksS0FBSyxjQUFBd0Msc0JBQUEsdUJBQXBCQSxzQkFBQSxDQUFzQjFDLEVBQUU7VUFDbkMsSUFBTTJDLFlBQVksR0FBR25ELEtBQUssQ0FBQ1csU0FBUyxDQUFFLFVBQUFDLElBQUk7WUFBQSxPQUFLQSxJQUFJLENBQUNKLEVBQUUsS0FBS0EsRUFBRTtVQUFBLEVBQUM7VUFJOURULEtBQUssR0FBR3FELElBQUksQ0FBQ0MsR0FBRyxDQUFDRixZQUFZLEVBQUUsQ0FBQyxDQUFDO1VBRWpDLElBQU1HLElBQUksR0FBR3JELE9BQU8sQ0FBQ3NELEdBQUcsRUFBRTtVQUUxQjlDLE1BQU0sQ0FBQytDLG1CQUFtQixDQUFDLFVBQVUsRUFBRVAsV0FBVSxDQUFDO1VBQ2xESyxJQUFJLGFBQUpBLElBQUksdUJBQUpBLElBQUksQ0FBRWpELEVBQUUsRUFBRTtRQUNaLENBQUM7UUFFREksTUFBTSxDQUFDZ0QsZ0JBQWdCLENBQUMsVUFBVSxFQUFFUixXQUFVLENBQUM7UUFDL0N4QyxNQUFNLENBQUNILE9BQU8sQ0FBQzBCLEVBQUUsQ0FBQ0MsQ0FBQyxDQUFDO01BQ3RCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFLRHlCLE1BQU0sV0FBTkEsTUFBTUEsQ0FBQ0MsUUFBb0IsRUFBRTtNQUMzQixJQUFNVixVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFTO1FBQ3ZCLElBQUloRCxPQUFPLENBQUNxQixNQUFNLEVBQUU7VUFFbEI7UUFDRjtRQUVBcUMsUUFBUSxFQUFFO01BQ1osQ0FBQztNQUVEbEQsTUFBTSxDQUFDZ0QsZ0JBQWdCLENBQUMsVUFBVSxFQUFFUixVQUFVLENBQUM7TUFFL0MsT0FBTztRQUFBLE9BQU14QyxNQUFNLENBQUMrQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUVQLFVBQVUsQ0FBQztNQUFBO0lBQ2pFO0VBQ0YsQ0FBQztFQUVELE9BQU8zQyxPQUFPO0FBQ2hCIiwiaWdub3JlTGlzdCI6W119