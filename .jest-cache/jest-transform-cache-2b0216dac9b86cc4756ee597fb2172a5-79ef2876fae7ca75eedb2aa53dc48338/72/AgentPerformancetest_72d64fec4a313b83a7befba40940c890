12adcfe60f2e6c1c205f26bba9515738
_getJestObj().mock('../../services/agentService', function () {
  return mockAgentService;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAgentService = {
  sendMessage: jest.fn(),
  getAgentInfo: jest.fn(),
  startConsultation: jest.fn(),
  endConsultation: jest.fn(),
  getAgentSuggestions: jest.fn()
};
var MockAgentChat = function MockAgentChat(_ref) {
  var agentId = _ref.agentId;
  return null;
};
describe('智能体性能测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('响应时间测试', function () {
    it('智能体消息响应应该在合理时间内', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      mockAgentService.sendMessage.mockResolvedValue({
        id: '1',
        content: '测试回复',
        timestamp: Date.now(),
        sender: 'xiaoai'
      });
      yield mockAgentService.sendMessage('xiaoai', '测试消息');
      var endTime = Date.now();
      var responseTime = endTime - startTime;
      expect(responseTime).toBeLessThan(1000);
    }));
    it('智能体信息获取应该快速响应', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      mockAgentService.getAgentInfo.mockResolvedValue({
        id: 'xiaoai',
        name: '小艾',
        status: 'online',
        capabilities: ['健康咨询', '症状分析']
      });
      yield mockAgentService.getAgentInfo('xiaoai');
      var endTime = Date.now();
      var responseTime = endTime - startTime;
      expect(responseTime).toBeLessThan(500);
    }));
  });
  describe('并发处理测试', function () {
    it('应该能够处理多个并发消息', (0, _asyncToGenerator2.default)(function* () {
      var messageCount = 10;
      var promises = [];
      mockAgentService.sendMessage.mockImplementation(function (agentId, message) {
        return Promise.resolve({
          id: Math.random().toString(),
          content: `回复: ${message}`,
          timestamp: Date.now(),
          sender: agentId
        });
      });
      var startTime = Date.now();
      for (var i = 0; i < messageCount; i++) {
        promises.push(mockAgentService.sendMessage('xiaoai', `消息 ${i}`));
      }
      var results = yield Promise.all(promises);
      var endTime = Date.now();
      var totalTime = endTime - startTime;
      expect(results).toHaveLength(messageCount);
      expect(totalTime).toBeLessThan(2000);
    }));
    it('应该能够处理多智能体并发咨询', (0, _asyncToGenerator2.default)(function* () {
      var agents = ['xiaoai', 'xiaoke', 'laoke', 'soer'];
      var promises = [];
      mockAgentService.startConsultation.mockImplementation(function (agentId) {
        return Promise.resolve({
          sessionId: `session_${agentId}_${Date.now()}`,
          agentId: agentId,
          status: 'active'
        });
      });
      var startTime = Date.now();
      for (var agentId of agents) {
        promises.push(mockAgentService.startConsultation(agentId));
      }
      var results = yield Promise.all(promises);
      var endTime = Date.now();
      var totalTime = endTime - startTime;
      expect(results).toHaveLength(agents.length);
      expect(totalTime).toBeLessThan(1500);
    }));
  });
  describe('组件渲染性能测试', function () {
    it('智能体聊天组件应该快速渲染', function () {
      var startTime = Date.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChat, {
        agentId: "xiaoai"
      }));
      var endTime = Date.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(100);
    });
    it('多个智能体组件应该高效渲染', function () {
      var agents = ['xiaoai', 'xiaoke', 'laoke', 'soer'];
      var startTime = Date.now();
      agents.forEach(function (agentId) {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChat, {
          agentId: agentId
        }));
      });
      var endTime = Date.now();
      var totalRenderTime = endTime - startTime;
      expect(totalRenderTime).toBeLessThan(200);
    });
  });
  describe('内存使用测试', function () {
    it('长时间聊天不应该导致内存泄漏', (0, _asyncToGenerator2.default)(function* () {
      var messageCount = 100;
      var messages = [];
      mockAgentService.sendMessage.mockImplementation(function (agentId, message) {
        var response = {
          id: Math.random().toString(),
          content: '测试回复',
          timestamp: Date.now(),
          sender: 'xiaoai'
        };
        messages.push(response);
        return Promise.resolve(response);
      });
      for (var i = 0; i < messageCount; i++) {
        yield mockAgentService.sendMessage('xiaoai', `消息 ${i}`);
      }
      expect(messages).toHaveLength(messageCount);
      expect(mockAgentService.sendMessage).toHaveBeenCalledTimes(messageCount);
    }));
  });
  describe('负载测试', function () {
    it('应该能够处理高频率消息发送', (0, _asyncToGenerator2.default)(function* () {
      var messageCount = 50;
      var interval = 10;
      mockAgentService.sendMessage.mockResolvedValue({
        id: '1',
        content: '快速回复',
        timestamp: Date.now(),
        sender: 'xiaoai'
      });
      var startTime = Date.now();
      var promises = [];
      var _loop = function* _loop(i) {
        promises.push(new Promise(function (resolve) {
          setTimeout((0, _asyncToGenerator2.default)(function* () {
            var result = yield mockAgentService.sendMessage('xiaoai', `快速消息 ${i}`);
            resolve(result);
          }), i * interval);
        }));
      };
      for (var i = 0; i < messageCount; i++) {
        yield* _loop(i);
      }
      var results = yield Promise.all(promises);
      var endTime = Date.now();
      var totalTime = endTime - startTime;
      expect(results).toHaveLength(messageCount);
      expect(totalTime).toBeLessThan(messageCount * interval + 1000);
    }));
  });
  describe('错误恢复性能测试', function () {
    it('网络错误后应该快速恢复', (0, _asyncToGenerator2.default)(function* () {
      mockAgentService.sendMessage.mockRejectedValueOnce(new Error('网络错误')).mockResolvedValue({
        id: '1',
        content: '恢复后的回复',
        timestamp: Date.now(),
        sender: 'xiaoai'
      });
      var startTime = Date.now();
      try {
        yield mockAgentService.sendMessage('xiaoai', '测试消息');
      } catch (error) {}
      var result = yield mockAgentService.sendMessage('xiaoai', '重试消息');
      var endTime = Date.now();
      var recoveryTime = endTime - startTime;
      expect(result).toBeDefined();
      expect(recoveryTime).toBeLessThan(1000);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,