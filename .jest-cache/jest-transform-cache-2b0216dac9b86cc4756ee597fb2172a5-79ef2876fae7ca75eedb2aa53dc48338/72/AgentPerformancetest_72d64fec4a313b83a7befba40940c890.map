{"version":3,"names":["_getJestObj","mock","mockAgentService","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_jsxRuntime","_require","jest","sendMessage","fn","getAgentInfo","startConsultation","endConsultation","getAgentSuggestions","MockAgentChat","_ref","agentId","describe","beforeEach","clearAllMocks","it","default","startTime","Date","now","mockResolvedValue","id","content","timestamp","sender","endTime","responseTime","expect","toBeLessThan","name","status","capabilities","messageCount","promises","mockImplementation","message","Promise","resolve","Math","random","toString","i","push","results","all","totalTime","toHaveLength","agents","sessionId","length","render","jsx","renderTime","forEach","totalRenderTime","messages","response","toHaveBeenCalledTimes","interval","_loop","setTimeout","result","mockRejectedValueOnce","Error","error","recoveryTime","toBeDefined"],"sources":["AgentPerformance.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n\n// Mock智能体服务\nconst mockAgentService = {\n  sendMessage: jest.fn(),\n  getAgentInfo: jest.fn(),\n  startConsultation: jest.fn(),\n  endConsultation: jest.fn(),\n  getAgentSuggestions: jest.fn(),\n};\n\njest.mock('../../services/agentService', () => mockAgentService);\n\n// Mock组件\nconst MockAgentChat = ({ agentId }: { agentId: string }) => {\n  return null; // 简化的Mock组件\n};\n\ndescribe('智能体性能测试', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('响应时间测试', () => {\n    it('智能体消息响应应该在合理时间内', async () => {\n      const startTime = Date.now();\n      \n      mockAgentService.sendMessage.mockResolvedValue({\n        id: '1',\n        content: '测试回复',\n        timestamp: Date.now(),\n        sender: 'xiaoai'\n      });\n\n      await mockAgentService.sendMessage('xiaoai', '测试消息');\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      // 响应时间应该小于1秒\n      expect(responseTime).toBeLessThan(1000);\n    });\n\n    it('智能体信息获取应该快速响应', async () => {\n      const startTime = Date.now();\n      \n      mockAgentService.getAgentInfo.mockResolvedValue({\n        id: 'xiaoai',\n        name: '小艾',\n        status: 'online',\n        capabilities: ['健康咨询', '症状分析']\n      });\n\n      await mockAgentService.getAgentInfo('xiaoai');\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      // 信息获取应该小于500ms\n      expect(responseTime).toBeLessThan(500);\n    });\n  });\n\n  describe('并发处理测试', () => {\n    it('应该能够处理多个并发消息', async () => {\n      const messageCount = 10;\n      const promises = [];\n      \n      mockAgentService.sendMessage.mockImplementation((agentId, message) => \n        Promise.resolve({\n          id: Math.random().toString(),\n          content: `回复: ${message}`,\n          timestamp: Date.now(),\n          sender: agentId\n        })\n      );\n\n      const startTime = Date.now();\n      \n      for (let i = 0; i < messageCount; i++) {\n        promises.push(\n          mockAgentService.sendMessage('xiaoai', `消息 ${i}`)\n        );\n      }\n      \n      const results = await Promise.all(promises);\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      \n      expect(results).toHaveLength(messageCount);\n      expect(totalTime).toBeLessThan(2000); // 10个并发消息应该在2秒内完成\n    });\n\n    it('应该能够处理多智能体并发咨询', async () => {\n      const agents = ['xiaoai', 'xiaoke', 'laoke', 'soer'];\n      const promises = [];\n      \n      mockAgentService.startConsultation.mockImplementation((agentId) => \n        Promise.resolve({\n          sessionId: `session_${agentId}_${Date.now()}`,\n          agentId,\n          status: 'active'\n        })\n      );\n\n      const startTime = Date.now();\n      \n      for (const agentId of agents) {\n        promises.push(mockAgentService.startConsultation(agentId));\n      }\n      \n      const results = await Promise.all(promises);\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      \n      expect(results).toHaveLength(agents.length);\n      expect(totalTime).toBeLessThan(1500); // 4个智能体咨询应该在1.5秒内启动\n    });\n  });\n\n  describe('组件渲染性能测试', () => {\n    it('智能体聊天组件应该快速渲染', () => {\n      const startTime = Date.now();\n      \n      render(<MockAgentChat agentId=\"xiaoai\" />);\n      \n      const endTime = Date.now();\n      const renderTime = endTime - startTime;\n      \n      // 组件渲染应该小于100ms\n      expect(renderTime).toBeLessThan(100);\n    });\n\n    it('多个智能体组件应该高效渲染', () => {\n      const agents = ['xiaoai', 'xiaoke', 'laoke', 'soer'];\n      const startTime = Date.now();\n      \n      agents.forEach(agentId => {\n        render(<MockAgentChat agentId={agentId} />);\n      });\n      \n      const endTime = Date.now();\n      const totalRenderTime = endTime - startTime;\n      \n      // 4个组件渲染应该小于200ms\n      expect(totalRenderTime).toBeLessThan(200);\n    });\n  });\n\n  describe('内存使用测试', () => {\n    it('长时间聊天不应该导致内存泄漏', async () => {\n      // 模拟内存使用测试，在React Native环境中简化处理\n      const messageCount = 100;\n      const messages: any[] = [];\n      \n      mockAgentService.sendMessage.mockImplementation((agentId, message) => {\n        const response = {\n          id: Math.random().toString(),\n          content: '测试回复',\n          timestamp: Date.now(),\n          sender: 'xiaoai'\n        };\n        messages.push(response);\n        return Promise.resolve(response);\n      });\n\n      // 模拟长时间聊天\n      for (let i = 0; i < messageCount; i++) {\n        await mockAgentService.sendMessage('xiaoai', `消息 ${i}`);\n      }\n      \n      // 验证消息数量正确\n      expect(messages).toHaveLength(messageCount);\n      expect(mockAgentService.sendMessage).toHaveBeenCalledTimes(messageCount);\n    });\n  });\n\n  describe('负载测试', () => {\n    it('应该能够处理高频率消息发送', async () => {\n      const messageCount = 50;\n      const interval = 10; // 10ms间隔\n      \n      mockAgentService.sendMessage.mockResolvedValue({\n        id: '1',\n        content: '快速回复',\n        timestamp: Date.now(),\n        sender: 'xiaoai'\n      });\n\n      const startTime = Date.now();\n      const promises = [];\n      \n      for (let i = 0; i < messageCount; i++) {\n        promises.push(\n          new Promise(resolve => {\n            setTimeout(async () => {\n              const result = await mockAgentService.sendMessage('xiaoai', `快速消息 ${i}`);\n              resolve(result);\n            }, i * interval);\n          })\n        );\n      }\n      \n      const results = await Promise.all(promises);\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n      \n      expect(results).toHaveLength(messageCount);\n      // 高频消息应该在合理时间内完成\n      expect(totalTime).toBeLessThan(messageCount * interval + 1000);\n    });\n  });\n\n  describe('错误恢复性能测试', () => {\n    it('网络错误后应该快速恢复', async () => {\n      // 模拟网络错误\n      mockAgentService.sendMessage\n        .mockRejectedValueOnce(new Error('网络错误'))\n        .mockResolvedValue({\n          id: '1',\n          content: '恢复后的回复',\n          timestamp: Date.now(),\n          sender: 'xiaoai'\n        });\n\n      const startTime = Date.now();\n      \n      try {\n        await mockAgentService.sendMessage('xiaoai', '测试消息');\n      } catch (error) {\n        // 预期的错误\n      }\n      \n      // 重试应该成功\n      const result = await mockAgentService.sendMessage('xiaoai', '重试消息');\n      const endTime = Date.now();\n      const recoveryTime = endTime - startTime;\n      \n      expect(result).toBeDefined();\n      expect(recoveryTime).toBeLessThan(1000); // 错误恢复应该在1秒内\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}