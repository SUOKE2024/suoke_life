e3bcd19b7e6269d39a64479568c9b175
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
describe('useAuth Hook', function () {
  var mockAuthService = {
    login: jest.fn(),
    logout: jest.fn(),
    register: jest.fn(),
    updateProfile: jest.fn(),
    changePassword: jest.fn(),
    getCurrentUser: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('登录功能', function () {
    it('应该成功处理登录', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        name: '测试用户',
        avatar: '👤',
        memberLevel: 'gold'
      };
      mockAuthService.login.mockResolvedValue({
        success: true,
        user: mockUser
      });
      var result = yield mockAuthService.login('test@example.com', 'password123');
      expect(result.success).toBe(true);
      expect(result.user).toEqual(mockUser);
      expect(mockAuthService.login).toHaveBeenCalledWith('test@example.com', 'password123');
    }));
    it('应该处理登录失败', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        success: false,
        error: '用户名或密码错误'
      });
      var result = yield mockAuthService.login('wrong@example.com', 'wrongpassword');
      expect(result.success).toBe(false);
      expect(result.error).toBe('用户名或密码错误');
    }));
  });
  describe('注册功能', function () {
    it('应该成功处理注册', (0, _asyncToGenerator2.default)(function* () {
      var registerData = {
        email: 'newuser@example.com',
        password: 'password123',
        name: '新用户',
        phone: '13800138000'
      };
      mockAuthService.register.mockResolvedValue({
        success: true,
        message: '注册成功'
      });
      var result = yield mockAuthService.register(registerData);
      expect(result.success).toBe(true);
      expect(result.message).toBe('注册成功');
      expect(mockAuthService.register).toHaveBeenCalledWith(registerData);
    }));
    it('应该处理注册失败', (0, _asyncToGenerator2.default)(function* () {
      var registerData = {
        email: 'existing@example.com',
        password: 'password123',
        name: '用户',
        phone: '13800138000'
      };
      mockAuthService.register.mockResolvedValue({
        success: false,
        error: '邮箱已存在'
      });
      var result = yield mockAuthService.register(registerData);
      expect(result.success).toBe(false);
      expect(result.error).toBe('邮箱已存在');
    }));
  });
  describe('用户信息管理', function () {
    it('应该成功获取当前用户信息', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        name: '测试用户',
        avatar: '👤',
        memberLevel: 'gold',
        healthScore: 85,
        joinDate: '2023-03-15'
      };
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: true,
        user: mockUser
      });
      var result = yield mockAuthService.getCurrentUser();
      expect(result.success).toBe(true);
      expect(result.user.id).toBe('user123');
      expect(result.user.email).toBe('test@example.com');
    }));
    it('应该成功更新用户资料', (0, _asyncToGenerator2.default)(function* () {
      var updateData = {
        name: '更新后的用户名',
        avatar: '🙂',
        bio: '这是我的个人简介'
      };
      mockAuthService.updateProfile.mockResolvedValue({
        success: true,
        message: '资料更新成功',
        user: Object.assign({
          id: 'user123'
        }, updateData)
      });
      var result = yield mockAuthService.updateProfile('user123', updateData);
      expect(result.success).toBe(true);
      expect(result.message).toBe('资料更新成功');
      expect(result.user.name).toBe('更新后的用户名');
    }));
  });
  describe('密码管理', function () {
    it('应该成功修改密码', (0, _asyncToGenerator2.default)(function* () {
      var passwordData = {
        currentPassword: 'oldpassword',
        newPassword: 'newpassword123'
      };
      mockAuthService.changePassword.mockResolvedValue({
        success: true,
        message: '密码修改成功'
      });
      var result = yield mockAuthService.changePassword('user123', passwordData);
      expect(result.success).toBe(true);
      expect(result.message).toBe('密码修改成功');
      expect(mockAuthService.changePassword).toHaveBeenCalledWith('user123', passwordData);
    }));
    it('应该处理密码修改失败', (0, _asyncToGenerator2.default)(function* () {
      var passwordData = {
        currentPassword: 'wrongpassword',
        newPassword: 'newpassword123'
      };
      mockAuthService.changePassword.mockResolvedValue({
        success: false,
        error: '当前密码错误'
      });
      var result = yield mockAuthService.changePassword('user123', passwordData);
      expect(result.success).toBe(false);
      expect(result.error).toBe('当前密码错误');
    }));
  });
  describe('登出功能', function () {
    it('应该成功处理登出', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.logout.mockResolvedValue({
        success: true,
        message: '已成功登出'
      });
      var result = yield mockAuthService.logout();
      expect(result.success).toBe(true);
      expect(result.message).toBe('已成功登出');
      expect(mockAuthService.logout).toHaveBeenCalled();
    }));
  });
  describe('错误处理', function () {
    it('应该处理网络错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('网络连接失败'));
      try {
        yield mockAuthService.login('test@example.com', 'password123');
      } catch (error) {
        expect(error.message).toBe('网络连接失败');
      }
    }));
    it('应该处理服务器错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.getCurrentUser.mockResolvedValue({
        success: false,
        error: '服务器内部错误',
        code: 500
      });
      var result = yield mockAuthService.getCurrentUser();
      expect(result.success).toBe(false);
      expect(result.error).toBe('服务器内部错误');
      expect(result.code).toBe(500);
    }));
  });
  describe('状态管理', function () {
    it('应该正确管理认证状态', function () {
      var isAuthenticated = false;
      var user = null;
      var isLoading = false;
      var simulateLogin = function simulateLogin() {
        isLoading = true;
        setTimeout(function () {
          isAuthenticated = true;
          user = {
            id: 'user123',
            name: '测试用户'
          };
          isLoading = false;
        }, 100);
      };
      var simulateLogout = function simulateLogout() {
        isAuthenticated = false;
        user = null;
      };
      expect(isAuthenticated).toBe(false);
      expect(user).toBe(null);
      expect(isLoading).toBe(false);
      simulateLogin();
      expect(isLoading).toBe(true);
      simulateLogout();
      expect(isAuthenticated).toBe(false);
      expect(user).toBe(null);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,