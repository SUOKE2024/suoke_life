08b1faee09227fdbb71f818a96ff6daa
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Button = require("../../../components/common/Button");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
describe('Button Component', function () {
  var defaultOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('基础功能', function () {
    it('应该正确渲染按钮文本', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u6D4B\u8BD5\u6309\u94AE",
          onPress: defaultOnPress
        })),
        toJSON = _render.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('测试按钮');
    });
    it('应该响应点击事件', function () {
      var onPress = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u70B9\u51FB\u6211",
          onPress: onPress
        })),
        root = _render2.root;
      _reactNative.fireEvent.press(root);
      expect(onPress).toHaveBeenCalledTimes(1);
    });
    it('禁用状态下不应响应点击', function () {
      var onPress = jest.fn();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u7981\u7528\u6309\u94AE",
          onPress: onPress,
          disabled: true
        })),
        root = _render3.root;
      _reactNative.fireEvent.press(root);
      expect(onPress).not.toHaveBeenCalled();
    });
    it('应该显示加载状态', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u52A0\u8F7D\u4E2D",
          onPress: defaultOnPress,
          loading: true
        })),
        toJSON = _render4.toJSON;
      var tree = toJSON();
      var treeString = JSON.stringify(tree);
      expect(treeString).toContain('progressbar');
      expect(treeString).not.toContain('加载中');
    });
    it('应该正确应用自定义样式', function () {
      var customStyle = {
        backgroundColor: 'red'
      };
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u81EA\u5B9A\u4E49\u6837\u5F0F",
          onPress: defaultOnPress,
          style: customStyle
        })),
        toJSON = _render5.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('自定义样式');
    });
  });
  describe('可访问性', function () {
    it('应该正确渲染按钮', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u89D2\u8272\u6D4B\u8BD5",
          onPress: defaultOnPress
        })),
        toJSON = _render6.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('角色测试');
    });
    it('禁用状态应该正确显示', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u7981\u7528\u6D4B\u8BD5",
          onPress: defaultOnPress,
          disabled: true
        })),
        toJSON = _render7.toJSON;
      var tree = toJSON();
      var treeString = JSON.stringify(tree);
      expect(treeString).toContain('禁用测试');
      expect(treeString).toContain('aria-disabled');
    });
    it('加载状态应该显示指示器', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u52A0\u8F7D\u6D4B\u8BD5",
          onPress: defaultOnPress,
          loading: true
        })),
        toJSON = _render8.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('progressbar');
    });
  });
  describe('按钮变体', function () {
    it('应该正确渲染主要按钮', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u4E3B\u8981\u6309\u94AE",
          onPress: defaultOnPress,
          variant: "primary"
        })),
        toJSON = _render9.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('主要按钮');
    });
    it('应该正确渲染次要按钮', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u6B21\u8981\u6309\u94AE",
          onPress: defaultOnPress,
          variant: "secondary"
        })),
        toJSON = _render0.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('次要按钮');
    });
    it('应该正确渲染轮廓按钮', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u8F6E\u5ED3\u6309\u94AE",
          onPress: defaultOnPress,
          variant: "outline"
        })),
        toJSON = _render1.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('轮廓按钮');
    });
  });
  describe('按钮尺寸', function () {
    it('应该正确渲染小尺寸按钮', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u5C0F\u6309\u94AE",
          onPress: defaultOnPress,
          size: "small"
        })),
        toJSON = _render10.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('小按钮');
    });
    it('应该正确渲染中等尺寸按钮', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u4E2D\u7B49\u6309\u94AE",
          onPress: defaultOnPress,
          size: "medium"
        })),
        toJSON = _render11.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('中等按钮');
    });
    it('应该正确渲染大尺寸按钮', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u5927\u6309\u94AE",
          onPress: defaultOnPress,
          size: "large"
        })),
        toJSON = _render12.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('大按钮');
    });
  });
  describe('性能测试', function () {
    it('应该在合理时间内渲染', function () {
      var startTime = performance.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "\u6027\u80FD\u6D4B\u8BD5",
        onPress: defaultOnPress
      }));
      var endTime = performance.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(100);
    });
    it('应该高效处理多次点击', function () {
      var onPress = jest.fn();
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u70B9\u51FB\u6D4B\u8BD5",
          onPress: onPress
        })),
        root = _render13.root;
      var startTime = performance.now();
      for (var i = 0; i < 100; i++) {
        _reactNative.fireEvent.press(root);
      }
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(1000);
      expect(onPress).toHaveBeenCalledTimes(100);
    });
    it('不应该有明显的性能问题', function () {
      var iterations = 10;
      var times = [];
      for (var i = 0; i < iterations; i++) {
        var startTime = performance.now();
        var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
            title: "\u6027\u80FD\u6D4B\u8BD5",
            onPress: defaultOnPress
          })),
          unmount = _render14.unmount;
        var endTime = performance.now();
        unmount();
        times.push(endTime - startTime);
      }
      var averageTime = times.reduce(function (sum, time) {
        return sum + time;
      }, 0) / iterations;
      expect(averageTime).toBeLessThan(200);
    });
  });
  describe('快照测试', function () {
    it('默认按钮快照', function () {
      var tree = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "\u9ED8\u8BA4\u6309\u94AE",
        onPress: defaultOnPress
      }));
      expect(tree.toJSON()).toMatchSnapshot();
    });
    it('主要按钮快照', function () {
      var tree = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "\u4E3B\u8981\u6309\u94AE",
        onPress: defaultOnPress,
        variant: "primary"
      }));
      expect(tree.toJSON()).toMatchSnapshot();
    });
    it('禁用按钮快照', function () {
      var tree = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "\u7981\u7528\u6309\u94AE",
        onPress: defaultOnPress,
        disabled: true
      }));
      expect(tree.toJSON()).toMatchSnapshot();
    });
    it('加载状态按钮快照', function () {
      var tree = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "\u52A0\u8F7D\u6309\u94AE",
        onPress: defaultOnPress,
        loading: true
      }));
      expect(tree.toJSON()).toMatchSnapshot();
    });
  });
  describe('边界情况', function () {
    it('应该处理空标题', function () {
      var result = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
        title: "",
        onPress: defaultOnPress
      }));
      expect(result).toBeTruthy();
    });
    it('应该处理长标题', function () {
      var longTitle = '这是一个非常非常非常长的按钮标题，用来测试文本溢出处理';
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: longTitle,
          onPress: defaultOnPress
        })),
        toJSON = _render15.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain(longTitle);
    });
    it('应该处理特殊字符', function () {
      var specialTitle = '按钮 🚀 测试 & 特殊字符';
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: specialTitle,
          onPress: defaultOnPress
        })),
        toJSON = _render16.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain(specialTitle);
    });
    it('应该处理同时设置loading和disabled', function () {
      var onPress = jest.fn();
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u6D4B\u8BD5",
          onPress: onPress,
          loading: true,
          disabled: true
        })),
        toJSON = _render17.toJSON,
        root = _render17.root;
      var tree = toJSON();
      var treeString = JSON.stringify(tree);
      expect(treeString).toContain('progressbar');
      expect(treeString).toContain('aria-disabled');
      _reactNative.fireEvent.press(root);
      expect(onPress).not.toHaveBeenCalled();
    });
  });
  describe('集成测试', function () {
    it('应该与表单正确集成', function () {
      var onSubmit = jest.fn();
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u63D0\u4EA4",
          onPress: onSubmit
        })),
        root = _render18.root;
      _reactNative.fireEvent.press(root);
      expect(onSubmit).toHaveBeenCalled();
    });
    it('应该与导航正确集成', function () {
      var navigate = mockNavigate;
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u5BFC\u822A",
          onPress: function onPress() {
            return navigate('Home');
          }
        })),
        root = _render19.root;
      _reactNative.fireEvent.press(root);
      expect(navigate).toHaveBeenCalledWith('Home');
    });
    it('应该支持自定义文本样式', function () {
      var customTextStyle = {
        color: 'blue',
        fontSize: 20
      };
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.Button, {
          title: "\u81EA\u5B9A\u4E49\u6587\u672C",
          onPress: defaultOnPress,
          textStyle: customTextStyle
        })),
        toJSON = _render20.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('自定义文本');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,