e4210e449a4953213480f4de4cc2f2dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var mockHealthData = {
  todaySteps: 8500,
  stepGoal: 10000,
  heartRate: 72,
  bloodPressure: {
    systolic: 120,
    diastolic: 80
  },
  sleepHours: 7.5,
  waterIntake: 1200,
  waterGoal: 2000
};
var mockAgents = [{
  id: 'xiaoai',
  name: '小艾',
  status: 'online',
  specialty: '健康咨询'
}, {
  id: 'xiaoke',
  name: '小克',
  status: 'online',
  specialty: '疾病预防'
}, {
  id: 'laoke',
  name: '老克',
  status: 'offline',
  specialty: '中医调理'
}, {
  id: 'soer',
  name: '索儿',
  status: 'online',
  specialty: '生活指导'
}];
var MockHomeScreen = function MockHomeScreen() {
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    refreshing = _React$useState2[0],
    setRefreshing = _React$useState2[1];
  var _React$useState3 = _react.default.useState(null),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    selectedQuickAction = _React$useState4[0],
    setSelectedQuickAction = _React$useState4[1];
  var handleRefresh = function handleRefresh() {
    setRefreshing(true);
    setTimeout(function () {
      return setRefreshing(false);
    }, 1000);
  };
  var handleQuickAction = function handleQuickAction(action) {
    setSelectedQuickAction(action);
  };
  var handleAgentPress = function handleAgentPress(agentId) {};
  return (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
    testID: "home-screen",
    refreshControl: (0, _jsxRuntime.jsx)(_reactNative2.RefreshControl, {
      refreshing: refreshing,
      onRefresh: handleRefresh
    }),
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "welcome-section",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "welcome-text",
        children: "\u6B22\u8FCE\u56DE\u6765\uFF01"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "current-time",
        children: new Date().toLocaleTimeString()
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "health-overview",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "health-title",
        children: "\u4ECA\u65E5\u5065\u5EB7\u6982\u89C8"
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "steps-card",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "steps-label",
          children: "\u6B65\u6570"
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "steps-value",
          children: mockHealthData.todaySteps
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "steps-goal",
          children: ["\u76EE\u6807: ", mockHealthData.stepGoal]
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "steps-progress",
          children: [Math.round(mockHealthData.todaySteps / mockHealthData.stepGoal * 100), "%"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "heart-rate-card",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "heart-rate-label",
          children: "\u5FC3\u7387"
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "heart-rate-value",
          children: [mockHealthData.heartRate, " bpm"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "blood-pressure-card",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "blood-pressure-label",
          children: "\u8840\u538B"
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "blood-pressure-value",
          children: [mockHealthData.bloodPressure.systolic, "/", mockHealthData.bloodPressure.diastolic]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "sleep-card",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "sleep-label",
          children: "\u7761\u7720"
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "sleep-value",
          children: [mockHealthData.sleepHours, " \u5C0F\u65F6"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "water-card",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "water-label",
          children: "\u996E\u6C34"
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "water-value",
          children: [mockHealthData.waterIntake, "ml"]
        }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          testID: "water-goal",
          children: ["\u76EE\u6807: ", mockHealthData.waterGoal, "ml"]
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "agents-section",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "agents-title",
        children: "\u667A\u80FD\u4F53\u52A9\u624B"
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "agents-grid",
        children: mockAgents.map(function (agent) {
          return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
            testID: `agent-${agent.id}`,
            onPress: function onPress() {
              return handleAgentPress(agent.id);
            },
            children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
              testID: `agent-card-${agent.id}`,
              children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
                testID: `agent-name-${agent.id}`,
                children: agent.name
              }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                testID: `agent-specialty-${agent.id}`,
                children: agent.specialty
              }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                testID: `agent-status-${agent.id}`,
                children: agent.status === 'online' ? '在线' : '离线'
              })]
            })
          }, agent.id);
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "quick-actions",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "quick-actions-title",
        children: "\u5FEB\u6377\u64CD\u4F5C"
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "quick-actions-grid",
        children: [{
          id: 'measure',
          label: '健康测量',
          icon: 'heart'
        }, {
          id: 'record',
          label: '记录数据',
          icon: 'edit'
        }, {
          id: 'report',
          label: '健康报告',
          icon: 'chart'
        }, {
          id: 'reminder',
          label: '设置提醒',
          icon: 'bell'
        }].map(function (action) {
          return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
            testID: `quick-action-${action.id}`,
            onPress: function onPress() {
              return handleQuickAction(action.id);
            },
            children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
              testID: `action-card-${action.id}`,
              children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
                testID: `action-icon-${action.id}`,
                children: action.icon
              }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                testID: `action-label-${action.id}`,
                children: action.label
              })]
            })
          }, action.id);
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "health-tips",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "tips-title",
        children: "\u4ECA\u65E5\u5065\u5EB7\u5EFA\u8BAE"
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "tips-list",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "tip-1",
          children: "\u4FDD\u6301\u89C4\u5F8B\u7684\u8FD0\u52A8\u4E60\u60EF\uFF0C\u6BCF\u5929\u81F3\u5C1130\u5206\u949F"
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "tip-2",
          children: "\u591A\u559D\u6C34\uFF0C\u4FDD\u6301\u8EAB\u4F53\u6C34\u5206\u5E73\u8861"
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "tip-3",
          children: "\u4FDD\u8BC1\u5145\u8DB3\u7684\u7761\u7720\uFF0C\u5EFA\u8BAE7-8\u5C0F\u65F6"
        })]
      })]
    }), selectedQuickAction && (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "selected-action-info",
      children: (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "selected-action-text",
        children: ["\u5DF2\u9009\u62E9: ", selectedQuickAction]
      })
    })]
  });
};
describe('HomeScreen', function () {
  it('应该正确渲染首页', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('home-screen')).toBeTruthy();
    expect(getByTestId('welcome-section')).toBeTruthy();
    expect(getByText('欢迎回来！')).toBeTruthy();
  });
  it('应该显示当前时间', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('current-time')).toBeTruthy();
  });
  it('应该显示健康概览数据', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    expect(getByTestId('health-overview')).toBeTruthy();
    expect(getByText('今日健康概览')).toBeTruthy();
    expect(getByText('8500')).toBeTruthy();
    expect(getByText('72 bpm')).toBeTruthy();
    expect(getByText('120/80')).toBeTruthy();
    expect(getByText('7.5 小时')).toBeTruthy();
    expect(getByText('1200ml')).toBeTruthy();
  });
  it('应该正确计算步数完成百分比', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByText = _render4.getByText;
    expect(getByText('85%')).toBeTruthy();
  });
  it('应该显示所有智能体', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render5.getByTestId,
      getByText = _render5.getByText;
    expect(getByTestId('agents-section')).toBeTruthy();
    expect(getByText('智能体助手')).toBeTruthy();
    mockAgents.forEach(function (agent) {
      expect(getByTestId(`agent-${agent.id}`)).toBeTruthy();
      expect(getByText(agent.name)).toBeTruthy();
      expect(getByText(agent.specialty)).toBeTruthy();
    });
  });
  it('应该显示智能体在线状态', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getAllByText = _render6.getAllByText;
    var onlineElements = getAllByText('在线');
    var offlineElements = getAllByText('离线');
    expect(onlineElements.length).toBeGreaterThan(0);
    expect(offlineElements.length).toBeGreaterThan(0);
  });
  it('应该支持智能体点击', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render7.getByTestId;
    var xiaoaiAgent = getByTestId('agent-xiaoai');
    _reactNative.fireEvent.press(xiaoaiAgent);
    expect(xiaoaiAgent).toBeTruthy();
  });
  it('应该显示快捷操作', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render8.getByTestId,
      getByText = _render8.getByText;
    expect(getByTestId('quick-actions')).toBeTruthy();
    expect(getByText('快捷操作')).toBeTruthy();
    var actions = ['measure', 'record', 'report', 'reminder'];
    actions.forEach(function (action) {
      expect(getByTestId(`quick-action-${action}`)).toBeTruthy();
    });
    expect(getByText('健康测量')).toBeTruthy();
    expect(getByText('记录数据')).toBeTruthy();
    expect(getByText('健康报告')).toBeTruthy();
    expect(getByText('设置提醒')).toBeTruthy();
  });
  it('应该支持快捷操作点击', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render9.getByTestId,
      queryByTestId = _render9.queryByTestId;
    expect(queryByTestId('selected-action-info')).toBeNull();
    var measureAction = getByTestId('quick-action-measure');
    _reactNative.fireEvent.press(measureAction);
    expect(getByTestId('selected-action-info')).toBeTruthy();
  });
  it('应该显示健康建议', function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render0.getByTestId,
      getByText = _render0.getByText;
    expect(getByTestId('health-tips')).toBeTruthy();
    expect(getByText('今日健康建议')).toBeTruthy();
    expect(getByText('保持规律的运动习惯，每天至少30分钟')).toBeTruthy();
    expect(getByText('多喝水，保持身体水分平衡')).toBeTruthy();
    expect(getByText('保证充足的睡眠，建议7-8小时')).toBeTruthy();
  });
  it('应该支持下拉刷新', (0, _asyncToGenerator2.default)(function* () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render1.getByTestId;
    var scrollView = getByTestId('home-screen');
    (0, _reactNative.fireEvent)(scrollView, 'refresh');
    yield (0, _reactNative.waitFor)(function () {
      expect(scrollView).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
  it('应该正确显示健康数据卡片', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render10.getByTestId;
    var healthCards = ['steps-card', 'heart-rate-card', 'blood-pressure-card', 'sleep-card', 'water-card'];
    healthCards.forEach(function (cardId) {
      expect(getByTestId(cardId)).toBeTruthy();
    });
  });
  it('应该显示水分摄入进度', function () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByText = _render11.getByText;
    expect(getByText('目标: 2000ml')).toBeTruthy();
  });
  it('应该支持滚动查看所有内容', function () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render12.getByTestId;
    var scrollView = getByTestId('home-screen');
    _reactNative.fireEvent.scroll(scrollView, {
      nativeEvent: {
        contentOffset: {
          y: 200
        },
        contentSize: {
          height: 1000
        },
        layoutMeasurement: {
          height: 600
        }
      }
    });
    expect(scrollView).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsIm1vY2tIZWFsdGhEYXRhIiwidG9kYXlTdGVwcyIsInN0ZXBHb2FsIiwiaGVhcnRSYXRlIiwiYmxvb2RQcmVzc3VyZSIsInN5c3RvbGljIiwiZGlhc3RvbGljIiwic2xlZXBIb3VycyIsIndhdGVySW50YWtlIiwid2F0ZXJHb2FsIiwibW9ja0FnZW50cyIsImlkIiwibmFtZSIsInN0YXR1cyIsInNwZWNpYWx0eSIsIk1vY2tIb21lU2NyZWVuIiwiX1JlYWN0JHVzZVN0YXRlIiwiUmVhY3QiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwicmVmcmVzaGluZyIsInNldFJlZnJlc2hpbmciLCJfUmVhY3QkdXNlU3RhdGUzIiwiX1JlYWN0JHVzZVN0YXRlNCIsInNlbGVjdGVkUXVpY2tBY3Rpb24iLCJzZXRTZWxlY3RlZFF1aWNrQWN0aW9uIiwiaGFuZGxlUmVmcmVzaCIsInNldFRpbWVvdXQiLCJoYW5kbGVRdWlja0FjdGlvbiIsImFjdGlvbiIsImhhbmRsZUFnZW50UHJlc3MiLCJhZ2VudElkIiwianN4cyIsIlNjcm9sbFZpZXciLCJ0ZXN0SUQiLCJyZWZyZXNoQ29udHJvbCIsImpzeCIsIlJlZnJlc2hDb250cm9sIiwib25SZWZyZXNoIiwiY2hpbGRyZW4iLCJWaWV3IiwiVGV4dCIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJNYXRoIiwicm91bmQiLCJtYXAiLCJhZ2VudCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwibGFiZWwiLCJpY29uIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsIl9yZW5kZXIzIiwiX3JlbmRlcjQiLCJfcmVuZGVyNSIsImZvckVhY2giLCJfcmVuZGVyNiIsImdldEFsbEJ5VGV4dCIsIm9ubGluZUVsZW1lbnRzIiwib2ZmbGluZUVsZW1lbnRzIiwibGVuZ3RoIiwidG9CZUdyZWF0ZXJUaGFuIiwiX3JlbmRlcjciLCJ4aWFvYWlBZ2VudCIsImZpcmVFdmVudCIsInByZXNzIiwiX3JlbmRlcjgiLCJhY3Rpb25zIiwiX3JlbmRlcjkiLCJxdWVyeUJ5VGVzdElkIiwidG9CZU51bGwiLCJtZWFzdXJlQWN0aW9uIiwiX3JlbmRlcjAiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVuZGVyMSIsInNjcm9sbFZpZXciLCJ3YWl0Rm9yIiwidGltZW91dCIsIl9yZW5kZXIxMCIsImhlYWx0aENhcmRzIiwiY2FyZElkIiwiX3JlbmRlcjExIiwiX3JlbmRlcjEyIiwic2Nyb2xsIiwibmF0aXZlRXZlbnQiLCJjb250ZW50T2Zmc2V0IiwieSIsImNvbnRlbnRTaXplIiwiaGVpZ2h0IiwibGF5b3V0TWVhc3VyZW1lbnQiXSwic291cmNlcyI6WyJIb21lU2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IFZpZXcsIFRleHQsIFNjcm9sbFZpZXcsIFRvdWNoYWJsZU9wYWNpdHksIFJlZnJlc2hDb250cm9sIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gTW9ja+aVsOaNrlxuY29uc3QgbW9ja0hlYWx0aERhdGEgPSB7XG4gIHRvZGF5U3RlcHM6IDg1MDAsXG4gIHN0ZXBHb2FsOiAxMDAwMCxcbiAgaGVhcnRSYXRlOiA3MixcbiAgYmxvb2RQcmVzc3VyZTogeyBzeXN0b2xpYzogMTIwLCBkaWFzdG9saWM6IDgwIH0sXG4gIHNsZWVwSG91cnM6IDcuNSxcbiAgd2F0ZXJJbnRha2U6IDEyMDAsXG4gIHdhdGVyR29hbDogMjAwMCxcbn07XG5cbmNvbnN0IG1vY2tBZ2VudHMgPSBbXG4gIHsgaWQ6ICd4aWFvYWknLCBuYW1lOiAn5bCP6Im+Jywgc3RhdHVzOiAnb25saW5lJywgc3BlY2lhbHR5OiAn5YGl5bq35ZKo6K+iJyB9LFxuICB7IGlkOiAneGlhb2tlJywgbmFtZTogJ+Wwj+WFiycsIHN0YXR1czogJ29ubGluZScsIHNwZWNpYWx0eTogJ+eWvueXhemihOmYsicgfSxcbiAgeyBpZDogJ2xhb2tlJywgbmFtZTogJ+iAgeWFiycsIHN0YXR1czogJ29mZmxpbmUnLCBzcGVjaWFsdHk6ICfkuK3ljLvosIPnkIYnIH0sXG4gIHsgaWQ6ICdzb2VyJywgbmFtZTogJ+e0ouWEvycsIHN0YXR1czogJ29ubGluZScsIHNwZWNpYWx0eTogJ+eUn+a0u+aMh+WvvCcgfSxcbl07XG5cbi8vIE1vY2vpppbpobXnu4Tku7ZcbmNvbnN0IE1vY2tIb21lU2NyZWVuID0gKCkgPT4ge1xuICBjb25zdCBbcmVmcmVzaGluZywgc2V0UmVmcmVzaGluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzZWxlY3RlZFF1aWNrQWN0aW9uLCBzZXRTZWxlY3RlZFF1aWNrQWN0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGhhbmRsZVJlZnJlc2ggPSAoKSA9PiB7XG4gICAgc2V0UmVmcmVzaGluZyh0cnVlKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHNldFJlZnJlc2hpbmcoZmFsc2UpLCAxMDAwKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVRdWlja0FjdGlvbiA9IChhY3Rpb246IHN0cmluZykgPT4ge1xuICAgIHNldFNlbGVjdGVkUXVpY2tBY3Rpb24oYWN0aW9uKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVBZ2VudFByZXNzID0gKGFnZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIC8vIOaooeaLn+WvvOiIquWIsOaZuuiDveS9k+iBiuWkqVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFNjcm9sbFZpZXdcbiAgICAgIHRlc3RJRD1cImhvbWUtc2NyZWVuXCJcbiAgICAgIHJlZnJlc2hDb250cm9sPXtcbiAgICAgICAgPFJlZnJlc2hDb250cm9sIHJlZnJlc2hpbmc9e3JlZnJlc2hpbmd9IG9uUmVmcmVzaD17aGFuZGxlUmVmcmVzaH0gLz5cbiAgICAgIH1cbiAgICA+XG4gICAgICB7Lyog5qyi6L+O5Yy65Z+fICovfVxuICAgICAgPFZpZXcgdGVzdElEPVwid2VsY29tZS1zZWN0aW9uXCI+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cIndlbGNvbWUtdGV4dFwiPuasoui/juWbnuadpe+8gTwvVGV4dD5cbiAgICAgICAgPFRleHQgdGVzdElEPVwiY3VycmVudC10aW1lXCI+e25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9PC9UZXh0PlxuICAgICAgPC9WaWV3PlxuXG4gICAgICB7Lyog5YGl5bq35qaC6KeIICovfVxuICAgICAgPFZpZXcgdGVzdElEPVwiaGVhbHRoLW92ZXJ2aWV3XCI+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cImhlYWx0aC10aXRsZVwiPuS7iuaXpeWBpeW6t+amguiniDwvVGV4dD5cbiAgICAgICAgXG4gICAgICAgIHsvKiDmraXmlbDljaHniYcgKi99XG4gICAgICAgIDxWaWV3IHRlc3RJRD1cInN0ZXBzLWNhcmRcIj5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJzdGVwcy1sYWJlbFwiPuatpeaVsDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJzdGVwcy12YWx1ZVwiPnttb2NrSGVhbHRoRGF0YS50b2RheVN0ZXBzfTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJzdGVwcy1nb2FsXCI+55uu5qCHOiB7bW9ja0hlYWx0aERhdGEuc3RlcEdvYWx9PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cInN0ZXBzLXByb2dyZXNzXCI+XG4gICAgICAgICAgICB7TWF0aC5yb3VuZCgobW9ja0hlYWx0aERhdGEudG9kYXlTdGVwcyAvIG1vY2tIZWFsdGhEYXRhLnN0ZXBHb2FsKSAqIDEwMCl9JVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuXG4gICAgICAgIHsvKiDlv4PnjofljaHniYcgKi99XG4gICAgICAgIDxWaWV3IHRlc3RJRD1cImhlYXJ0LXJhdGUtY2FyZFwiPlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cImhlYXJ0LXJhdGUtbGFiZWxcIj7lv4Pnjoc8L1RleHQ+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwiaGVhcnQtcmF0ZS12YWx1ZVwiPnttb2NrSGVhbHRoRGF0YS5oZWFydFJhdGV9IGJwbTwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuXG4gICAgICAgIHsvKiDooYDljovljaHniYcgKi99XG4gICAgICAgIDxWaWV3IHRlc3RJRD1cImJsb29kLXByZXNzdXJlLWNhcmRcIj5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJibG9vZC1wcmVzc3VyZS1sYWJlbFwiPuihgOWOizwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJibG9vZC1wcmVzc3VyZS12YWx1ZVwiPlxuICAgICAgICAgICAge21vY2tIZWFsdGhEYXRhLmJsb29kUHJlc3N1cmUuc3lzdG9saWN9L3ttb2NrSGVhbHRoRGF0YS5ibG9vZFByZXNzdXJlLmRpYXN0b2xpY31cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvVmlldz5cblxuICAgICAgICB7Lyog552h55yg5Y2h54mHICovfVxuICAgICAgICA8VmlldyB0ZXN0SUQ9XCJzbGVlcC1jYXJkXCI+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwic2xlZXAtbGFiZWxcIj7nnaHnnKA8L1RleHQ+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwic2xlZXAtdmFsdWVcIj57bW9ja0hlYWx0aERhdGEuc2xlZXBIb3Vyc30g5bCP5pe2PC9UZXh0PlxuICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgey8qIOmlruawtOWNoeeJhyAqL31cbiAgICAgICAgPFZpZXcgdGVzdElEPVwid2F0ZXItY2FyZFwiPlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cIndhdGVyLWxhYmVsXCI+6aWu5rC0PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cIndhdGVyLXZhbHVlXCI+e21vY2tIZWFsdGhEYXRhLndhdGVySW50YWtlfW1sPC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cIndhdGVyLWdvYWxcIj7nm67moIc6IHttb2NrSGVhbHRoRGF0YS53YXRlckdvYWx9bWw8L1RleHQ+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVmlldz5cblxuICAgICAgey8qIOaZuuiDveS9k+WMuuWfnyAqL31cbiAgICAgIDxWaWV3IHRlc3RJRD1cImFnZW50cy1zZWN0aW9uXCI+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cImFnZW50cy10aXRsZVwiPuaZuuiDveS9k+WKqeaJizwvVGV4dD5cbiAgICAgICAgPFZpZXcgdGVzdElEPVwiYWdlbnRzLWdyaWRcIj5cbiAgICAgICAgICB7bW9ja0FnZW50cy5tYXAoYWdlbnQgPT4gKFxuICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgICAga2V5PXthZ2VudC5pZH1cbiAgICAgICAgICAgICAgdGVzdElEPXtgYWdlbnQtJHthZ2VudC5pZH1gfVxuICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiBoYW5kbGVBZ2VudFByZXNzKGFnZW50LmlkKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFZpZXcgdGVzdElEPXtgYWdlbnQtY2FyZC0ke2FnZW50LmlkfWB9PlxuICAgICAgICAgICAgICAgIDxUZXh0IHRlc3RJRD17YGFnZW50LW5hbWUtJHthZ2VudC5pZH1gfT57YWdlbnQubmFtZX08L1RleHQ+XG4gICAgICAgICAgICAgICAgPFRleHQgdGVzdElEPXtgYWdlbnQtc3BlY2lhbHR5LSR7YWdlbnQuaWR9YH0+e2FnZW50LnNwZWNpYWx0eX08L1RleHQ+XG4gICAgICAgICAgICAgICAgPFRleHQgdGVzdElEPXtgYWdlbnQtc3RhdHVzLSR7YWdlbnQuaWR9YH0+XG4gICAgICAgICAgICAgICAgICB7YWdlbnQuc3RhdHVzID09PSAnb25saW5lJyA/ICflnKjnur8nIDogJ+emu+e6vyd9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVmlldz5cblxuICAgICAgey8qIOW/q+aNt+aTjeS9nCAqL31cbiAgICAgIDxWaWV3IHRlc3RJRD1cInF1aWNrLWFjdGlvbnNcIj5cbiAgICAgICAgPFRleHQgdGVzdElEPVwicXVpY2stYWN0aW9ucy10aXRsZVwiPuW/q+aNt+aTjeS9nDwvVGV4dD5cbiAgICAgICAgPFZpZXcgdGVzdElEPVwicXVpY2stYWN0aW9ucy1ncmlkXCI+XG4gICAgICAgICAge1tcbiAgICAgICAgICAgIHsgaWQ6ICdtZWFzdXJlJywgbGFiZWw6ICflgaXlurfmtYvph48nLCBpY29uOiAnaGVhcnQnIH0sXG4gICAgICAgICAgICB7IGlkOiAncmVjb3JkJywgbGFiZWw6ICforrDlvZXmlbDmja4nLCBpY29uOiAnZWRpdCcgfSxcbiAgICAgICAgICAgIHsgaWQ6ICdyZXBvcnQnLCBsYWJlbDogJ+WBpeW6t+aKpeWRiicsIGljb246ICdjaGFydCcgfSxcbiAgICAgICAgICAgIHsgaWQ6ICdyZW1pbmRlcicsIGxhYmVsOiAn6K6+572u5o+Q6YaSJywgaWNvbjogJ2JlbGwnIH0sXG4gICAgICAgICAgXS5tYXAoYWN0aW9uID0+IChcbiAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgIGtleT17YWN0aW9uLmlkfVxuICAgICAgICAgICAgICB0ZXN0SUQ9e2BxdWljay1hY3Rpb24tJHthY3Rpb24uaWR9YH1cbiAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gaGFuZGxlUXVpY2tBY3Rpb24oYWN0aW9uLmlkKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFZpZXcgdGVzdElEPXtgYWN0aW9uLWNhcmQtJHthY3Rpb24uaWR9YH0+XG4gICAgICAgICAgICAgICAgPFRleHQgdGVzdElEPXtgYWN0aW9uLWljb24tJHthY3Rpb24uaWR9YH0+e2FjdGlvbi5pY29ufTwvVGV4dD5cbiAgICAgICAgICAgICAgICA8VGV4dCB0ZXN0SUQ9e2BhY3Rpb24tbGFiZWwtJHthY3Rpb24uaWR9YH0+e2FjdGlvbi5sYWJlbH08L1RleHQ+XG4gICAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9WaWV3PlxuXG4gICAgICB7Lyog5YGl5bq35bu66K6uICovfVxuICAgICAgPFZpZXcgdGVzdElEPVwiaGVhbHRoLXRpcHNcIj5cbiAgICAgICAgPFRleHQgdGVzdElEPVwidGlwcy10aXRsZVwiPuS7iuaXpeWBpeW6t+W7uuiurjwvVGV4dD5cbiAgICAgICAgPFZpZXcgdGVzdElEPVwidGlwcy1saXN0XCI+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwidGlwLTFcIj7kv53mjIHop4TlvovnmoTov5DliqjkuaDmg6/vvIzmr4/lpKnoh7PlsJEzMOWIhumSnzwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJ0aXAtMlwiPuWkmuWWneawtO+8jOS/neaMgei6q+S9k+awtOWIhuW5s+ihoTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJ0aXAtM1wiPuS/neivgeWFhei2s+eahOedoeecoO+8jOW7uuiurjctOOWwj+aXtjwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9WaWV3PlxuXG4gICAgICB7Lyog6YCJ5Lit55qE5b+r5o235pON5L2c5pi+56S6ICovfVxuICAgICAge3NlbGVjdGVkUXVpY2tBY3Rpb24gJiYgKFxuICAgICAgICA8VmlldyB0ZXN0SUQ9XCJzZWxlY3RlZC1hY3Rpb24taW5mb1wiPlxuICAgICAgICAgIDxUZXh0IHRlc3RJRD1cInNlbGVjdGVkLWFjdGlvbi10ZXh0XCI+XG4gICAgICAgICAgICDlt7LpgInmi6k6IHtzZWxlY3RlZFF1aWNrQWN0aW9ufVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKX1cbiAgICA8L1Njcm9sbFZpZXc+XG4gICk7XG59O1xuXG5kZXNjcmliZSgnSG9tZVNjcmVlbicsICgpID0+IHtcbiAgaXQoJ+W6lOivpeato+ehrua4suafk+mmlumhtScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdob21lLXNjcmVlbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd3ZWxjb21lLXNlY3Rpb24nKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ+asoui/juWbnuadpe+8gScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCflupTor6XmmL7npLrlvZPliY3ml7bpl7QnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxNb2NrSG9tZVNjcmVlbiAvPik7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2N1cnJlbnQtdGltZScpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCflupTor6XmmL7npLrlgaXlurfmpoLop4jmlbDmja4nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE1vY2tIb21lU2NyZWVuIC8+KTtcblxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaGVhbHRoLW92ZXJ2aWV3JykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfku4rml6XlgaXlurfmpoLop4gnKSkudG9CZVRydXRoeSgpO1xuICAgIFxuICAgIC8vIOmqjOivgeWQhOmhueWBpeW6t+aVsOaNrlxuICAgIGV4cGVjdChnZXRCeVRleHQoJzg1MDAnKSkudG9CZVRydXRoeSgpOyAvLyDmraXmlbBcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc3MiBicG0nKSkudG9CZVRydXRoeSgpOyAvLyDlv4PnjodcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcxMjAvODAnKSkudG9CZVRydXRoeSgpOyAvLyDooYDljotcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc3LjUg5bCP5pe2JykpLnRvQmVUcnV0aHkoKTsgLy8g552h55ygXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnMTIwMG1sJykpLnRvQmVUcnV0aHkoKTsgLy8g6aWu5rC0XG4gIH0pO1xuXG4gIGl0KCflupTor6XmraPnoa7orqHnrpfmraXmlbDlrozmiJDnmb7liIbmr5QnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgLy8gODUwMCAvIDEwMDAwID0gODUlXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnODUlJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ+W6lOivpeaYvuekuuaJgOacieaZuuiDveS9kycsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdhZ2VudHMtc2VjdGlvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn5pm66IO95L2T5Yqp5omLJykpLnRvQmVUcnV0aHkoKTtcblxuICAgIC8vIOmqjOivgeaJgOacieaZuuiDveS9k+mDveaYvuekulxuICAgIG1vY2tBZ2VudHMuZm9yRWFjaChhZ2VudCA9PiB7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoYGFnZW50LSR7YWdlbnQuaWR9YCkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoYWdlbnQubmFtZSkpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoYWdlbnQuc3BlY2lhbHR5KSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5pi+56S65pm66IO95L2T5Zyo57q/54q25oCBJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXh0IH0gPSByZW5kZXIoPE1vY2tIb21lU2NyZWVuIC8+KTtcblxuICAgIGNvbnN0IG9ubGluZUVsZW1lbnRzID0gZ2V0QWxsQnlUZXh0KCflnKjnur8nKTtcbiAgICBjb25zdCBvZmZsaW5lRWxlbWVudHMgPSBnZXRBbGxCeVRleHQoJ+emu+e6vycpO1xuICAgIFxuICAgIGV4cGVjdChvbmxpbmVFbGVtZW50cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3Qob2ZmbGluZUVsZW1lbnRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5pSv5oyB5pm66IO95L2T54K55Ye7JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgY29uc3QgeGlhb2FpQWdlbnQgPSBnZXRCeVRlc3RJZCgnYWdlbnQteGlhb2FpJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHhpYW9haUFnZW50KTtcblxuICAgIC8vIOmqjOivgeeCueWHu+S4jeS8muaKm+WHuumUmeivr1xuICAgIGV4cGVjdCh4aWFvYWlBZ2VudCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5pi+56S65b+r5o235pON5L2cJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxNb2NrSG9tZVNjcmVlbiAvPik7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3F1aWNrLWFjdGlvbnMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ+W/q+aNt+aTjeS9nCcpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyDpqozor4HmiYDmnInlv6vmjbfmk43kvZxcbiAgICBjb25zdCBhY3Rpb25zID0gWydtZWFzdXJlJywgJ3JlY29yZCcsICdyZXBvcnQnLCAncmVtaW5kZXInXTtcbiAgICBhY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZChgcXVpY2stYWN0aW9uLSR7YWN0aW9ufWApKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCflgaXlurfmtYvph48nKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ+iusOW9leaVsOaNricpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn5YGl5bq35oql5ZGKJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCforr7nva7mj5DphpInKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5pSv5oyB5b+r5o235pON5L2c54K55Ye7JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgLy8g5Yid5aeL54q25oCB5LiN5pi+56S66YCJ5Lit5L+h5oGvXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3NlbGVjdGVkLWFjdGlvbi1pbmZvJykpLnRvQmVOdWxsKCk7XG5cbiAgICAvLyDngrnlh7vlgaXlurfmtYvph49cbiAgICBjb25zdCBtZWFzdXJlQWN0aW9uID0gZ2V0QnlUZXN0SWQoJ3F1aWNrLWFjdGlvbi1tZWFzdXJlJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKG1lYXN1cmVBY3Rpb24pO1xuXG4gICAgLy8g6aqM6K+B6YCJ5Lit54q25oCB5pi+56S6XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdzZWxlY3RlZC1hY3Rpb24taW5mbycpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCflupTor6XmmL7npLrlgaXlurflu7rorq4nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE1vY2tIb21lU2NyZWVuIC8+KTtcblxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnaGVhbHRoLXRpcHMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ+S7iuaXpeWBpeW6t+W7uuiuricpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAvLyDpqozor4Hlu7rorq7lhoXlrrlcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfkv53mjIHop4TlvovnmoTov5DliqjkuaDmg6/vvIzmr4/lpKnoh7PlsJEzMOWIhumSnycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn5aSa5Zad5rC077yM5L+d5oyB6Lqr5L2T5rC05YiG5bmz6KGhJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfkv53or4HlhYXotrPnmoTnnaHnnKDvvIzlu7rorq43LTjlsI/ml7YnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5pSv5oyB5LiL5ouJ5Yi35pawJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgY29uc3Qgc2Nyb2xsVmlldyA9IGdldEJ5VGVzdElkKCdob21lLXNjcmVlbicpO1xuICAgIFxuICAgIC8vIOaooeaLn+S4i+aLieWIt+aWsFxuICAgIGZpcmVFdmVudChzY3JvbGxWaWV3LCAncmVmcmVzaCcpO1xuXG4gICAgLy8g562J5b6F5Yi35paw5a6M5oiQXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAvLyDpqozor4HliLfmlrDlip/og73mraPluLjlt6XkvZxcbiAgICAgIGV4cGVjdChzY3JvbGxWaWV3KS50b0JlVHJ1dGh5KCk7XG4gICAgfSwgeyB0aW1lb3V0OiAyMDAwIH0pO1xuICB9KTtcblxuICBpdCgn5bqU6K+l5q2j56Gu5pi+56S65YGl5bq35pWw5o2u5Y2h54mHJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8TW9ja0hvbWVTY3JlZW4gLz4pO1xuXG4gICAgY29uc3QgaGVhbHRoQ2FyZHMgPSBbXG4gICAgICAnc3RlcHMtY2FyZCcsXG4gICAgICAnaGVhcnQtcmF0ZS1jYXJkJywgXG4gICAgICAnYmxvb2QtcHJlc3N1cmUtY2FyZCcsXG4gICAgICAnc2xlZXAtY2FyZCcsXG4gICAgICAnd2F0ZXItY2FyZCdcbiAgICBdO1xuXG4gICAgaGVhbHRoQ2FyZHMuZm9yRWFjaChjYXJkSWQgPT4ge1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKGNhcmRJZCkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ+W6lOivpeaYvuekuuawtOWIhuaRhOWFpei/m+W6picsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxNb2NrSG9tZVNjcmVlbiAvPik7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfnm67moIc6IDIwMDBtbCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCflupTor6XmlK/mjIHmu5rliqjmn6XnnIvmiYDmnInlhoXlrrknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxNb2NrSG9tZVNjcmVlbiAvPik7XG5cbiAgICBjb25zdCBzY3JvbGxWaWV3ID0gZ2V0QnlUZXN0SWQoJ2hvbWUtc2NyZWVuJyk7XG4gICAgXG4gICAgLy8g5qih5ouf5rua5YqoXG4gICAgZmlyZUV2ZW50LnNjcm9sbChzY3JvbGxWaWV3LCB7XG4gICAgICBuYXRpdmVFdmVudDoge1xuICAgICAgICBjb250ZW50T2Zmc2V0OiB7IHk6IDIwMCB9LFxuICAgICAgICBjb250ZW50U2l6ZTogeyBoZWlnaHQ6IDEwMDAgfSxcbiAgICAgICAgbGF5b3V0TWVhc3VyZW1lbnQ6IHsgaGVpZ2h0OiA2MDAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2Nyb2xsVmlldykudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pOyAiXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUF3RixJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFHeEYsSUFBTUksY0FBYyxHQUFHO0VBQ3JCQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsUUFBUSxFQUFFLEtBQUs7RUFDZkMsU0FBUyxFQUFFLEVBQUU7RUFDYkMsYUFBYSxFQUFFO0lBQUVDLFFBQVEsRUFBRSxHQUFHO0lBQUVDLFNBQVMsRUFBRTtFQUFHLENBQUM7RUFDL0NDLFVBQVUsRUFBRSxHQUFHO0VBQ2ZDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyxTQUFTLEVBQUU7QUFDYixDQUFDO0FBRUQsSUFBTUMsVUFBVSxHQUFHLENBQ2pCO0VBQUVDLEVBQUUsRUFBRSxRQUFRO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLE1BQU0sRUFBRSxRQUFRO0VBQUVDLFNBQVMsRUFBRTtBQUFPLENBQUMsRUFDakU7RUFBRUgsRUFBRSxFQUFFLFFBQVE7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsTUFBTSxFQUFFLFFBQVE7RUFBRUMsU0FBUyxFQUFFO0FBQU8sQ0FBQyxFQUNqRTtFQUFFSCxFQUFFLEVBQUUsT0FBTztFQUFFQyxJQUFJLEVBQUUsSUFBSTtFQUFFQyxNQUFNLEVBQUUsU0FBUztFQUFFQyxTQUFTLEVBQUU7QUFBTyxDQUFDLEVBQ2pFO0VBQUVILEVBQUUsRUFBRSxNQUFNO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLE1BQU0sRUFBRSxRQUFRO0VBQUVDLFNBQVMsRUFBRTtBQUFPLENBQUMsQ0FDaEU7QUFHRCxJQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWNBLENBQUEsRUFBUztFQUMzQixJQUFBQyxlQUFBLEdBQW9DQyxjQUFLLENBQUNDLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFBQUMsZ0JBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFMLGVBQUE7SUFBbERNLFVBQVUsR0FBQUgsZ0JBQUE7SUFBRUksYUFBYSxHQUFBSixnQkFBQTtFQUNoQyxJQUFBSyxnQkFBQSxHQUFzRFAsY0FBSyxDQUFDQyxRQUFRLENBQWdCLElBQUksQ0FBQztJQUFBTyxnQkFBQSxPQUFBTCxlQUFBLENBQUFDLE9BQUEsRUFBQUcsZ0JBQUE7SUFBbEZFLG1CQUFtQixHQUFBRCxnQkFBQTtJQUFFRSxzQkFBc0IsR0FBQUYsZ0JBQUE7RUFFbEQsSUFBTUcsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBLEVBQVM7SUFDMUJMLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkJNLFVBQVUsQ0FBQztNQUFBLE9BQU1OLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFBQSxHQUFFLElBQUksQ0FBQztFQUM5QyxDQUFDO0VBRUQsSUFBTU8saUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUMsTUFBYyxFQUFLO0lBQzVDSixzQkFBc0IsQ0FBQ0ksTUFBTSxDQUFDO0VBQ2hDLENBQUM7RUFFRCxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFJQyxPQUFlLEVBQUssQ0FFOUMsQ0FBQztFQUVELE9BQ0UsSUFBQWxDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQXFDLFVBQVU7SUFDVEMsTUFBTSxFQUFDLGFBQWE7SUFDcEJDLGNBQWMsRUFDWixJQUFBdEMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBeUMsY0FBYztNQUFDakIsVUFBVSxFQUFFQSxVQUFXO01BQUNrQixTQUFTLEVBQUVaO0lBQWMsQ0FBRSxDQUNwRTtJQUFBYSxRQUFBLEdBR0QsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7TUFBQ04sTUFBTSxFQUFDLGlCQUFpQjtNQUFBSyxRQUFBLEdBQzVCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1FBQUNQLE1BQU0sRUFBQyxjQUFjO1FBQUFLLFFBQUEsRUFBQztNQUFLLENBQU0sQ0FBQyxFQUN4QyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtRQUFDUCxNQUFNLEVBQUMsY0FBYztRQUFBSyxRQUFBLEVBQUUsSUFBSUcsSUFBSSxDQUFDLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUM7TUFBQyxDQUFPLENBQUM7SUFBQSxDQUNoRSxDQUFDLEVBR1AsSUFBQTlDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7TUFBQ04sTUFBTSxFQUFDLGlCQUFpQjtNQUFBSyxRQUFBLEdBQzVCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1FBQUNQLE1BQU0sRUFBQyxjQUFjO1FBQUFLLFFBQUEsRUFBQztNQUFNLENBQU0sQ0FBQyxFQUd6QyxJQUFBMUMsV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNEMsSUFBSTtRQUFDTixNQUFNLEVBQUMsWUFBWTtRQUFBSyxRQUFBLEdBQ3ZCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxhQUFhO1VBQUFLLFFBQUEsRUFBQztRQUFFLENBQU0sQ0FBQyxFQUNwQyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtVQUFDUCxNQUFNLEVBQUMsYUFBYTtVQUFBSyxRQUFBLEVBQUV6QyxjQUFjLENBQUNDO1FBQVUsQ0FBTyxDQUFDLEVBQzdELElBQUFGLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTZDLElBQUk7VUFBQ1AsTUFBTSxFQUFDLFlBQVk7VUFBQUssUUFBQSxHQUFDLGdCQUFJLEVBQUN6QyxjQUFjLENBQUNFLFFBQVE7UUFBQSxDQUFPLENBQUMsRUFDOUQsSUFBQUgsV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNkMsSUFBSTtVQUFDUCxNQUFNLEVBQUMsZ0JBQWdCO1VBQUFLLFFBQUEsR0FDMUJLLElBQUksQ0FBQ0MsS0FBSyxDQUFFL0MsY0FBYyxDQUFDQyxVQUFVLEdBQUdELGNBQWMsQ0FBQ0UsUUFBUSxHQUFJLEdBQUcsQ0FBQyxFQUFDLEdBQzNFO1FBQUEsQ0FBTSxDQUFDO01BQUEsQ0FDSCxDQUFDLEVBR1AsSUFBQUgsV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNEMsSUFBSTtRQUFDTixNQUFNLEVBQUMsaUJBQWlCO1FBQUFLLFFBQUEsR0FDNUIsSUFBQTFDLFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3hDLGFBQUEsQ0FBQTZDLElBQUk7VUFBQ1AsTUFBTSxFQUFDLGtCQUFrQjtVQUFBSyxRQUFBLEVBQUM7UUFBRSxDQUFNLENBQUMsRUFDekMsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTZDLElBQUk7VUFBQ1AsTUFBTSxFQUFDLGtCQUFrQjtVQUFBSyxRQUFBLEdBQUV6QyxjQUFjLENBQUNHLFNBQVMsRUFBQyxNQUFJO1FBQUEsQ0FBTSxDQUFDO01BQUEsQ0FDakUsQ0FBQyxFQUdQLElBQUFKLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7UUFBQ04sTUFBTSxFQUFDLHFCQUFxQjtRQUFBSyxRQUFBLEdBQ2hDLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxzQkFBc0I7VUFBQUssUUFBQSxFQUFDO1FBQUUsQ0FBTSxDQUFDLEVBQzdDLElBQUExQyxXQUFBLENBQUFtQyxJQUFBLEVBQUNwQyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxzQkFBc0I7VUFBQUssUUFBQSxHQUNoQ3pDLGNBQWMsQ0FBQ0ksYUFBYSxDQUFDQyxRQUFRLEVBQUMsR0FBQyxFQUFDTCxjQUFjLENBQUNJLGFBQWEsQ0FBQ0UsU0FBUztRQUFBLENBQzNFLENBQUM7TUFBQSxDQUNILENBQUMsRUFHUCxJQUFBUCxXQUFBLENBQUFtQyxJQUFBLEVBQUNwQyxhQUFBLENBQUE0QyxJQUFJO1FBQUNOLE1BQU0sRUFBQyxZQUFZO1FBQUFLLFFBQUEsR0FDdkIsSUFBQTFDLFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3hDLGFBQUEsQ0FBQTZDLElBQUk7VUFBQ1AsTUFBTSxFQUFDLGFBQWE7VUFBQUssUUFBQSxFQUFDO1FBQUUsQ0FBTSxDQUFDLEVBQ3BDLElBQUExQyxXQUFBLENBQUFtQyxJQUFBLEVBQUNwQyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxhQUFhO1VBQUFLLFFBQUEsR0FBRXpDLGNBQWMsQ0FBQ08sVUFBVSxFQUFDLGVBQUc7UUFBQSxDQUFNLENBQUM7TUFBQSxDQUM1RCxDQUFDLEVBR1AsSUFBQVIsV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNEMsSUFBSTtRQUFDTixNQUFNLEVBQUMsWUFBWTtRQUFBSyxRQUFBLEdBQ3ZCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxhQUFhO1VBQUFLLFFBQUEsRUFBQztRQUFFLENBQU0sQ0FBQyxFQUNwQyxJQUFBMUMsV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNkMsSUFBSTtVQUFDUCxNQUFNLEVBQUMsYUFBYTtVQUFBSyxRQUFBLEdBQUV6QyxjQUFjLENBQUNRLFdBQVcsRUFBQyxJQUFFO1FBQUEsQ0FBTSxDQUFDLEVBQ2hFLElBQUFULFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTZDLElBQUk7VUFBQ1AsTUFBTSxFQUFDLFlBQVk7VUFBQUssUUFBQSxHQUFDLGdCQUFJLEVBQUN6QyxjQUFjLENBQUNTLFNBQVMsRUFBQyxJQUFFO1FBQUEsQ0FBTSxDQUFDO01BQUEsQ0FDN0QsQ0FBQztJQUFBLENBQ0gsQ0FBQyxFQUdQLElBQUFWLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7TUFBQ04sTUFBTSxFQUFDLGdCQUFnQjtNQUFBSyxRQUFBLEdBQzNCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1FBQUNQLE1BQU0sRUFBQyxjQUFjO1FBQUFLLFFBQUEsRUFBQztNQUFLLENBQU0sQ0FBQyxFQUN4QyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNEMsSUFBSTtRQUFDTixNQUFNLEVBQUMsYUFBYTtRQUFBSyxRQUFBLEVBQ3ZCL0IsVUFBVSxDQUFDc0MsR0FBRyxDQUFDLFVBQUFDLEtBQUs7VUFBQSxPQUNuQixJQUFBbEQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBb0QsZ0JBQWdCO1lBRWZkLE1BQU0sRUFBRSxTQUFTYSxLQUFLLENBQUN0QyxFQUFFLEVBQUc7WUFDNUJ3QyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQTtjQUFBLE9BQVFuQixnQkFBZ0IsQ0FBQ2lCLEtBQUssQ0FBQ3RDLEVBQUUsQ0FBQztZQUFBLENBQUM7WUFBQThCLFFBQUEsRUFFMUMsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7Y0FBQ04sTUFBTSxFQUFFLGNBQWNhLEtBQUssQ0FBQ3RDLEVBQUUsRUFBRztjQUFBOEIsUUFBQSxHQUNyQyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtnQkFBQ1AsTUFBTSxFQUFFLGNBQWNhLEtBQUssQ0FBQ3RDLEVBQUUsRUFBRztnQkFBQThCLFFBQUEsRUFBRVEsS0FBSyxDQUFDckM7Y0FBSSxDQUFPLENBQUMsRUFDM0QsSUFBQWIsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtnQkFBQ1AsTUFBTSxFQUFFLG1CQUFtQmEsS0FBSyxDQUFDdEMsRUFBRSxFQUFHO2dCQUFBOEIsUUFBQSxFQUFFUSxLQUFLLENBQUNuQztjQUFTLENBQU8sQ0FBQyxFQUNyRSxJQUFBZixXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO2dCQUFDUCxNQUFNLEVBQUUsZ0JBQWdCYSxLQUFLLENBQUN0QyxFQUFFLEVBQUc7Z0JBQUE4QixRQUFBLEVBQ3RDUSxLQUFLLENBQUNwQyxNQUFNLEtBQUssUUFBUSxHQUFHLElBQUksR0FBRztjQUFJLENBQ3BDLENBQUM7WUFBQSxDQUNIO1VBQUMsR0FWRm9DLEtBQUssQ0FBQ3RDLEVBV0ssQ0FBQztRQUFBLENBQ3BCO01BQUMsQ0FDRSxDQUFDO0lBQUEsQ0FDSCxDQUFDLEVBR1AsSUFBQVosV0FBQSxDQUFBbUMsSUFBQSxFQUFDcEMsYUFBQSxDQUFBNEMsSUFBSTtNQUFDTixNQUFNLEVBQUMsZUFBZTtNQUFBSyxRQUFBLEdBQzFCLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1FBQUNQLE1BQU0sRUFBQyxxQkFBcUI7UUFBQUssUUFBQSxFQUFDO01BQUksQ0FBTSxDQUFDLEVBQzlDLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE0QyxJQUFJO1FBQUNOLE1BQU0sRUFBQyxvQkFBb0I7UUFBQUssUUFBQSxFQUM5QixDQUNDO1VBQUU5QixFQUFFLEVBQUUsU0FBUztVQUFFeUMsS0FBSyxFQUFFLE1BQU07VUFBRUMsSUFBSSxFQUFFO1FBQVEsQ0FBQyxFQUMvQztVQUFFMUMsRUFBRSxFQUFFLFFBQVE7VUFBRXlDLEtBQUssRUFBRSxNQUFNO1VBQUVDLElBQUksRUFBRTtRQUFPLENBQUMsRUFDN0M7VUFBRTFDLEVBQUUsRUFBRSxRQUFRO1VBQUV5QyxLQUFLLEVBQUUsTUFBTTtVQUFFQyxJQUFJLEVBQUU7UUFBUSxDQUFDLEVBQzlDO1VBQUUxQyxFQUFFLEVBQUUsVUFBVTtVQUFFeUMsS0FBSyxFQUFFLE1BQU07VUFBRUMsSUFBSSxFQUFFO1FBQU8sQ0FBQyxDQUNoRCxDQUFDTCxHQUFHLENBQUMsVUFBQWpCLE1BQU07VUFBQSxPQUNWLElBQUFoQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUFvRCxnQkFBZ0I7WUFFZmQsTUFBTSxFQUFFLGdCQUFnQkwsTUFBTSxDQUFDcEIsRUFBRSxFQUFHO1lBQ3BDd0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUE7Y0FBQSxPQUFRckIsaUJBQWlCLENBQUNDLE1BQU0sQ0FBQ3BCLEVBQUUsQ0FBQztZQUFBLENBQUM7WUFBQThCLFFBQUEsRUFFNUMsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7Y0FBQ04sTUFBTSxFQUFFLGVBQWVMLE1BQU0sQ0FBQ3BCLEVBQUUsRUFBRztjQUFBOEIsUUFBQSxHQUN2QyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtnQkFBQ1AsTUFBTSxFQUFFLGVBQWVMLE1BQU0sQ0FBQ3BCLEVBQUUsRUFBRztnQkFBQThCLFFBQUEsRUFBRVYsTUFBTSxDQUFDc0I7Y0FBSSxDQUFPLENBQUMsRUFDOUQsSUFBQXRELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3hDLGFBQUEsQ0FBQTZDLElBQUk7Z0JBQUNQLE1BQU0sRUFBRSxnQkFBZ0JMLE1BQU0sQ0FBQ3BCLEVBQUUsRUFBRztnQkFBQThCLFFBQUEsRUFBRVYsTUFBTSxDQUFDcUI7Y0FBSyxDQUFPLENBQUM7WUFBQSxDQUM1RDtVQUFDLEdBUEZyQixNQUFNLENBQUNwQixFQVFJLENBQUM7UUFBQSxDQUNwQjtNQUFDLENBQ0UsQ0FBQztJQUFBLENBQ0gsQ0FBQyxFQUdQLElBQUFaLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7TUFBQ04sTUFBTSxFQUFDLGFBQWE7TUFBQUssUUFBQSxHQUN4QixJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtRQUFDUCxNQUFNLEVBQUMsWUFBWTtRQUFBSyxRQUFBLEVBQUM7TUFBTSxDQUFNLENBQUMsRUFDdkMsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTRDLElBQUk7UUFBQ04sTUFBTSxFQUFDLFdBQVc7UUFBQUssUUFBQSxHQUN0QixJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtVQUFDUCxNQUFNLEVBQUMsT0FBTztVQUFBSyxRQUFBLEVBQUM7UUFBa0IsQ0FBTSxDQUFDLEVBQzlDLElBQUExQyxXQUFBLENBQUF1QyxHQUFBLEVBQUN4QyxhQUFBLENBQUE2QyxJQUFJO1VBQUNQLE1BQU0sRUFBQyxPQUFPO1VBQUFLLFFBQUEsRUFBQztRQUFZLENBQU0sQ0FBQyxFQUN4QyxJQUFBMUMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNkMsSUFBSTtVQUFDUCxNQUFNLEVBQUMsT0FBTztVQUFBSyxRQUFBLEVBQUM7UUFBZSxDQUFNLENBQUM7TUFBQSxDQUN2QyxDQUFDO0lBQUEsQ0FDSCxDQUFDLEVBR05mLG1CQUFtQixJQUNsQixJQUFBM0IsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsYUFBQSxDQUFBNEMsSUFBSTtNQUFDTixNQUFNLEVBQUMsc0JBQXNCO01BQUFLLFFBQUEsRUFDakMsSUFBQTFDLFdBQUEsQ0FBQW1DLElBQUEsRUFBQ3BDLGFBQUEsQ0FBQTZDLElBQUk7UUFBQ1AsTUFBTSxFQUFDLHNCQUFzQjtRQUFBSyxRQUFBLEdBQUMsc0JBQzdCLEVBQUNmLG1CQUFtQjtNQUFBLENBQ3JCO0lBQUMsQ0FDSCxDQUNQO0VBQUEsQ0FDUyxDQUFDO0FBRWpCLENBQUM7QUFFRDRCLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtFQUMzQkMsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFNO0lBQ25CLElBQUFDLE9BQUEsR0FBbUMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUFyRDJDLFdBQVcsR0FBQUYsT0FBQSxDQUFYRSxXQUFXO01BQUVDLFNBQVMsR0FBQUgsT0FBQSxDQUFURyxTQUFTO0lBRTlCQyxNQUFNLENBQUNGLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUMvQ0QsTUFBTSxDQUFDRixXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNuREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBTTtJQUNuQixJQUFBTyxRQUFBLEdBQXdCLElBQUFMLG1CQUFNLEVBQUMsSUFBQTFELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3ZCLGNBQWMsSUFBRSxDQUFDLENBQUM7TUFBMUMyQyxXQUFXLEdBQUFJLFFBQUEsQ0FBWEosV0FBVztJQUVuQkUsTUFBTSxDQUFDRixXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBTTtJQUNyQixJQUFBUSxRQUFBLEdBQW1DLElBQUFOLG1CQUFNLEVBQUMsSUFBQTFELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3ZCLGNBQWMsSUFBRSxDQUFDLENBQUM7TUFBckQyQyxXQUFXLEdBQUFLLFFBQUEsQ0FBWEwsV0FBVztNQUFFQyxTQUFTLEdBQUFJLFFBQUEsQ0FBVEosU0FBUztJQUU5QkMsTUFBTSxDQUFDRixXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNuREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFHeENELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUN4Q0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDeENELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRk4sRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFNO0lBQ3hCLElBQUFTLFFBQUEsR0FBc0IsSUFBQVAsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUF4QzRDLFNBQVMsR0FBQUssUUFBQSxDQUFUTCxTQUFTO0lBR2pCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUN2QyxDQUFDLENBQUM7RUFFRk4sRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFNO0lBQ3BCLElBQUFVLFFBQUEsR0FBbUMsSUFBQVIsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUFyRDJDLFdBQVcsR0FBQU8sUUFBQSxDQUFYUCxXQUFXO01BQUVDLFNBQVMsR0FBQU0sUUFBQSxDQUFUTixTQUFTO0lBRTlCQyxNQUFNLENBQUNGLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQ2xERCxNQUFNLENBQUNELFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUd2Q25ELFVBQVUsQ0FBQ3dELE9BQU8sQ0FBQyxVQUFBakIsS0FBSyxFQUFJO01BQzFCVyxNQUFNLENBQUNGLFdBQVcsQ0FBQyxTQUFTVCxLQUFLLENBQUN0QyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUNrRCxVQUFVLENBQUMsQ0FBQztNQUNyREQsTUFBTSxDQUFDRCxTQUFTLENBQUNWLEtBQUssQ0FBQ3JDLElBQUksQ0FBQyxDQUFDLENBQUNpRCxVQUFVLENBQUMsQ0FBQztNQUMxQ0QsTUFBTSxDQUFDRCxTQUFTLENBQUNWLEtBQUssQ0FBQ25DLFNBQVMsQ0FBQyxDQUFDLENBQUMrQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRk4sRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFNO0lBQ3RCLElBQUFZLFFBQUEsR0FBeUIsSUFBQVYsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUEzQ3FELFlBQVksR0FBQUQsUUFBQSxDQUFaQyxZQUFZO0lBRXBCLElBQU1DLGNBQWMsR0FBR0QsWUFBWSxDQUFDLElBQUksQ0FBQztJQUN6QyxJQUFNRSxlQUFlLEdBQUdGLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFFMUNSLE1BQU0sQ0FBQ1MsY0FBYyxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNoRFosTUFBTSxDQUFDVSxlQUFlLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0VBQ25ELENBQUMsQ0FBQztFQUVGakIsRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFNO0lBQ3BCLElBQUFrQixRQUFBLEdBQXdCLElBQUFoQixtQkFBTSxFQUFDLElBQUExRCxXQUFBLENBQUF1QyxHQUFBLEVBQUN2QixjQUFjLElBQUUsQ0FBQyxDQUFDO01BQTFDMkMsV0FBVyxHQUFBZSxRQUFBLENBQVhmLFdBQVc7SUFFbkIsSUFBTWdCLFdBQVcsR0FBR2hCLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDL0NpQixzQkFBUyxDQUFDQyxLQUFLLENBQUNGLFdBQVcsQ0FBQztJQUc1QmQsTUFBTSxDQUFDYyxXQUFXLENBQUMsQ0FBQ2IsVUFBVSxDQUFDLENBQUM7RUFDbEMsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBTTtJQUNuQixJQUFBc0IsUUFBQSxHQUFtQyxJQUFBcEIsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUFyRDJDLFdBQVcsR0FBQW1CLFFBQUEsQ0FBWG5CLFdBQVc7TUFBRUMsU0FBUyxHQUFBa0IsUUFBQSxDQUFUbEIsU0FBUztJQUU5QkMsTUFBTSxDQUFDRixXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDakRELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBR3RDLElBQU1pQixPQUFPLEdBQUcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7SUFDM0RBLE9BQU8sQ0FBQ1osT0FBTyxDQUFDLFVBQUFuQyxNQUFNLEVBQUk7TUFDeEI2QixNQUFNLENBQUNGLFdBQVcsQ0FBQyxnQkFBZ0IzQixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM4QixVQUFVLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7SUFFRkQsTUFBTSxDQUFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDdENELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUN0Q0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBTTtJQUNyQixJQUFBd0IsUUFBQSxHQUF1QyxJQUFBdEIsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUF6RDJDLFdBQVcsR0FBQXFCLFFBQUEsQ0FBWHJCLFdBQVc7TUFBRXNCLGFBQWEsR0FBQUQsUUFBQSxDQUFiQyxhQUFhO0lBR2xDcEIsTUFBTSxDQUFDb0IsYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7SUFHeEQsSUFBTUMsYUFBYSxHQUFHeEIsV0FBVyxDQUFDLHNCQUFzQixDQUFDO0lBQ3pEaUIsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDTSxhQUFhLENBQUM7SUFHOUJ0QixNQUFNLENBQUNGLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0VBQzFELENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsVUFBVSxFQUFFLFlBQU07SUFDbkIsSUFBQTRCLFFBQUEsR0FBbUMsSUFBQTFCLG1CQUFNLEVBQUMsSUFBQTFELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3ZCLGNBQWMsSUFBRSxDQUFDLENBQUM7TUFBckQyQyxXQUFXLEdBQUF5QixRQUFBLENBQVh6QixXQUFXO01BQUVDLFNBQVMsR0FBQXdCLFFBQUEsQ0FBVHhCLFNBQVM7SUFFOUJDLE1BQU0sQ0FBQ0YsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQy9DRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUd4Q0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNwREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDOUNELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxVQUFVLE1BQUE2QixrQkFBQSxDQUFBL0QsT0FBQSxFQUFFLGFBQVk7SUFDekIsSUFBQWdFLFFBQUEsR0FBd0IsSUFBQTVCLG1CQUFNLEVBQUMsSUFBQTFELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3ZCLGNBQWMsSUFBRSxDQUFDLENBQUM7TUFBMUMyQyxXQUFXLEdBQUEyQixRQUFBLENBQVgzQixXQUFXO0lBRW5CLElBQU00QixVQUFVLEdBQUc1QixXQUFXLENBQUMsYUFBYSxDQUFDO0lBRzdDLElBQUFpQixzQkFBUyxFQUFDVyxVQUFVLEVBQUUsU0FBUyxDQUFDO0lBR2hDLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO01BRWxCM0IsTUFBTSxDQUFDMEIsVUFBVSxDQUFDLENBQUN6QixVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDLEVBQUU7TUFBRTJCLE9BQU8sRUFBRTtJQUFLLENBQUMsQ0FBQztFQUN2QixDQUFDLEVBQUM7RUFFRmpDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBTTtJQUN2QixJQUFBa0MsU0FBQSxHQUF3QixJQUFBaEMsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUExQzJDLFdBQVcsR0FBQStCLFNBQUEsQ0FBWC9CLFdBQVc7SUFFbkIsSUFBTWdDLFdBQVcsR0FBRyxDQUNsQixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHFCQUFxQixFQUNyQixZQUFZLEVBQ1osWUFBWSxDQUNiO0lBRURBLFdBQVcsQ0FBQ3hCLE9BQU8sQ0FBQyxVQUFBeUIsTUFBTSxFQUFJO01BQzVCL0IsTUFBTSxDQUFDRixXQUFXLENBQUNpQyxNQUFNLENBQUMsQ0FBQyxDQUFDOUIsVUFBVSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBTTtJQUNyQixJQUFBcUMsU0FBQSxHQUFzQixJQUFBbkMsbUJBQU0sRUFBQyxJQUFBMUQsV0FBQSxDQUFBdUMsR0FBQSxFQUFDdkIsY0FBYyxJQUFFLENBQUMsQ0FBQztNQUF4QzRDLFNBQVMsR0FBQWlDLFNBQUEsQ0FBVGpDLFNBQVM7SUFFakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsY0FBYyxFQUFFLFlBQU07SUFDdkIsSUFBQXNDLFNBQUEsR0FBd0IsSUFBQXBDLG1CQUFNLEVBQUMsSUFBQTFELFdBQUEsQ0FBQXVDLEdBQUEsRUFBQ3ZCLGNBQWMsSUFBRSxDQUFDLENBQUM7TUFBMUMyQyxXQUFXLEdBQUFtQyxTQUFBLENBQVhuQyxXQUFXO0lBRW5CLElBQU00QixVQUFVLEdBQUc1QixXQUFXLENBQUMsYUFBYSxDQUFDO0lBRzdDaUIsc0JBQVMsQ0FBQ21CLE1BQU0sQ0FBQ1IsVUFBVSxFQUFFO01BQzNCUyxXQUFXLEVBQUU7UUFDWEMsYUFBYSxFQUFFO1VBQUVDLENBQUMsRUFBRTtRQUFJLENBQUM7UUFDekJDLFdBQVcsRUFBRTtVQUFFQyxNQUFNLEVBQUU7UUFBSyxDQUFDO1FBQzdCQyxpQkFBaUIsRUFBRTtVQUFFRCxNQUFNLEVBQUU7UUFBSTtNQUNuQztJQUNGLENBQUMsQ0FBQztJQUVGdkMsTUFBTSxDQUFDMEIsVUFBVSxDQUFDLENBQUN6QixVQUFVLENBQUMsQ0FBQztFQUNqQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=