2f54014e38237629ac84af57095c9762
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showWarningNotification = exports.showSuccessNotification = exports.showInfoNotification = exports.showErrorNotification = exports.setTheme = exports.setLoading = exports.setLanguage = exports.selectUnreadNotificationsCount = exports.selectUnreadNotifications = exports.selectUILoading = exports.selectUI = exports.selectTheme = exports.selectNotifications = exports.selectLanguage = exports.removeNotification = exports.markNotificationAsRead = exports.markAllNotificationsAsRead = exports.default = exports.clearNotifications = exports.addNotification = void 0;
var _toolkit = require("@reduxjs/toolkit");
var initialState = {
  theme: 'light',
  language: 'zh',
  notifications: [],
  loading: false
};
var uiSlice = (0, _toolkit.createSlice)({
  name: 'ui',
  initialState: initialState,
  reducers: {
    setTheme: function setTheme(state, action) {
      state.theme = action.payload;
    },
    setLanguage: function setLanguage(state, action) {
      state.language = action.payload;
    },
    addNotification: function addNotification(state, action) {
      var notification = Object.assign({}, action.payload, {
        id: Date.now().toString()
      });
      state.notifications.unshift(notification);
    },
    removeNotification: function removeNotification(state, action) {
      state.notifications = state.notifications.filter(function (notification) {
        return notification.id !== action.payload;
      });
    },
    markNotificationAsRead: function markNotificationAsRead(state, action) {
      var notification = state.notifications.find(function (n) {
        return n.id === action.payload;
      });
      if (notification) {
        notification.read = true;
      }
    },
    markAllNotificationsAsRead: function markAllNotificationsAsRead(state) {
      state.notifications.forEach(function (notification) {
        notification.read = true;
      });
    },
    clearNotifications: function clearNotifications(state) {
      state.notifications = [];
    },
    setLoading: function setLoading(state, action) {
      state.loading = action.payload;
    },
    showSuccessNotification: function showSuccessNotification(state, action) {
      var notification = {
        id: Date.now().toString(),
        title: '成功',
        message: action.payload,
        type: 'success',
        timestamp: new Date().toISOString(),
        read: false
      };
      state.notifications.unshift(notification);
    },
    showErrorNotification: function showErrorNotification(state, action) {
      var notification = {
        id: Date.now().toString(),
        title: '错误',
        message: action.payload,
        type: 'error',
        timestamp: new Date().toISOString(),
        read: false
      };
      state.notifications.unshift(notification);
    },
    showWarningNotification: function showWarningNotification(state, action) {
      var notification = {
        id: Date.now().toString(),
        title: '警告',
        message: action.payload,
        type: 'warning',
        timestamp: new Date().toISOString(),
        read: false
      };
      state.notifications.unshift(notification);
    },
    showInfoNotification: function showInfoNotification(state, action) {
      var notification = {
        id: Date.now().toString(),
        title: '提示',
        message: action.payload,
        type: 'info',
        timestamp: new Date().toISOString(),
        read: false
      };
      state.notifications.unshift(notification);
    }
  }
});
var _uiSlice$actions = uiSlice.actions,
  setTheme = exports.setTheme = _uiSlice$actions.setTheme,
  setLanguage = exports.setLanguage = _uiSlice$actions.setLanguage,
  addNotification = exports.addNotification = _uiSlice$actions.addNotification,
  removeNotification = exports.removeNotification = _uiSlice$actions.removeNotification,
  markNotificationAsRead = exports.markNotificationAsRead = _uiSlice$actions.markNotificationAsRead,
  markAllNotificationsAsRead = exports.markAllNotificationsAsRead = _uiSlice$actions.markAllNotificationsAsRead,
  clearNotifications = exports.clearNotifications = _uiSlice$actions.clearNotifications,
  setLoading = exports.setLoading = _uiSlice$actions.setLoading,
  showSuccessNotification = exports.showSuccessNotification = _uiSlice$actions.showSuccessNotification,
  showErrorNotification = exports.showErrorNotification = _uiSlice$actions.showErrorNotification,
  showWarningNotification = exports.showWarningNotification = _uiSlice$actions.showWarningNotification,
  showInfoNotification = exports.showInfoNotification = _uiSlice$actions.showInfoNotification;
var selectUI = exports.selectUI = function selectUI(state) {
  return state.ui;
};
var selectTheme = exports.selectTheme = function selectTheme(state) {
  return state.ui.theme;
};
var selectLanguage = exports.selectLanguage = function selectLanguage(state) {
  return state.ui.language;
};
var selectNotifications = exports.selectNotifications = function selectNotifications(state) {
  return state.ui.notifications;
};
var selectUnreadNotifications = exports.selectUnreadNotifications = function selectUnreadNotifications(state) {
  return state.ui.notifications.filter(function (n) {
    return !n.read;
  });
};
var selectUnreadNotificationsCount = exports.selectUnreadNotificationsCount = function selectUnreadNotificationsCount(state) {
  return state.ui.notifications.filter(function (n) {
    return !n.read;
  }).length;
};
var selectUILoading = exports.selectUILoading = function selectUILoading(state) {
  return state.ui.loading;
};
var _default = exports.default = uiSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,