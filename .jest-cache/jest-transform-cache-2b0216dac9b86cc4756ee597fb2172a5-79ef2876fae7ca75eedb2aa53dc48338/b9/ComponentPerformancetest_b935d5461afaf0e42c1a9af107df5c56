676b57e475a548349703f022f3608960
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProfileHeader = _interopRequireDefault(require("../../screens/components/ProfileHeader"));
var _HealthMetricCard = _interopRequireDefault(require("../../screens/components/HealthMetricCard"));
var _jsxRuntime = require("react/jsx-runtime");
var mockUserProfile = {
  id: 'test_user',
  name: '测试用户',
  avatar: '👤',
  age: 28,
  gender: 'male',
  constitution: '气虚质',
  memberLevel: 'gold',
  joinDate: '2023-03-15',
  healthScore: 85,
  totalDiagnosis: 24,
  consecutiveDays: 15,
  healthPoints: 1280,
  email: 'test@example.com',
  phone: '+86 138 0013 8000',
  location: '北京市朝阳区',
  bio: '测试用户简介'
};
var mockHealthMetric = {
  id: 'mood',
  name: '心情指数',
  value: 85,
  unit: '分',
  target: 80,
  icon: 'emoticon-happy',
  color: '#FF9500',
  trend: 'up',
  suggestion: '保持积极心态，今天心情不错！'
};
var mockGetHealthScoreColor = function mockGetHealthScoreColor(score) {
  return '#34C759';
};
var mockGetMemberLevelText = function mockGetMemberLevelText(level) {
  return '黄金会员';
};
var mockGetTrendIcon = function mockGetTrendIcon(trend) {
  return 'trending-up';
};
describe('Component Performance Tests', function () {
  var measureRenderTime = function measureRenderTime(renderFn) {
    var start = Date.now();
    renderFn();
    var end = Date.now();
    return end - start;
  };
  it('ProfileHeader应该在合理时间内渲染', function () {
    var renderTime = measureRenderTime(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: mockUserProfile,
        onEditPress: function onEditPress() {},
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      }));
    });
    expect(renderTime).toBeLessThan(150);
  });
  it('HealthMetricCard应该在合理时间内渲染', function () {
    var renderTime = measureRenderTime(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockHealthMetric,
        getTrendIcon: mockGetTrendIcon
      }));
    });
    expect(renderTime).toBeLessThan(50);
  });
  it('多个ProfileHeader组件应该高效渲染', function () {
    var renderTime = measureRenderTime(function () {
      for (var i = 0; i < 10; i++) {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }
    });
    expect(renderTime).toBeLessThan(500);
  });
  it('多个HealthMetricCard组件应该高效渲染', function () {
    var renderTime = measureRenderTime(function () {
      for (var i = 0; i < 20; i++) {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
          metric: Object.assign({}, mockHealthMetric, {
            id: `metric_${i}`,
            name: `指标${i}`
          }),
          getTrendIcon: mockGetTrendIcon
        }));
      }
    });
    expect(renderTime).toBeLessThan(800);
  });
  it('组件重新渲染应该高效', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: mockUserProfile,
        onEditPress: function onEditPress() {},
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      })),
      rerender = _render.rerender;
    var rerenderTime = measureRenderTime(function () {
      for (var i = 0; i < 5; i++) {
        rerender((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
          userProfile: Object.assign({}, mockUserProfile, {
            healthScore: 85 + i
          }),
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        }));
      }
    });
    expect(rerenderTime).toBeLessThan(100);
  });
  it('组件卸载应该正常工作', function () {
    var components = [];
    for (var i = 0; i < 50; i++) {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
          userProfile: mockUserProfile,
          onEditPress: function onEditPress() {},
          getHealthScoreColor: mockGetHealthScoreColor,
          getMemberLevelText: mockGetMemberLevelText
        })),
        unmount = _render2.unmount;
      components.push(unmount);
    }
    components.forEach(function (unmount) {
      expect(function () {
        return unmount();
      }).not.toThrow();
    });
    expect(components.length).toBe(50);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,