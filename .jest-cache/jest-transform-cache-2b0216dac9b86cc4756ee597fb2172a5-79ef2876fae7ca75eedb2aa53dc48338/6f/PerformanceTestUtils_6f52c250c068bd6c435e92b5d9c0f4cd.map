{"version":3,"names":["_reactTestRenderer","require","_perf_hooks","PerformanceTestUtils","exports","_classCallCheck2","default","_createClass2","key","value","_measureRenderPerformance","_asyncToGenerator2","renderComponent","options","arguments","length","undefined","opts","Object","assign","defaultOptions","metrics","i","warmupIterations","renderer","unmount","iterations","metric","measureSingleRender","push","calculateAverageMetrics","measureRenderPerformance","_x","apply","_measureSingleRender","startMemory","measureMemory","getMemoryUsage","mountStart","performance","now","mountEnd","mountTime","renderStart","act","Promise","resolve","setTimeout","renderEnd","renderTime","componentCount","countComponents","updateTime","measureUpdates","updateStart","update","getInstance","updateEnd","unmountStart","unmountEnd","unmountTime","endMemory","memoryUsage","_x2","_x3","count","reduce","sum","m","process","heapUsed","instance","root","countComponentsRecursive","_unused","children","child","_unused2","_benchmarkComponent","name","console","log","startTime","totalTime","toFixed","Math","round","warn","benchmarkComponent","_x4","_x5","_comparePerformance","name1","renderComponent1","name2","renderComponent2","metrics1","metrics2","renderTimeDiff","memoryDiff","abs","comparePerformance","_x6","_x7","_x8","_x9","_detectMemoryLeaks","_this","initialMemory","memorySnapshots","_loop","global","gc","currentMemory","memoryGrowth","growthPercentage","hasMemoryLeak","detectMemoryLeaks","_x0","_x1","timeout","performanceTest","target","propertyName","descriptor","method","_len","args","Array","_key","result","endTime","PerformanceAssertions","expectRenderTimeBelow","maxTime","Error","expectMemoryUsageBelow","maxMemory","expectComponentCountBelow","maxCount"],"sources":["PerformanceTestUtils.ts"],"sourcesContent":["import { ReactTestRenderer, act } from 'react-test-renderer';\nimport { performance } from 'perf_hooks';\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  memoryUsage: number;\n  componentCount: number;\n  updateTime?: number;\n  mountTime?: number;\n  unmountTime?: number;\n}\n\nexport interface PerformanceTestOptions {\n  iterations?: number;\n  warmupIterations?: number;\n  timeout?: number;\n  measureMemory?: boolean;\n  measureUpdates?: boolean;\n}\n\nexport class PerformanceTestUtils {\n  private static defaultOptions: PerformanceTestOptions = {\n    iterations: 10,\n    warmupIterations: 3,\n    timeout: 5000,\n    measureMemory: true,\n    measureUpdates: true,\n  };\n\n  /**\n   * 测量组件渲染性能\n   */\n  static async measureRenderPerformance(\n    renderComponent: () => ReactTestRenderer,\n    options: PerformanceTestOptions = {}\n  ): Promise<PerformanceMetrics> {\n    const opts = { ...this.defaultOptions, ...options };\n    const metrics: PerformanceMetrics[] = [];\n\n    // 预热\n    for (let i = 0; i < opts.warmupIterations!; i++) {\n      const renderer = renderComponent();\n      renderer.unmount();\n    }\n\n    // 正式测试\n    for (let i = 0; i < opts.iterations!; i++) {\n      const metric = await this.measureSingleRender(renderComponent, opts);\n      metrics.push(metric);\n    }\n\n    return this.calculateAverageMetrics(metrics);\n  }\n\n  /**\n   * 测量单次渲染性能\n   */\n  private static async measureSingleRender(\n    renderComponent: () => ReactTestRenderer,\n    options: PerformanceTestOptions\n  ): Promise<PerformanceMetrics> {\n    const startMemory = options.measureMemory ? this.getMemoryUsage() : 0;\n    \n    // 测量挂载时间\n    const mountStart = performance.now();\n    const renderer = renderComponent();\n    const mountEnd = performance.now();\n    const mountTime = mountEnd - mountStart;\n\n    // 测量渲染时间\n    const renderStart = performance.now();\n    await act(async () => {\n      // 等待渲染完成\n      await new Promise(resolve => setTimeout(resolve, 0));\n    });\n    const renderEnd = performance.now();\n    const renderTime = renderEnd - renderStart;\n\n    // 计算组件数量\n    const componentCount = this.countComponents(renderer);\n\n    // 测量更新时间（如果启用）\n    let updateTime: number | undefined;\n    if (options.measureUpdates) {\n      const updateStart = performance.now();\n      await act(async () => {\n        renderer.update(renderer.getInstance());\n      });\n      const updateEnd = performance.now();\n      updateTime = updateEnd - updateStart;\n    }\n\n    // 测量卸载时间\n    const unmountStart = performance.now();\n    renderer.unmount();\n    const unmountEnd = performance.now();\n    const unmountTime = unmountEnd - unmountStart;\n\n    const endMemory = options.measureMemory ? this.getMemoryUsage() : 0;\n    const memoryUsage = endMemory - startMemory;\n\n    return {\n      renderTime,\n      memoryUsage,\n      componentCount,\n      updateTime,\n      mountTime,\n      unmountTime,\n    };\n  }\n\n  /**\n   * 计算平均性能指标\n   */\n  private static calculateAverageMetrics(metrics: PerformanceMetrics[]): PerformanceMetrics {\n    const count = metrics.length;\n    \n    return {\n      renderTime: metrics.reduce((sum, m) => sum + m.renderTime, 0) / count,\n      memoryUsage: metrics.reduce((sum, m) => sum + m.memoryUsage, 0) / count,\n      componentCount: metrics.reduce((sum, m) => sum + m.componentCount, 0) / count,\n      updateTime: metrics[0].updateTime !== undefined \n        ? metrics.reduce((sum, m) => sum + (m.updateTime || 0), 0) / count \n        : undefined,\n      mountTime: metrics.reduce((sum, m) => sum + (m.mountTime || 0), 0) / count,\n      unmountTime: metrics.reduce((sum, m) => sum + (m.unmountTime || 0), 0) / count,\n    };\n  }\n\n  /**\n   * 获取内存使用情况\n   */\n  private static getMemoryUsage(): number {\n    if (typeof process !== 'undefined' && process.memoryUsage) {\n      return process.memoryUsage().heapUsed;\n    }\n    return 0;\n  }\n\n  /**\n   * 计算组件数量\n   */\n  private static countComponents(renderer: ReactTestRenderer): number {\n    try {\n      const instance = renderer.root;\n      return this.countComponentsRecursive(instance);\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * 递归计算组件数量\n   */\n  private static countComponentsRecursive(instance: any): number {\n    let count = 1;\n    \n    try {\n      if (instance.children) {\n        for (const child of instance.children) {\n          count += this.countComponentsRecursive(child);\n        }\n      }\n    } catch {\n      // 忽略错误，继续计算\n    }\n    \n    return count;\n  }\n\n  /**\n   * 性能基准测试\n   */\n  static async benchmarkComponent(\n    name: string,\n    renderComponent: () => ReactTestRenderer,\n    options: PerformanceTestOptions = {}\n  ): Promise<void> {\n    console.log(`\\n🚀 开始性能测试: ${name}`);\n    \n    const startTime = performance.now();\n    const metrics = await this.measureRenderPerformance(renderComponent, options);\n    const totalTime = performance.now() - startTime;\n\n    console.log(`📊 性能测试结果 - ${name}:`);\n    console.log(`  ⏱️  渲染时间: ${metrics.renderTime.toFixed(2)}ms`);\n    console.log(`  🧠 内存使用: ${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`);\n    console.log(`  🔢 组件数量: ${Math.round(metrics.componentCount)}`);\n    \n    if (metrics.mountTime) {\n      console.log(`  📦 挂载时间: ${metrics.mountTime.toFixed(2)}ms`);\n    }\n    \n    if (metrics.updateTime) {\n      console.log(`  🔄 更新时间: ${metrics.updateTime.toFixed(2)}ms`);\n    }\n    \n    if (metrics.unmountTime) {\n      console.log(`  🗑️  卸载时间: ${metrics.unmountTime.toFixed(2)}ms`);\n    }\n    \n    console.log(`  ⏰ 总测试时间: ${totalTime.toFixed(2)}ms`);\n    \n    // 性能警告\n    if (metrics.renderTime > 100) {\n      console.warn(`⚠️  警告: ${name} 渲染时间过长 (${metrics.renderTime.toFixed(2)}ms)`);\n    }\n    \n    if (metrics.memoryUsage > 50 * 1024 * 1024) { // 50MB\n      console.warn(`⚠️  警告: ${name} 内存使用过多 (${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB)`);\n    }\n  }\n\n  /**\n   * 比较两个组件的性能\n   */\n  static async comparePerformance(\n    name1: string,\n    renderComponent1: () => ReactTestRenderer,\n    name2: string,\n    renderComponent2: () => ReactTestRenderer,\n    options: PerformanceTestOptions = {}\n  ): Promise<void> {\n    console.log(`\\n🔄 开始性能对比: ${name1} vs ${name2}`);\n    \n    const metrics1 = await this.measureRenderPerformance(renderComponent1, options);\n    const metrics2 = await this.measureRenderPerformance(renderComponent2, options);\n    \n    console.log(`📊 性能对比结果:`);\n    console.log(`  ${name1}:`);\n    console.log(`    ⏱️  渲染时间: ${metrics1.renderTime.toFixed(2)}ms`);\n    console.log(`    🧠 内存使用: ${(metrics1.memoryUsage / 1024 / 1024).toFixed(2)}MB`);\n    \n    console.log(`  ${name2}:`);\n    console.log(`    ⏱️  渲染时间: ${metrics2.renderTime.toFixed(2)}ms`);\n    console.log(`    🧠 内存使用: ${(metrics2.memoryUsage / 1024 / 1024).toFixed(2)}MB`);\n    \n    // 计算性能差异\n    const renderTimeDiff = ((metrics2.renderTime - metrics1.renderTime) / metrics1.renderTime) * 100;\n    const memoryDiff = ((metrics2.memoryUsage - metrics1.memoryUsage) / metrics1.memoryUsage) * 100;\n    \n    console.log(`  📈 性能差异:`);\n    console.log(`    ⏱️  渲染时间: ${renderTimeDiff > 0 ? '+' : ''}${renderTimeDiff.toFixed(1)}%`);\n    console.log(`    🧠 内存使用: ${memoryDiff > 0 ? '+' : ''}${memoryDiff.toFixed(1)}%`);\n    \n    // 性能建议\n    if (Math.abs(renderTimeDiff) < 5) {\n      console.log(`✅ 渲染性能相近`);\n    } else if (renderTimeDiff < 0) {\n      console.log(`🎉 ${name2} 渲染性能更好`);\n    } else {\n      console.log(`🎉 ${name1} 渲染性能更好`);\n    }\n  }\n\n  /**\n   * 内存泄漏检测\n   */\n  static async detectMemoryLeaks(\n    name: string,\n    renderComponent: () => ReactTestRenderer,\n    iterations: number = 100\n  ): Promise<boolean> {\n    console.log(`\\n🔍 开始内存泄漏检测: ${name}`);\n    \n    const initialMemory = this.getMemoryUsage();\n    const memorySnapshots: number[] = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      const renderer = renderComponent();\n      \n      // 模拟一些操作\n      await act(async () => {\n        renderer.update(renderer.getInstance());\n      });\n      \n      renderer.unmount();\n      \n      // 每10次迭代记录内存使用\n      if (i % 10 === 0) {\n        // 强制垃圾回收（如果可用）\n        if (global.gc) {\n          global.gc();\n        }\n        \n        const currentMemory = this.getMemoryUsage();\n        memorySnapshots.push(currentMemory);\n      }\n    }\n    \n    // 分析内存趋势\n    const memoryGrowth = memorySnapshots[memorySnapshots.length - 1] - memorySnapshots[0];\n    const growthPercentage = (memoryGrowth / initialMemory) * 100;\n    \n    console.log(`📊 内存泄漏检测结果 - ${name}:`);\n    console.log(`  🧠 初始内存: ${(initialMemory / 1024 / 1024).toFixed(2)}MB`);\n    console.log(`  📈 内存增长: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB (${growthPercentage.toFixed(1)}%)`);\n    \n    const hasMemoryLeak = growthPercentage > 20; // 20%阈值\n    \n    if (hasMemoryLeak) {\n      console.warn(`⚠️  检测到潜在内存泄漏!`);\n    } else {\n      console.log(`✅ 未检测到明显内存泄漏`);\n    }\n    \n    return hasMemoryLeak;\n  }\n}\n\n/**\n * 性能测试装饰器\n */\nexport function performanceTest(options: PerformanceTestOptions = {}) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = async function (...args: any[]) {\n      const startTime = performance.now();\n      const result = await method.apply(this, args);\n      const endTime = performance.now();\n      \n      console.log(`⏱️  ${propertyName} 执行时间: ${(endTime - startTime).toFixed(2)}ms`);\n      \n      return result;\n    };\n    \n    return descriptor;\n  };\n}\n\n/**\n * 性能断言\n */\nexport class PerformanceAssertions {\n  static expectRenderTimeBelow(metrics: PerformanceMetrics, maxTime: number): void {\n    if (metrics.renderTime > maxTime) {\n      throw new Error(`渲染时间 ${metrics.renderTime.toFixed(2)}ms 超过预期 ${maxTime}ms`);\n    }\n  }\n  \n  static expectMemoryUsageBelow(metrics: PerformanceMetrics, maxMemory: number): void {\n    if (metrics.memoryUsage > maxMemory) {\n      throw new Error(`内存使用 ${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB 超过预期 ${(maxMemory / 1024 / 1024).toFixed(2)}MB`);\n    }\n  }\n  \n  static expectComponentCountBelow(metrics: PerformanceMetrics, maxCount: number): void {\n    if (metrics.componentCount > maxCount) {\n      throw new Error(`组件数量 ${Math.round(metrics.componentCount)} 超过预期 ${maxCount}`);\n    }\n  }\n} "],"mappings":"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","ignoreList":[]}