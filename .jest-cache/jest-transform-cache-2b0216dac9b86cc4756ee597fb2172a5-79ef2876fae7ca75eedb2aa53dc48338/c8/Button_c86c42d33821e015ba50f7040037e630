137996f5489fbd37fc884dc50266cd5a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _theme = require("../../constants/theme");
var _jsxRuntime = require("react/jsx-runtime");
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    style = _ref.style,
    textStyle = _ref.textStyle,
    testID = _ref.testID;
  var buttonStyle = [styles.base, styles[variant], styles[size], fullWidth && styles.fullWidth, disabled && styles.disabled, style];
  var textStyleCombined = [styles.text, styles[`${variant}Text`], styles[`${size}Text`], disabled && styles.disabledText, textStyle];
  var handlePress = function handlePress() {
    if (!disabled && !loading && onPress) {
      onPress();
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    style: buttonStyle,
    onPress: handlePress,
    disabled: disabled || loading,
    activeOpacity: 0.8,
    testID: testID,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.content,
      children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "small",
        color: variant === 'primary' ? _theme.colors.white : _theme.colors.primary,
        style: styles.loading
      }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [leftIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.leftIcon,
          children: leftIcon
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: textStyleCombined,
          children: title
        }), rightIcon && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.rightIcon,
          children: rightIcon
        })]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  base: Object.assign({
    borderRadius: _theme.borderRadius.md,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  }, _theme.shadows.sm),
  primary: {
    backgroundColor: _theme.colors.primary
  },
  secondary: {
    backgroundColor: _theme.colors.secondary
  },
  outline: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: _theme.colors.primary
  },
  ghost: {
    backgroundColor: 'transparent'
  },
  danger: {
    backgroundColor: _theme.colors.error
  },
  small: {
    height: 36,
    paddingHorizontal: _theme.spacing.md
  },
  medium: {
    height: 48,
    paddingHorizontal: _theme.spacing.lg
  },
  large: {
    height: 56,
    paddingHorizontal: _theme.spacing.xl
  },
  fullWidth: {
    width: '100%'
  },
  disabled: Object.assign({
    backgroundColor: _theme.colors.gray300
  }, _theme.shadows.none),
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    fontFamily: _theme.typography.fontFamily.medium,
    fontWeight: '500',
    textAlign: 'center'
  },
  primaryText: {
    color: _theme.colors.white,
    fontSize: _theme.typography.fontSize.base
  },
  secondaryText: {
    color: _theme.colors.white,
    fontSize: _theme.typography.fontSize.base
  },
  outlineText: {
    color: _theme.colors.primary,
    fontSize: _theme.typography.fontSize.base
  },
  ghostText: {
    color: _theme.colors.primary,
    fontSize: _theme.typography.fontSize.base
  },
  dangerText: {
    color: _theme.colors.white,
    fontSize: _theme.typography.fontSize.base
  },
  smallText: {
    fontSize: _theme.typography.fontSize.sm
  },
  mediumText: {
    fontSize: _theme.typography.fontSize.base
  },
  largeText: {
    fontSize: _theme.typography.fontSize.lg
  },
  disabledText: {
    color: _theme.colors.gray500
  },
  leftIcon: {
    marginRight: _theme.spacing.xs
  },
  rightIcon: {
    marginLeft: _theme.spacing.xs
  },
  loading: {
    marginHorizontal: _theme.spacing.xs
  }
});
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,