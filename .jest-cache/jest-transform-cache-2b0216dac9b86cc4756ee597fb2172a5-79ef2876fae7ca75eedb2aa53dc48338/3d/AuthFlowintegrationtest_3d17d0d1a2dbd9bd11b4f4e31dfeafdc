7331965467115a2e7735686478f4b0d0
_getJestObj().mock('../../services/authService', function () {
  return mockAuthService;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var mockAuthService = {
  login: jest.fn(),
  register: jest.fn(),
  resetPassword: jest.fn(),
  verifyCode: jest.fn(),
  logout: jest.fn(),
  getCurrentUser: jest.fn(),
  updateProfile: jest.fn()
};
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
  reset: jest.fn()
};
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
var MockLoginScreen = function MockLoginScreen(_ref) {
  var navigation = _ref.navigation;
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    email = _React$useState2[0],
    setEmail = _React$useState2[1];
  var _React$useState3 = _react.default.useState(''),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    password = _React$useState4[0],
    setPassword = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    loading = _React$useState6[0],
    setLoading = _React$useState6[1];
  var handleLogin = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!email || !password) {
        _reactNative2.Alert.alert('错误', '请填写邮箱和密码');
        return;
      }
      setLoading(true);
      try {
        var result = yield mockAuthService.login(email, password);
        if (result.success) {
          navigation.reset({
            index: 0,
            routes: [{
              name: 'Main'
            }]
          });
        } else {
          _reactNative2.Alert.alert('登录失败', result.message);
        }
      } catch (error) {
        _reactNative2.Alert.alert('登录失败', '网络错误，请稍后重试');
      } finally {
        setLoading(false);
      }
    });
    return function handleLogin() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "login-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\u767B\u5F55"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "email-input",
      placeholder: "\u90AE\u7BB1",
      value: email,
      onChangeText: setEmail,
      autoCapitalize: "none",
      keyboardType: "email-address"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "password-input",
      placeholder: "\u5BC6\u7801",
      value: password,
      onChangeText: setPassword,
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login-button",
      onPress: handleLogin,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '登录中...' : '登录'
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register-link",
      onPress: function onPress() {
        return navigation.navigate('Register');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u6CE8\u518C\u65B0\u8D26\u6237"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "forgot-password-link",
      onPress: function onPress() {
        return navigation.navigate('ForgotPassword');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u5FD8\u8BB0\u5BC6\u7801\uFF1F"
      })
    })]
  });
};
var MockRegisterScreen = function MockRegisterScreen(_ref3) {
  var navigation = _ref3.navigation;
  var _React$useState7 = _react.default.useState({
      email: '',
      password: '',
      confirmPassword: '',
      name: '',
      phone: ''
    }),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    formData = _React$useState8[0],
    setFormData = _React$useState8[1];
  var _React$useState9 = _react.default.useState(false),
    _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
    loading = _React$useState0[0],
    setLoading = _React$useState0[1];
  var updateField = function updateField(field, value) {
    setFormData(function (prev) {
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, field, value));
    });
  };
  var handleRegister = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      var email = formData.email,
        password = formData.password,
        confirmPassword = formData.confirmPassword,
        name = formData.name,
        phone = formData.phone;
      if (!email || !password || !name || !phone) {
        _reactNative2.Alert.alert('错误', '请填写必填信息');
        return;
      }
      if (password.length < 6) {
        _reactNative2.Alert.alert('错误', '密码长度至少6位');
        return;
      }
      if (password !== confirmPassword) {
        _reactNative2.Alert.alert('错误', '两次输入的密码不一致');
        return;
      }
      setLoading(true);
      try {
        var result = yield mockAuthService.register({
          email: email,
          password: password,
          name: name,
          phone: phone
        });
        if (result.success) {
          _reactNative2.Alert.alert('注册成功', '请查收验证邮件');
          navigation.navigate('VerifyEmail', {
            email: email
          });
        } else {
          _reactNative2.Alert.alert('注册失败', result.message);
        }
      } catch (error) {
        _reactNative2.Alert.alert('注册失败', '网络错误，请稍后重试');
      } finally {
        setLoading(false);
      }
    });
    return function handleRegister() {
      return _ref4.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "register-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\u6CE8\u518C"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "name-input",
      placeholder: "\u59D3\u540D",
      value: formData.name,
      onChangeText: function onChangeText(value) {
        return updateField('name', value);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "email-input",
      placeholder: "\u90AE\u7BB1",
      value: formData.email,
      onChangeText: function onChangeText(value) {
        return updateField('email', value);
      },
      autoCapitalize: "none",
      keyboardType: "email-address"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "phone-input",
      placeholder: "\u624B\u673A\u53F7",
      value: formData.phone,
      onChangeText: function onChangeText(value) {
        return updateField('phone', value);
      },
      keyboardType: "phone-pad"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "password-input",
      placeholder: "\u5BC6\u7801",
      value: formData.password,
      onChangeText: function onChangeText(value) {
        return updateField('password', value);
      },
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "confirm-password-input",
      placeholder: "\u786E\u8BA4\u5BC6\u7801",
      value: formData.confirmPassword,
      onChangeText: function onChangeText(value) {
        return updateField('confirmPassword', value);
      },
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register-button",
      onPress: handleRegister,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '注册中...' : '注册'
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login-link",
      onPress: function onPress() {
        return navigation.navigate('Login');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u5DF2\u6709\u8D26\u6237\uFF1F\u7ACB\u5373\u767B\u5F55"
      })
    })]
  });
};
var MockForgotPasswordScreen = function MockForgotPasswordScreen(_ref5) {
  var navigation = _ref5.navigation;
  var _React$useState1 = _react.default.useState(''),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
    email = _React$useState10[0],
    setEmail = _React$useState10[1];
  var _React$useState11 = _react.default.useState(false),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    loading = _React$useState12[0],
    setLoading = _React$useState12[1];
  var _React$useState13 = _react.default.useState(false),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    sent = _React$useState14[0],
    setSent = _React$useState14[1];
  var handleResetPassword = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      if (!email) {
        _reactNative2.Alert.alert('错误', '请输入邮箱地址');
        return;
      }
      setLoading(true);
      try {
        var result = yield mockAuthService.resetPassword(email);
        if (result.success) {
          setSent(true);
          _reactNative2.Alert.alert('发送成功', '重置密码邮件已发送');
        } else {
          _reactNative2.Alert.alert('发送失败', result.message);
        }
      } catch (error) {
        _reactNative2.Alert.alert('发送失败', '网络错误，请稍后重试');
      } finally {
        setLoading(false);
      }
    });
    return function handleResetPassword() {
      return _ref6.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "forgot-password-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\u91CD\u7F6E\u5BC6\u7801"
    }), !sent ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u8BF7\u8F93\u5165\u60A8\u7684\u90AE\u7BB1\u5730\u5740\uFF0C\u6211\u4EEC\u5C06\u53D1\u9001\u91CD\u7F6E\u5BC6\u7801\u94FE\u63A5"
      }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
        testID: "email-input",
        placeholder: "\u90AE\u7BB1",
        value: email,
        onChangeText: setEmail,
        autoCapitalize: "none",
        keyboardType: "email-address"
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "send-button",
        onPress: handleResetPassword,
        disabled: loading,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: loading ? '发送中...' : '发送重置邮件'
        })
      })]
    }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "success-message",
        children: ["\u91CD\u7F6E\u90AE\u4EF6\u5DF2\u53D1\u9001\u5230 ", email]
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "resend-button",
        onPress: function onPress() {
          return setSent(false);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u91CD\u65B0\u53D1\u9001"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "back-to-login",
      onPress: function onPress() {
        return navigation.navigate('Login');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u8FD4\u56DE\u767B\u5F55"
      })
    })]
  });
};
var MockVerifyEmailScreen = function MockVerifyEmailScreen(_ref7) {
  var _route$params;
  var navigation = _ref7.navigation,
    route = _ref7.route;
  var _React$useState15 = _react.default.useState(''),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    code = _React$useState16[0],
    setCode = _React$useState16[1];
  var _React$useState17 = _react.default.useState(false),
    _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
    loading = _React$useState18[0],
    setLoading = _React$useState18[1];
  var email = (route == null || (_route$params = route.params) == null ? void 0 : _route$params.email) || '';
  var handleVerifyCode = function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* () {
      if (!code) {
        _reactNative2.Alert.alert('错误', '请输入验证码');
        return;
      }
      setLoading(true);
      try {
        var result = yield mockAuthService.verifyCode(email, code);
        if (result.success) {
          _reactNative2.Alert.alert('验证成功', '账户已激活');
          navigation.reset({
            index: 0,
            routes: [{
              name: 'Login'
            }]
          });
        } else {
          _reactNative2.Alert.alert('验证失败', result.message);
        }
      } catch (error) {
        _reactNative2.Alert.alert('验证失败', '网络错误，请稍后重试');
      } finally {
        setLoading(false);
      }
    });
    return function handleVerifyCode() {
      return _ref8.apply(this, arguments);
    };
  }();
  var handleResendCode = function () {
    var _ref9 = (0, _asyncToGenerator2.default)(function* () {
      try {
        yield mockAuthService.register({
          email: email,
          resend: true
        });
        _reactNative2.Alert.alert('发送成功', '验证码已重新发送');
      } catch (error) {
        _reactNative2.Alert.alert('发送失败', '请稍后重试');
      }
    });
    return function handleResendCode() {
      return _ref9.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "verify-email-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\u90AE\u7BB1\u9A8C\u8BC1"
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      children: ["\u9A8C\u8BC1\u7801\u5DF2\u53D1\u9001\u5230 ", email]
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "code-input",
      placeholder: "\u8BF7\u8F93\u51656\u4F4D\u9A8C\u8BC1\u7801",
      value: code,
      onChangeText: setCode,
      keyboardType: "number-pad",
      maxLength: 6
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "verify-button",
      onPress: handleVerifyCode,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '验证中...' : '验证'
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "resend-button",
      onPress: handleResendCode,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u91CD\u65B0\u53D1\u9001\u9A8C\u8BC1\u7801"
      })
    })]
  });
};
describe('认证流程集成测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockNavigation.navigate.mockClear();
    mockNavigation.reset.mockClear();
    _reactNative2.Alert.alert.mockClear();
  });
  describe('登录流程', function () {
    it('应该成功登录', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        success: true,
        user: {
          id: '1',
          email: 'test@example.com'
        },
        token: 'mock-token'
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
        _reactNative.fireEvent.changeText(passwordInput, 'password123');
        _reactNative.fireEvent.press(loginButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith('test@example.com', 'password123');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.reset).toHaveBeenCalledWith({
          index: 0,
          routes: [{
            name: 'Main'
          }]
        });
      });
    }));
    it('应该处理登录失败', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        success: false,
        message: '邮箱或密码错误'
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render2.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(passwordInput, 'wrongpassword');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(loginButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith('test@example.com', 'wrongpassword');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('登录失败', '邮箱或密码错误');
      });
    }));
    it('应该验证必填字段', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render3.getByTestId;
      var loginButton = getByTestId('login-button');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(loginButton);
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '请填写邮箱和密码');
    });
    it('应该导航到注册页面', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render4.getByTestId;
      var registerLink = getByTestId('register-link');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(registerLink);
      });
      expect(mockNavigation.navigate).toHaveBeenCalledWith('Register');
    });
    it('应该导航到忘记密码页面', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render5.getByTestId;
      var forgotPasswordLink = getByTestId('forgot-password-link');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(forgotPasswordLink);
      });
      expect(mockNavigation.navigate).toHaveBeenCalledWith('ForgotPassword');
    });
  });
  describe('注册流程', function () {
    it('应该成功注册', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        success: true,
        message: '注册成功'
      });
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockRegisterScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render6.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('name-input'), '张三');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('phone-input'), '13800138000');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('password-input'), 'password123');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('confirm-password-input'), 'password123');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('register-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.register).toHaveBeenCalledWith({
          email: 'test@example.com',
          password: 'password123',
          name: '张三',
          phone: '13800138000'
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('注册成功', '请查收验证邮件');
        expect(mockNavigation.navigate).toHaveBeenCalledWith('VerifyEmail', {
          email: 'test@example.com'
        });
      });
    }));
    it('应该验证密码一致性', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockRegisterScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render7.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('name-input'), '张三');
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
        _reactNative.fireEvent.changeText(getByTestId('phone-input'), '13800138000');
        _reactNative.fireEvent.changeText(getByTestId('password-input'), 'password123');
        _reactNative.fireEvent.changeText(getByTestId('confirm-password-input'), 'different');
        _reactNative.fireEvent.press(getByTestId('register-button'));
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '两次输入的密码不一致');
    });
    it('应该验证密码长度', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockRegisterScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render8.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('name-input'), '张三');
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
        _reactNative.fireEvent.changeText(getByTestId('phone-input'), '13800138000');
        _reactNative.fireEvent.changeText(getByTestId('password-input'), '123');
        _reactNative.fireEvent.changeText(getByTestId('confirm-password-input'), '123');
        _reactNative.fireEvent.press(getByTestId('register-button'));
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '密码长度至少6位');
    });
    it('应该验证必填字段', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockRegisterScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render9.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(getByTestId('register-button'));
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '请填写必填信息');
    });
  });
  describe('忘记密码流程', function () {
    it('应该发送重置密码邮件', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.resetPassword.mockResolvedValue({
        success: true,
        message: '邮件已发送'
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockForgotPasswordScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render0.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('send-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.resetPassword).toHaveBeenCalledWith('test@example.com');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('发送成功', '重置密码邮件已发送');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('success-message')).toBeTruthy();
      });
    }));
    it('应该验证邮箱输入', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockForgotPasswordScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render1.getByTestId;
      _reactNative.fireEvent.press(getByTestId('send-button'));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '请输入邮箱地址');
    });
    it('应该支持重新发送', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.resetPassword.mockResolvedValue({
        success: true,
        message: '邮件已发送'
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockForgotPasswordScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render10.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
        _reactNative.fireEvent.press(getByTestId('send-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('success-message')).toBeTruthy();
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(getByTestId('resend-button'));
      });
      expect(getByTestId('email-input')).toBeTruthy();
    }));
  });
  describe('邮箱验证流程', function () {
    var mockRoute = {
      params: {
        email: 'test@example.com'
      }
    };
    it('应该成功验证邮箱', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.verifyCode.mockResolvedValue({
        success: true,
        message: '验证成功'
      });
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVerifyEmailScreen, {
          navigation: mockNavigation,
          route: mockRoute
        })),
        getByTestId = _render11.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('code-input'), '123456');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('verify-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.verifyCode).toHaveBeenCalledWith('test@example.com', '123456');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('验证成功', '账户已激活');
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.reset).toHaveBeenCalledWith({
          index: 0,
          routes: [{
            name: 'Login'
          }]
        });
      });
    }));
    it('应该验证验证码输入', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVerifyEmailScreen, {
          navigation: mockNavigation,
          route: mockRoute
        })),
        getByTestId = _render12.getByTestId;
      _reactNative.fireEvent.press(getByTestId('verify-button'));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('错误', '请输入验证码');
    });
    it('应该支持重新发送验证码', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        success: true
      });
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockVerifyEmailScreen, {
          navigation: mockNavigation,
          route: mockRoute
        })),
        getByTestId = _render13.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('resend-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.register).toHaveBeenCalledWith({
          email: 'test@example.com',
          resend: true
        });
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('发送成功', '验证码已重新发送');
    }));
  });
  describe('网络错误处理', function () {
    it('应该处理登录网络错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('Network Error'));
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockLoginScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render14.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('password-input'), 'password123');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('login-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('登录失败', '网络错误，请稍后重试');
      });
    }));
    it('应该处理注册网络错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockRejectedValue(new Error('Network Error'));
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockRegisterScreen, {
          navigation: mockNavigation
        })),
        getByTestId = _render15.getByTestId;
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('name-input'), '张三');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('email-input'), 'test@example.com');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('phone-input'), '13800138000');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('password-input'), 'password123');
      });
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(getByTestId('confirm-password-input'), 'password123');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId('register-button'));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('注册失败', '网络错误，请稍后重试');
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,