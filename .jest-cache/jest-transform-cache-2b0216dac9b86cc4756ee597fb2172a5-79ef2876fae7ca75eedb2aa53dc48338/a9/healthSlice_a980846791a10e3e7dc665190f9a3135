a76ab3854752f6f8da726cf6e79c6019
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSummary = exports.updateHealthDataLocal = exports.syncHealthData = exports.setHealthDataFilter = exports.selectRecentHealthData = exports.selectHealthSummary = exports.selectHealthLoading = exports.selectHealthError = exports.selectHealthDataByType = exports.selectHealthData = exports.selectHealth = exports.removeHealthDataLocal = exports.generateHealthReport = exports.fetchHealthTrends = exports.fetchHealthSummary = exports.default = exports.clearError = exports.analyzeHealthData = exports.addHealthDataLocal = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _apiClient = require("../../services/apiClient");
var initialState = {
  data: [],
  summary: {
    overallScore: 0,
    constitution: "balanced",
    recommendations: [],
    trends: {
      heart_rate: "stable",
      blood_pressure: "stable",
      body_temperature: "stable",
      sleep_quality: "stable",
      stress_level: "stable",
      mood: "stable",
      exercise: "stable",
      nutrition: "stable"
    }
  },
  loading: false,
  error: undefined
};
var fetchHealthSummary = exports.fetchHealthSummary = (0, _toolkit.createAsyncThunk)("health/fetchSummary", function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_, _ref) {
    var rejectWithValue = _ref.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.get("/health/summary");
      if (!response.success) {
        var _response$error;
        throw new Error(((_response$error = response.error) == null ? void 0 : _response$error.message) || "获取健康概况失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "获取健康概况失败");
    }
  });
  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}());
var fetchHealthTrends = exports.fetchHealthTrends = (0, _toolkit.createAsyncThunk)("health/fetchTrends", function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (params, _ref3) {
    var rejectWithValue = _ref3.rejectWithValue;
    try {
      var queryParams = new URLSearchParams();
      if (params.type) {
        queryParams.append('type', params.type);
      }
      if (params.days) {
        queryParams.append('days', params.days.toString());
      }
      var response = yield _apiClient.apiClient.get(`/health/trends?${queryParams.toString()}`);
      if (!response.success) {
        var _response$error2;
        throw new Error(((_response$error2 = response.error) == null ? void 0 : _response$error2.message) || "获取健康趋势失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "获取健康趋势失败");
    }
  });
  return function (_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}());
var syncHealthData = exports.syncHealthData = (0, _toolkit.createAsyncThunk)("health/syncData", function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (_, _ref5) {
    var rejectWithValue = _ref5.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/health/sync");
      if (!response.success) {
        var _response$error3;
        throw new Error(((_response$error3 = response.error) == null ? void 0 : _response$error3.message) || "同步健康数据失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "同步健康数据失败");
    }
  });
  return function (_x5, _x6) {
    return _ref6.apply(this, arguments);
  };
}());
var analyzeHealthData = exports.analyzeHealthData = (0, _toolkit.createAsyncThunk)("health/analyzeData", function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (_ref7, _ref8) {
    var dataIds = _ref7.dataIds;
    var rejectWithValue = _ref8.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/health/analyze", {
        dataIds: dataIds
      });
      if (!response.success) {
        var _response$error4;
        throw new Error(((_response$error4 = response.error) == null ? void 0 : _response$error4.message) || "分析健康数据失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "分析健康数据失败");
    }
  });
  return function (_x7, _x8) {
    return _ref9.apply(this, arguments);
  };
}());
var generateHealthReport = exports.generateHealthReport = (0, _toolkit.createAsyncThunk)("health/generateReport", function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (_ref0, _ref1) {
    var startDate = _ref0.startDate,
      endDate = _ref0.endDate;
    var rejectWithValue = _ref1.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/health/report", {
        startDate: startDate,
        endDate: endDate
      });
      if (!response.success) {
        var _response$error5;
        throw new Error(((_response$error5 = response.error) == null ? void 0 : _response$error5.message) || "生成健康报告失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "生成健康报告失败");
    }
  });
  return function (_x9, _x0) {
    return _ref10.apply(this, arguments);
  };
}());
var healthSlice = (0, _toolkit.createSlice)({
  name: "health",
  initialState: initialState,
  reducers: {
    addHealthDataLocal: function addHealthDataLocal(state, action) {
      state.data.unshift(action.payload);
    },
    updateHealthDataLocal: function updateHealthDataLocal(state, action) {
      var index = state.data.findIndex(function (item) {
        return item.id === action.payload.id;
      });
      if (index >= 0) {
        state.data[index] = action.payload;
      }
    },
    removeHealthDataLocal: function removeHealthDataLocal(state, action) {
      state.data = state.data.filter(function (item) {
        return item.id !== action.payload;
      });
    },
    updateSummary: function updateSummary(state, action) {
      state.summary = Object.assign({}, state.summary, action.payload);
    },
    clearError: function clearError(state) {
      state.error = undefined;
    },
    setHealthDataFilter: function setHealthDataFilter(_state, _action) {}
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(fetchHealthSummary.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(fetchHealthSummary.fulfilled, function (state, action) {
      state.loading = false;
      state.summary = action.payload;
      state.error = undefined;
    }).addCase(fetchHealthSummary.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(fetchHealthTrends.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(fetchHealthTrends.fulfilled, function (state, action) {
      state.loading = false;
      state.data = action.payload;
      state.error = undefined;
    }).addCase(fetchHealthTrends.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(syncHealthData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(syncHealthData.fulfilled, function (state, action) {
      state.loading = false;
      var existingIds = new Set(state.data.map(function (item) {
        return item.id;
      }));
      var newData = action.payload.filter(function (item) {
        return !existingIds.has(item.id);
      });
      state.data = [].concat((0, _toConsumableArray2.default)(newData), (0, _toConsumableArray2.default)(state.data));
      state.error = undefined;
    }).addCase(syncHealthData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(analyzeHealthData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(analyzeHealthData.fulfilled, function (state, action) {
      state.loading = false;
      state.summary = action.payload;
      state.error = undefined;
    }).addCase(analyzeHealthData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(generateHealthReport.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(generateHealthReport.fulfilled, function (state, _action) {
      state.loading = false;
      state.error = undefined;
    }).addCase(generateHealthReport.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
  }
});
var _healthSlice$actions = healthSlice.actions,
  addHealthDataLocal = exports.addHealthDataLocal = _healthSlice$actions.addHealthDataLocal,
  updateHealthDataLocal = exports.updateHealthDataLocal = _healthSlice$actions.updateHealthDataLocal,
  removeHealthDataLocal = exports.removeHealthDataLocal = _healthSlice$actions.removeHealthDataLocal,
  updateSummary = exports.updateSummary = _healthSlice$actions.updateSummary,
  clearError = exports.clearError = _healthSlice$actions.clearError,
  setHealthDataFilter = exports.setHealthDataFilter = _healthSlice$actions.setHealthDataFilter;
var selectHealth = exports.selectHealth = function selectHealth(state) {
  return state.health;
};
var selectHealthData = exports.selectHealthData = function selectHealthData(state) {
  return state.health.data;
};
var selectHealthSummary = exports.selectHealthSummary = function selectHealthSummary(state) {
  return state.health.summary;
};
var selectHealthLoading = exports.selectHealthLoading = function selectHealthLoading(state) {
  return state.health.loading;
};
var selectHealthError = exports.selectHealthError = function selectHealthError(state) {
  return state.health.error;
};
var selectHealthDataByType = exports.selectHealthDataByType = function selectHealthDataByType(type) {
  return function (state) {
    return state.health.data.filter(function (item) {
      return item.type === type;
    });
  };
};
var selectRecentHealthData = exports.selectRecentHealthData = function selectRecentHealthData() {
  var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;
  return function (state) {
    var cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);
    return state.health.data.filter(function (item) {
      return new Date(item.timestamp) >= cutoffDate;
    }).sort(function (a, b) {
      return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
    });
  };
};
var _default = exports.default = healthSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,