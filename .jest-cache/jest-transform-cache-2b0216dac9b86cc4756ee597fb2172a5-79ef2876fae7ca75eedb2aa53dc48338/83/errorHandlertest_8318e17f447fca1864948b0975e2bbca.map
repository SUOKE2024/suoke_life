{"version":3,"names":["_getJestObj","mock","Alert","alert","jest","fn","_reactNative","require","_require","mockAlert","errorHandler","handleApiError","error","_error$response$data","response","status","data","message","request","showErrorAlert","title","text","isNetworkError","isServerError","describe","beforeEach","clearAllMocks","it","result","expect","toBe","toHaveBeenCalledWith","networkError","apiError","serverError","clientError"],"sources":["errorHandler.test.ts"],"sourcesContent":["import { Alert } from 'react-native';\n\n// Mock Alert\njest.mock('react-native', () => ({\n  Alert: {\n    alert: jest.fn(),\n  },\n}));\n\nconst mockAlert = Alert.alert as jest.MockedFunction<typeof Alert.alert>;\n\n// Mock错误处理器\nconst errorHandler = {\n  handleApiError: (error: any): string => {\n    if (error.response) {\n      const status = error.response.status;\n      \n      switch (status) {\n        case 400:\n          return '请求参数错误';\n        case 401:\n          return '未授权，请重新登录';\n        case 403:\n          return '权限不足';\n        case 404:\n          return '请求的资源不存在';\n        case 500:\n          return '服务器内部错误';\n        default:\n          return error.response.data?.message || '服务器错误';\n      }\n    }\n    \n    if (error.request) {\n      return '网络连接失败，请检查网络设置';\n    }\n    \n    return error.message || '未知错误';\n  },\n\n  showErrorAlert: (title: string, message: string): void => {\n    Alert.alert(title, message, [{ text: '确定' }]);\n  },\n\n  isNetworkError: (error: any): boolean => {\n    return !error.response && !!error.request;\n  },\n\n  isServerError: (error: any): boolean => {\n    return error.response && error.response.status >= 500;\n  },\n};\n\ndescribe('ErrorHandler', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('API错误处理', () => {\n    it('应该处理400错误', () => {\n      const error = {\n        response: {\n          status: 400,\n          data: { message: '参数错误' },\n        },\n      };\n      \n      const result = errorHandler.handleApiError(error);\n      expect(result).toBe('请求参数错误');\n    });\n\n    it('应该处理401错误', () => {\n      const error = {\n        response: {\n          status: 401,\n        },\n      };\n      \n      const result = errorHandler.handleApiError(error);\n      expect(result).toBe('未授权，请重新登录');\n    });\n\n    it('应该处理网络错误', () => {\n      const error = {\n        request: {},\n        message: '网络错误',\n      };\n      \n      const result = errorHandler.handleApiError(error);\n      expect(result).toBe('网络连接失败，请检查网络设置');\n    });\n  });\n\n  describe('错误提示', () => {\n    it('应该显示错误弹窗', () => {\n      errorHandler.showErrorAlert('错误', '这是一个错误消息');\n      \n      expect(mockAlert).toHaveBeenCalledWith(\n        '错误',\n        '这是一个错误消息',\n        [{ text: '确定' }]\n      );\n    });\n  });\n\n  describe('错误类型判断', () => {\n    it('应该正确识别网络错误', () => {\n      const networkError = { request: {}, message: '网络错误' };\n      const result = errorHandler.isNetworkError(networkError);\n      expect(typeof result).toBe('boolean');\n      expect(result).toBe(true);\n      \n      const apiError = { response: { status: 400 } };\n      expect(errorHandler.isNetworkError(apiError)).toBe(false);\n    });\n\n    it('应该正确识别服务器错误', () => {\n      const serverError = { response: { status: 500 } };\n      expect(errorHandler.isServerError(serverError)).toBe(true);\n      \n      const clientError = { response: { status: 400 } };\n      expect(errorHandler.isServerError(clientError)).toBe(false);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}