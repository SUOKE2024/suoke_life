c51780d7f83e71bcd085bc7e9b88ac9d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forFade = forFade;
exports.forNoAnimation = forNoAnimation;
exports.forSlideLeft = forSlideLeft;
exports.forSlideRight = forSlideRight;
exports.forSlideUp = forSlideUp;
exports.forUIKit = forUIKit;
var _reactNative = require("react-native");
var add = _reactNative.Animated.add;
function forUIKit(_ref) {
  var current = _ref.current,
    next = _ref.next,
    layouts = _ref.layouts;
  var defaultOffset = 100;
  var leftSpacing = 27;
  var leftLabelOffset = layouts.leftLabel ? (layouts.screen.width - layouts.leftLabel.width) / 2 - leftSpacing : defaultOffset;
  var titleLeftOffset = layouts.title ? (layouts.screen.width - layouts.title.width) / 2 - leftSpacing : defaultOffset;
  var rightOffset = layouts.screen.width / 4;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  return {
    leftButtonStyle: {
      opacity: progress.interpolate({
        inputRange: [0.3, 1, 1.5],
        outputRange: [0, 1, 0]
      })
    },
    leftLabelStyle: {
      transform: [{
        translateX: progress.interpolate({
          inputRange: [0, 1, 2],
          outputRange: _reactNative.I18nManager.getConstants().isRTL ? [-rightOffset, 0, leftLabelOffset] : [leftLabelOffset, 0, -rightOffset]
        })
      }]
    },
    rightButtonStyle: {
      opacity: progress.interpolate({
        inputRange: [0.3, 1, 1.5],
        outputRange: [0, 1, 0]
      })
    },
    titleStyle: {
      opacity: progress.interpolate({
        inputRange: [0, 0.4, 1, 1.5],
        outputRange: [0, 0.1, 1, 0]
      }),
      transform: [{
        translateX: progress.interpolate({
          inputRange: [0.5, 1, 2],
          outputRange: _reactNative.I18nManager.getConstants().isRTL ? [-titleLeftOffset, 0, rightOffset] : [rightOffset, 0, -titleLeftOffset]
        })
      }]
    },
    backgroundStyle: {
      transform: [{
        translateX: progress.interpolate({
          inputRange: [0, 1, 2],
          outputRange: _reactNative.I18nManager.getConstants().isRTL ? [-layouts.screen.width, 0, layouts.screen.width] : [layouts.screen.width, 0, -layouts.screen.width]
        })
      }]
    }
  };
}
function forFade(_ref2) {
  var current = _ref2.current,
    next = _ref2.next;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var opacity = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [0, 1, 0]
  });
  return {
    leftButtonStyle: {
      opacity: opacity
    },
    rightButtonStyle: {
      opacity: opacity
    },
    titleStyle: {
      opacity: opacity
    },
    backgroundStyle: {
      opacity: progress.interpolate({
        inputRange: [0, 1, 1.9, 2],
        outputRange: [0, 1, 1, 0]
      })
    }
  };
}
function forSlideLeft(_ref3) {
  var current = _ref3.current,
    next = _ref3.next,
    screen = _ref3.layouts.screen;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var translateX = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: _reactNative.I18nManager.getConstants().isRTL ? [-screen.width, 0, screen.width] : [screen.width, 0, -screen.width]
  });
  var transform = [{
    translateX: translateX
  }];
  return {
    leftButtonStyle: {
      transform: transform
    },
    rightButtonStyle: {
      transform: transform
    },
    titleStyle: {
      transform: transform
    },
    backgroundStyle: {
      transform: transform
    }
  };
}
function forSlideRight(_ref4) {
  var current = _ref4.current,
    next = _ref4.next,
    screen = _ref4.layouts.screen;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var translateX = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: _reactNative.I18nManager.getConstants().isRTL ? [screen.width, 0, -screen.width] : [-screen.width, 0, screen.width]
  });
  var transform = [{
    translateX: translateX
  }];
  return {
    leftButtonStyle: {
      transform: transform
    },
    rightButtonStyle: {
      transform: transform
    },
    titleStyle: {
      transform: transform
    },
    backgroundStyle: {
      transform: transform
    }
  };
}
function forSlideUp(_ref5) {
  var current = _ref5.current,
    next = _ref5.next,
    header = _ref5.layouts.header;
  var progress = add(current.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }), next ? next.progress.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  }) : 0);
  var translateY = progress.interpolate({
    inputRange: [0, 1, 2],
    outputRange: [-header.height, 0, -header.height]
  });
  var transform = [{
    translateY: translateY
  }];
  return {
    leftButtonStyle: {
      transform: transform
    },
    rightButtonStyle: {
      transform: transform
    },
    titleStyle: {
      transform: transform
    },
    backgroundStyle: {
      transform: transform
    }
  };
}
function forNoAnimation() {
  return {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,