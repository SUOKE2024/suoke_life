383f56288c0d3beaed159ef027d2c155
_getJestObj().mock('../../services/authService', function () {
  return {
    authService: mockAuthService
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
var _stack = require("@react-navigation/stack");
var _reactNative2 = require("react-native");
var _store = require("../../store");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAuthService = {
  login: jest.fn(),
  register: jest.fn(),
  logout: jest.fn(),
  getCurrentUser: jest.fn(),
  refreshToken: jest.fn()
};
var LoginScreen = function LoginScreen() {
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    email = _React$useState2[0],
    setEmail = _React$useState2[1];
  var _React$useState3 = _react.default.useState(''),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    password = _React$useState4[0],
    setPassword = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    loading = _React$useState6[0],
    setLoading = _React$useState6[1];
  var handleLogin = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      try {
        yield mockAuthService.login({
          email: email,
          password: password
        });
      } catch (error) {
        console.error('Login failed:', error);
      } finally {
        setLoading(false);
      }
    });
    return function handleLogin() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "email-input",
      value: email,
      onChangeText: setEmail,
      placeholder: "\u90AE\u7BB1"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "password-input",
      value: password,
      onChangeText: setPassword,
      placeholder: "\u5BC6\u7801",
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login-button",
      onPress: handleLogin,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '登录中...' : '登录'
      })
    })]
  });
};
var RegisterScreen = function RegisterScreen() {
  var _React$useState7 = _react.default.useState(''),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    email = _React$useState8[0],
    setEmail = _React$useState8[1];
  var _React$useState9 = _react.default.useState(''),
    _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
    password = _React$useState0[0],
    setPassword = _React$useState0[1];
  var _React$useState1 = _react.default.useState(''),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
    confirmPassword = _React$useState10[0],
    setConfirmPassword = _React$useState10[1];
  var _React$useState11 = _react.default.useState(false),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    loading = _React$useState12[0],
    setLoading = _React$useState12[1];
  var _React$useState13 = _react.default.useState(''),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    error = _React$useState14[0],
    setError = _React$useState14[1];
  var handleRegister = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (password !== confirmPassword) {
        setError('密码不匹配');
        return;
      }
      setLoading(true);
      setError('');
      try {
        yield mockAuthService.register({
          email: email,
          password: password
        });
      } catch (error) {
        console.error('Registration failed:', error);
        setError('注册失败');
      } finally {
        setLoading(false);
      }
    });
    return function handleRegister() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "register-email-input",
      value: email,
      onChangeText: setEmail,
      placeholder: "\u90AE\u7BB1"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "register-password-input",
      value: password,
      onChangeText: setPassword,
      placeholder: "\u5BC6\u7801",
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "confirm-password-input",
      value: confirmPassword,
      onChangeText: setConfirmPassword,
      placeholder: "\u786E\u8BA4\u5BC6\u7801",
      secureTextEntry: true
    }), error ? (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "error-message",
      children: error
    }) : null, (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register-button",
      onPress: handleRegister,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '注册中...' : '注册'
      })
    })]
  });
};
var HomeScreen = function HomeScreen() {
  var handleLogout = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      yield mockAuthService.logout();
    });
    return function handleLogout() {
      return _ref3.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "welcome-message",
      children: "\u6B22\u8FCE\u56DE\u6765\uFF01"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "logout-button",
      onPress: handleLogout,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\u767B\u51FA"
      })
    })]
  });
};
var Stack = (0, _stack.createStackNavigator)();
var TestApp = function TestApp() {
  return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
    store: _store.store,
    children: (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsxs)(Stack.Navigator, {
        initialRouteName: "Login",
        children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
          name: "Login",
          component: LoginScreen
        }), (0, _jsxRuntime.jsx)(Stack.Screen, {
          name: "Register",
          component: RegisterScreen
        }), (0, _jsxRuntime.jsx)(Stack.Screen, {
          name: "Home",
          component: HomeScreen
        })]
      })
    })
  });
};
describe('认证流程集成测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('登录流程', function () {
    it('应该成功完成登录流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith({
          email: 'test@example.com',
          password: 'password123'
        });
      });
    }));
    it('应该处理登录错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('登录失败'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render2.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'wrongpassword');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));
      });
      consoleSpy.mockRestore();
    }));
    it('应该在登录过程中显示加载状态', (0, _asyncToGenerator2.default)(function* () {
      var resolveLogin;
      mockAuthService.login.mockImplementation(function () {
        return new Promise(function (resolve) {
          resolveLogin = resolve;
        });
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.press(loginButton);
      expect(getByText('登录中...')).toBeTruthy();
      resolveLogin({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('登录')).toBeTruthy();
      });
    }));
  });
  describe('注册流程', function () {
    it('应该成功完成注册流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        user: {
          id: '2',
          email: 'newuser@example.com',
          name: '新用户'
        },
        token: 'new-token'
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render4.getByTestId;
      var emailInput = getByTestId('register-email-input');
      var passwordInput = getByTestId('register-password-input');
      var confirmPasswordInput = getByTestId('confirm-password-input');
      var registerButton = getByTestId('register-button');
      _reactNative.fireEvent.changeText(emailInput, 'newuser@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'newpassword123');
      _reactNative.fireEvent.changeText(confirmPasswordInput, 'newpassword123');
      _reactNative.fireEvent.press(registerButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.register).toHaveBeenCalledWith({
          email: 'newuser@example.com',
          password: 'newpassword123'
        });
      });
    }));
    it('应该验证密码匹配', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render5.getByTestId,
        getByText = _render5.getByText;
      var emailInput = getByTestId('register-email-input');
      var passwordInput = getByTestId('register-password-input');
      var confirmPasswordInput = getByTestId('confirm-password-input');
      var registerButton = getByTestId('register-button');
      _reactNative.fireEvent.changeText(emailInput, 'newuser@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.changeText(confirmPasswordInput, 'differentpassword');
      _reactNative.fireEvent.press(registerButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('密码不匹配')).toBeTruthy();
      });
    }));
  });
  describe('登出流程', function () {
    it('应该成功完成登出流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.logout.mockResolvedValue(undefined);
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render6.getByTestId;
      var logoutButton = getByTestId('logout-button');
      _reactNative.fireEvent.press(logoutButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.logout).toHaveBeenCalled();
      });
    }));
  });
  describe('性能测试', function () {
    it('登录流程应该在合理时间内完成', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      var startTime = performance.now();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render7.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalled();
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(1000);
    }));
    it('应该高效处理多个并发登录请求', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render8.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      var startTime = performance.now();
      for (var i = 0; i < 5; i++) {
        _reactNative.fireEvent.press(loginButton);
      }
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalled();
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(2000);
      expect(mockAuthService.login).toHaveBeenCalledTimes(1);
    }));
  });
  describe('错误处理', function () {
    it('应该处理网络错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('网络连接失败'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render9.getByTestId;
      var emailInput = getByTestId('email-input');
      var passwordInput = getByTestId('password-input');
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.changeText(emailInput, 'test@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));
      });
      consoleSpy.mockRestore();
    }));
    it('应该处理无效的输入', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
        getByTestId = _render0.getByTestId;
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith({
          email: '',
          password: ''
        });
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,