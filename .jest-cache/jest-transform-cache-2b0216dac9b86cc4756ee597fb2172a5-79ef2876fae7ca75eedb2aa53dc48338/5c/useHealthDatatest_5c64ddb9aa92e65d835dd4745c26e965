999ed15dd00a808304a809e4b7b91bc0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var mockHealthData = {
  metrics: [{
    id: 'heart_rate',
    name: '心率',
    value: 72,
    unit: 'bpm',
    target: 70,
    icon: 'heart',
    color: '#FF3B30',
    trend: 'stable',
    suggestion: '心率正常，保持当前状态'
  }, {
    id: 'blood_pressure',
    name: '血压',
    value: 120,
    unit: 'mmHg',
    target: 120,
    icon: 'gauge',
    color: '#007AFF',
    trend: 'up',
    suggestion: '血压略高，注意饮食'
  }],
  lastUpdated: '2024-01-15T10:30:00Z',
  syncStatus: 'synced'
};
var mockFetchHealthData = jest.fn();
var mockUpdateHealthMetric = jest.fn();
var mockSyncHealthData = jest.fn();
var mockRefreshHealthData = jest.fn();
var useHealthData = jest.fn();
describe('useHealthData Hook', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useHealthData.mockReturnValue({
      healthData: mockHealthData,
      loading: false,
      error: null,
      fetchHealthData: mockFetchHealthData,
      updateHealthMetric: mockUpdateHealthMetric,
      syncHealthData: mockSyncHealthData,
      refreshHealthData: mockRefreshHealthData
    });
  });
  it('应该返回初始健康数据', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook.result;
    expect(result.current.healthData).toEqual(mockHealthData);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });
  it('应该处理加载状态', function () {
    useHealthData.mockReturnValue({
      healthData: null,
      loading: true,
      error: null,
      fetchHealthData: mockFetchHealthData,
      updateHealthMetric: mockUpdateHealthMetric,
      syncHealthData: mockSyncHealthData,
      refreshHealthData: mockRefreshHealthData
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook2.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.healthData).toBeNull();
  });
  it('应该处理错误状态', function () {
    var mockError = new Error('获取健康数据失败');
    useHealthData.mockReturnValue({
      healthData: null,
      loading: false,
      error: mockError,
      fetchHealthData: mockFetchHealthData,
      updateHealthMetric: mockUpdateHealthMetric,
      syncHealthData: mockSyncHealthData,
      refreshHealthData: mockRefreshHealthData
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook3.result;
    expect(result.current.error).toEqual(mockError);
    expect(result.current.healthData).toBeNull();
  });
  it('应该能够获取健康数据', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.fetchHealthData();
    }));
    expect(mockFetchHealthData).toHaveBeenCalledTimes(1);
  }));
  it('应该能够更新健康指标', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook5.result;
    var updateData = {
      id: 'heart_rate',
      value: 75
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.updateHealthMetric(updateData.id, updateData.value);
    }));
    expect(mockUpdateHealthMetric).toHaveBeenCalledWith(updateData.id, updateData.value);
  }));
  it('应该能够同步健康数据', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.syncHealthData();
    }));
    expect(mockSyncHealthData).toHaveBeenCalledTimes(1);
  }));
  it('应该正确处理健康指标筛选', function () {
    var _result$current$healt;
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook7.result;
    var heartRateMetric = (_result$current$healt = result.current.healthData) == null ? void 0 : _result$current$healt.metrics.find(function (metric) {
      return metric.id === 'heart_rate';
    });
    expect(heartRateMetric).toBeDefined();
    expect(heartRateMetric == null ? void 0 : heartRateMetric.name).toBe('心率');
    expect(heartRateMetric == null ? void 0 : heartRateMetric.value).toBe(72);
  });
  it('应该正确处理同步状态', function () {
    var _result$current$healt2, _result$current$healt3;
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook8.result;
    expect((_result$current$healt2 = result.current.healthData) == null ? void 0 : _result$current$healt2.syncStatus).toBe('synced');
    expect((_result$current$healt3 = result.current.healthData) == null ? void 0 : _result$current$healt3.lastUpdated).toBe('2024-01-15T10:30:00Z');
  });
  it('应该处理空数据情况', function () {
    var _result$current$healt4, _result$current$healt5;
    useHealthData.mockReturnValue({
      healthData: {
        metrics: [],
        lastUpdated: null,
        syncStatus: 'pending'
      },
      loading: false,
      error: null,
      fetchHealthData: mockFetchHealthData,
      updateHealthMetric: mockUpdateHealthMetric,
      syncHealthData: mockSyncHealthData,
      refreshHealthData: mockRefreshHealthData
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook9.result;
    expect((_result$current$healt4 = result.current.healthData) == null ? void 0 : _result$current$healt4.metrics).toHaveLength(0);
    expect((_result$current$healt5 = result.current.healthData) == null ? void 0 : _result$current$healt5.syncStatus).toBe('pending');
  });
  it('应该处理网络错误', function () {
    var _result$current$error;
    var networkError = new Error('网络连接失败');
    useHealthData.mockReturnValue({
      healthData: null,
      loading: false,
      error: networkError,
      fetchHealthData: mockFetchHealthData,
      updateHealthMetric: mockUpdateHealthMetric,
      syncHealthData: mockSyncHealthData,
      refreshHealthData: mockRefreshHealthData
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return useHealthData();
      }),
      result = _renderHook0.result;
    expect((_result$current$error = result.current.error) == null ? void 0 : _result$current$error.message).toBe('网络连接失败');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,