{"version":3,"names":["_reactNative","require","mockHealthData","metrics","id","name","value","unit","target","icon","color","trend","suggestion","lastUpdated","syncStatus","mockFetchHealthData","jest","fn","mockUpdateHealthMetric","mockSyncHealthData","mockRefreshHealthData","useHealthData","describe","beforeEach","clearAllMocks","mockReturnValue","healthData","loading","error","fetchHealthData","updateHealthMetric","syncHealthData","refreshHealthData","it","_renderHook","renderHook","result","expect","current","toEqual","toBe","toBeNull","_renderHook2","mockError","Error","_renderHook3","_asyncToGenerator2","default","_renderHook4","act","toHaveBeenCalledTimes","_renderHook5","updateData","toHaveBeenCalledWith","_renderHook6","_result$current$healt","_renderHook7","heartRateMetric","find","metric","toBeDefined","_result$current$healt2","_result$current$healt3","_renderHook8","_result$current$healt4","_result$current$healt5","_renderHook9","toHaveLength","_result$current$error","networkError","_renderHook0","message"],"sources":["useHealthData.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-native';\nimport { HealthMetric } from '../../types/life';\n\n// Mock健康数据类型\ninterface HealthData {\n  metrics: HealthMetric[];\n  lastUpdated: string | null;\n  syncStatus: 'synced' | 'pending' | 'error';\n}\n\ninterface UseHealthDataReturn {\n  healthData: HealthData | null;\n  loading: boolean;\n  error: Error | null;\n  fetchHealthData: () => Promise<void>;\n  updateHealthMetric: (id: string, value: number) => Promise<void>;\n  syncHealthData: () => Promise<void>;\n  refreshHealthData: () => void;\n}\n\n// Mock健康数据\nconst mockHealthData: HealthData = {\n  metrics: [\n    {\n      id: 'heart_rate',\n      name: '心率',\n      value: 72,\n      unit: 'bpm',\n      target: 70,\n      icon: 'heart',\n      color: '#FF3B30',\n      trend: 'stable',\n      suggestion: '心率正常，保持当前状态',\n    },\n    {\n      id: 'blood_pressure',\n      name: '血压',\n      value: 120,\n      unit: 'mmHg',\n      target: 120,\n      icon: 'gauge',\n      color: '#007AFF',\n      trend: 'up',\n      suggestion: '血压略高，注意饮食',\n    },\n  ],\n  lastUpdated: '2024-01-15T10:30:00Z',\n  syncStatus: 'synced',\n};\n\n// Mock API调用\nconst mockFetchHealthData = jest.fn();\nconst mockUpdateHealthMetric = jest.fn();\nconst mockSyncHealthData = jest.fn();\nconst mockRefreshHealthData = jest.fn();\n\n// Mock useHealthData Hook\nconst useHealthData = jest.fn<UseHealthDataReturn, []>();\n\ndescribe('useHealthData Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 设置默认的mock实现\n    useHealthData.mockReturnValue({\n      healthData: mockHealthData,\n      loading: false,\n      error: null,\n      fetchHealthData: mockFetchHealthData,\n      updateHealthMetric: mockUpdateHealthMetric,\n      syncHealthData: mockSyncHealthData,\n      refreshHealthData: mockRefreshHealthData,\n    });\n  });\n\n  it('应该返回初始健康数据', () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.healthData).toEqual(mockHealthData);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n  });\n\n  it('应该处理加载状态', () => {\n    useHealthData.mockReturnValue({\n      healthData: null,\n      loading: true,\n      error: null,\n      fetchHealthData: mockFetchHealthData,\n      updateHealthMetric: mockUpdateHealthMetric,\n      syncHealthData: mockSyncHealthData,\n      refreshHealthData: mockRefreshHealthData,\n    });\n\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.loading).toBe(true);\n    expect(result.current.healthData).toBeNull();\n  });\n\n  it('应该处理错误状态', () => {\n    const mockError = new Error('获取健康数据失败');\n    \n    useHealthData.mockReturnValue({\n      healthData: null,\n      loading: false,\n      error: mockError,\n      fetchHealthData: mockFetchHealthData,\n      updateHealthMetric: mockUpdateHealthMetric,\n      syncHealthData: mockSyncHealthData,\n      refreshHealthData: mockRefreshHealthData,\n    });\n\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.error).toEqual(mockError);\n    expect(result.current.healthData).toBeNull();\n  });\n\n  it('应该能够获取健康数据', async () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    await act(async () => {\n      await result.current.fetchHealthData();\n    });\n    \n    expect(mockFetchHealthData).toHaveBeenCalledTimes(1);\n  });\n\n  it('应该能够更新健康指标', async () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    const updateData = {\n      id: 'heart_rate',\n      value: 75,\n    };\n    \n    await act(async () => {\n      await result.current.updateHealthMetric(updateData.id, updateData.value);\n    });\n    \n    expect(mockUpdateHealthMetric).toHaveBeenCalledWith(updateData.id, updateData.value);\n  });\n\n  it('应该能够同步健康数据', async () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    await act(async () => {\n      await result.current.syncHealthData();\n    });\n    \n    expect(mockSyncHealthData).toHaveBeenCalledTimes(1);\n  });\n\n  it('应该正确处理健康指标筛选', () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    const heartRateMetric = result.current.healthData?.metrics.find(\n      (metric: HealthMetric) => metric.id === 'heart_rate'\n    );\n    \n    expect(heartRateMetric).toBeDefined();\n    expect(heartRateMetric?.name).toBe('心率');\n    expect(heartRateMetric?.value).toBe(72);\n  });\n\n  it('应该正确处理同步状态', () => {\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.healthData?.syncStatus).toBe('synced');\n    expect(result.current.healthData?.lastUpdated).toBe('2024-01-15T10:30:00Z');\n  });\n\n  it('应该处理空数据情况', () => {\n    useHealthData.mockReturnValue({\n      healthData: {\n        metrics: [],\n        lastUpdated: null,\n        syncStatus: 'pending',\n      },\n      loading: false,\n      error: null,\n      fetchHealthData: mockFetchHealthData,\n      updateHealthMetric: mockUpdateHealthMetric,\n      syncHealthData: mockSyncHealthData,\n      refreshHealthData: mockRefreshHealthData,\n    });\n\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.healthData?.metrics).toHaveLength(0);\n    expect(result.current.healthData?.syncStatus).toBe('pending');\n  });\n\n  it('应该处理网络错误', () => {\n    const networkError = new Error('网络连接失败');\n    \n    useHealthData.mockReturnValue({\n      healthData: null,\n      loading: false,\n      error: networkError,\n      fetchHealthData: mockFetchHealthData,\n      updateHealthMetric: mockUpdateHealthMetric,\n      syncHealthData: mockSyncHealthData,\n      refreshHealthData: mockRefreshHealthData,\n    });\n\n    const { result } = renderHook(() => useHealthData());\n    \n    expect(result.current.error?.message).toBe('网络连接失败');\n  });\n}); "],"mappings":"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","ignoreList":[]}