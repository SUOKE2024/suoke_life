ffdce511e7eb4b27023c48d0a8ebfb67
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var dateUtils = {
  formatDate: function formatDate(date) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';
    var d = new Date(date);
    if (isNaN(d.getTime())) {
      throw new Error('无效的日期');
    }
    var year = d.getFullYear();
    var month = String(d.getMonth() + 1).padStart(2, '0');
    var day = String(d.getDate()).padStart(2, '0');
    var hours = String(d.getHours()).padStart(2, '0');
    var minutes = String(d.getMinutes()).padStart(2, '0');
    var seconds = String(d.getSeconds()).padStart(2, '0');
    return format.replace('YYYY', year.toString()).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);
  },
  getRelativeTime: function getRelativeTime(date, mockNow) {
    var d = new Date(date);
    var now = mockNow || new Date();
    var diffMs = now.getTime() - d.getTime();
    var diffMinutes = Math.floor(diffMs / (1000 * 60));
    var diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    var diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    if (diffMinutes < 1) return '刚刚';
    if (diffMinutes < 60) return `${diffMinutes}分钟前`;
    if (diffHours < 24) return `${diffHours}小时前`;
    if (diffDays < 7) return `${diffDays}天前`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)}周前`;
    if (diffDays < 365) return `${Math.floor(diffDays / 30)}个月前`;
    return `${Math.floor(diffDays / 365)}年前`;
  },
  calculateAge: function calculateAge(birthDate) {
    var birth = new Date(birthDate);
    var today = new Date();
    if (birth > today) {
      throw new Error('出生日期不能晚于今天');
    }
    var age = today.getFullYear() - birth.getFullYear();
    var monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {
      age--;
    }
    return age;
  },
  addTime: function addTime(date, amount, unit) {
    var d = new Date(date);
    switch (unit) {
      case 'days':
        d.setDate(d.getDate() + amount);
        break;
      case 'hours':
        d.setHours(d.getHours() + amount);
        break;
      case 'minutes':
        d.setMinutes(d.getMinutes() + amount);
        break;
      case 'seconds':
        d.setSeconds(d.getSeconds() + amount);
        break;
      default:
        throw new Error('不支持的时间单位');
    }
    return d;
  },
  getTimeRange: function getTimeRange(startDate, endDate) {
    var start = new Date(startDate);
    var end = new Date(endDate);
    if (start > end) {
      throw new Error('开始时间不能晚于结束时间');
    }
    var diffMs = end.getTime() - start.getTime();
    var days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    var hours = Math.floor(diffMs % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    var minutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));
    return {
      days: days,
      hours: hours,
      minutes: minutes,
      totalMs: diffMs
    };
  },
  isToday: function isToday(date, mockNow) {
    var d = new Date(date);
    var today = mockNow || new Date();
    return d.getDate() === today.getDate() && d.getMonth() === today.getMonth() && d.getFullYear() === today.getFullYear();
  },
  isThisWeek: function isThisWeek(date, mockNow) {
    var d = new Date(date);
    var today = mockNow || new Date();
    var startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - today.getDay());
    startOfWeek.setHours(0, 0, 0, 0);
    var endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    endOfWeek.setHours(23, 59, 59, 999);
    return d >= startOfWeek && d <= endOfWeek;
  },
  getDaysInMonth: function getDaysInMonth(year, month) {
    return new Date(year, month, 0).getDate();
  },
  isLeapYear: function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  },
  getQuarter: function getQuarter(date) {
    var d = new Date(date);
    var month = d.getMonth() + 1;
    return Math.ceil(month / 3);
  },
  convertTimezone: function convertTimezone(date, fromTz, toTz) {
    var d = new Date(date);
    var timezoneOffsets = {
      'UTC': 0,
      'GMT+8': 8,
      'EST': -5,
      'PST': -8
    };
    var fromOffset = timezoneOffsets[fromTz] || 0;
    var toOffset = timezoneOffsets[toTz] || 0;
    var offsetDiff = (toOffset - fromOffset) * 60 * 60 * 1000;
    return new Date(d.getTime() + offsetDiff);
  },
  getWorkdays: function getWorkdays(startDate, endDate) {
    var start = new Date(startDate);
    var end = new Date(endDate);
    var workdays = 0;
    var current = new Date(start);
    while (current <= end) {
      var dayOfWeek = current.getDay();
      if (dayOfWeek !== 0 && dayOfWeek !== 6) {
        workdays++;
      }
      current.setDate(current.getDate() + 1);
    }
    return workdays;
  },
  parseDate: function parseDate(dateString) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';
    if (format === 'YYYY-MM-DD') {
      var match = dateString.match(/^(\d{4})-(\d{2})-(\d{2})$/);
      if (match) {
        var _match = (0, _slicedToArray2.default)(match, 4),
          year = _match[1],
          month = _match[2],
          day = _match[3];
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }
    }
    if (format === 'DD/MM/YYYY') {
      var _match2 = dateString.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
      if (_match2) {
        var _match3 = (0, _slicedToArray2.default)(_match2, 4),
          _day = _match3[1],
          _month = _match3[2],
          _year = _match3[3];
        return new Date(parseInt(_year), parseInt(_month) - 1, parseInt(_day));
      }
    }
    throw new Error('无法解析日期字符串');
  }
};
describe('日期工具函数测试', function () {
  describe('formatDate', function () {
    var currentYear = new Date().getFullYear();
    it('应该格式化日期为默认格式', function () {
      var date = new Date(`${currentYear}-01-15T10:30:45`);
      var result = dateUtils.formatDate(date);
      expect(result).toBe(`${currentYear}-01-15`);
    });
    it('应该支持自定义格式', function () {
      var date = new Date(`${currentYear}-01-15T10:30:45`);
      var result = dateUtils.formatDate(date, 'YYYY-MM-DD HH:mm:ss');
      expect(result).toBe(`${currentYear}-01-15 10:30:45`);
    });
    it('应该处理字符串日期', function () {
      var result = dateUtils.formatDate(`${currentYear}-01-15`);
      expect(result).toBe(`${currentYear}-01-15`);
    });
    it('应该处理时间戳', function () {
      var timestamp = new Date(`${currentYear}-01-15`).getTime();
      var result = dateUtils.formatDate(timestamp);
      expect(result).toBe(`${currentYear}-01-15`);
    });
    it('应该拒绝无效日期', function () {
      expect(function () {
        return dateUtils.formatDate('invalid');
      }).toThrow('无效的日期');
    });
  });
  describe('getRelativeTime', function () {
    var mockNow = new Date('2024-01-15T12:00:00');
    beforeEach(function () {
      jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('应该返回"刚刚"对于很近的时间', function () {
      var date = new Date('2024-01-15T11:59:30');
      var result = dateUtils.getRelativeTime(date, mockNow);
      expect(result).toBe('刚刚');
    });
    it('应该返回分钟前', function () {
      var date = new Date('2024-01-15T11:45:00');
      var result = dateUtils.getRelativeTime(date, mockNow);
      expect(result).toBe('15分钟前');
    });
    it('应该返回小时前', function () {
      var date = new Date('2024-01-15T10:00:00');
      var result = dateUtils.getRelativeTime(date, mockNow);
      expect(result).toBe('2小时前');
    });
    it('应该返回天前', function () {
      var date = new Date('2024-01-13T12:00:00');
      var result = dateUtils.getRelativeTime(date, mockNow);
      expect(result).toBe('2天前');
    });
    it('应该返回周前', function () {
      var date = new Date('2024-01-01T12:00:00');
      var result = dateUtils.getRelativeTime(date, mockNow);
      expect(result).toBe('2周前');
    });
  });
  describe('calculateAge', function () {
    var currentYear = new Date().getFullYear();
    var mockDate = new Date(`${currentYear}-01-15`);
    beforeEach(function () {
      jest.spyOn(Date, 'now').mockReturnValue(mockDate.getTime());
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('应该正确计算年龄', function () {
      var birthDate = '1990-01-15';
      var age = dateUtils.calculateAge(birthDate);
      expect(age).toBe(currentYear - 1990);
    });
    it('应该处理生日未到的情况', function () {
      var birthDate = '1990-06-15';
      var age = dateUtils.calculateAge(birthDate);
      expect(age).toBe(currentYear - 1990 - 1);
    });
    it('应该拒绝未来的出生日期', function () {
      var futureDate = `${currentYear + 1}-01-15`;
      expect(function () {
        return dateUtils.calculateAge(futureDate);
      }).toThrow('出生日期不能晚于今天');
    });
  });
  describe('addTime', function () {
    var currentYear = new Date().getFullYear();
    it('应该添加天数', function () {
      var date = new Date(`${currentYear}-01-15`);
      var result = dateUtils.addTime(date, 5, 'days');
      expect(dateUtils.formatDate(result)).toBe(`${currentYear}-01-20`);
    });
    it('应该添加小时', function () {
      var date = new Date(`${currentYear}-01-15T10:00:00`);
      var result = dateUtils.addTime(date, 3, 'hours');
      expect(result.getHours()).toBe(13);
    });
    it('应该添加分钟', function () {
      var date = new Date(`${currentYear}-01-15T10:30:00`);
      var result = dateUtils.addTime(date, 45, 'minutes');
      expect(result.getMinutes()).toBe(15);
      expect(result.getHours()).toBe(11);
    });
    it('应该拒绝不支持的时间单位', function () {
      var date = new Date(`${currentYear}-01-15`);
      expect(function () {
        return dateUtils.addTime(date, 1, 'years');
      }).toThrow('不支持的时间单位');
    });
  });
  describe('getTimeRange', function () {
    var currentYear = new Date().getFullYear();
    it('应该计算时间范围', function () {
      var start = `${currentYear}-01-15T10:00:00`;
      var end = `${currentYear}-01-17T14:30:00`;
      var range = dateUtils.getTimeRange(start, end);
      expect(range.days).toBe(2);
      expect(range.hours).toBe(4);
      expect(range.minutes).toBe(30);
    });
    it('应该拒绝无效的时间范围', function () {
      var start = `${currentYear}-01-17T10:00:00`;
      var end = `${currentYear}-01-15T10:00:00`;
      expect(function () {
        return dateUtils.getTimeRange(start, end);
      }).toThrow('开始时间不能晚于结束时间');
    });
  });
  describe('isToday', function () {
    var mockNow = new Date('2024-01-15T12:00:00');
    beforeEach(function () {
      jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('应该识别今天的日期', function () {
      var today = new Date('2024-01-15T08:30:00');
      expect(dateUtils.isToday(today, mockNow)).toBe(true);
    });
    it('应该识别不是今天的日期', function () {
      var yesterday = new Date('2024-01-14T12:00:00');
      expect(dateUtils.isToday(yesterday, mockNow)).toBe(false);
    });
  });
  describe('isThisWeek', function () {
    var mockNow = new Date('2024-01-15T12:00:00');
    beforeEach(function () {
      jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());
    });
    afterEach(function () {
      jest.restoreAllMocks();
    });
    it('应该识别本周的日期', function () {
      var thisWeek = new Date('2024-01-17T12:00:00');
      expect(dateUtils.isThisWeek(thisWeek, mockNow)).toBe(true);
    });
    it('应该识别不是本周的日期', function () {
      var lastWeek = new Date('2024-01-07T12:00:00');
      expect(dateUtils.isThisWeek(lastWeek, mockNow)).toBe(false);
    });
  });
  describe('getDaysInMonth', function () {
    it('应该返回正确的月份天数', function () {
      expect(dateUtils.getDaysInMonth(2024, 1)).toBe(31);
      expect(dateUtils.getDaysInMonth(2024, 2)).toBe(29);
      expect(dateUtils.getDaysInMonth(2023, 2)).toBe(28);
      expect(dateUtils.getDaysInMonth(2024, 4)).toBe(30);
    });
  });
  describe('isLeapYear', function () {
    it('应该识别闰年', function () {
      expect(dateUtils.isLeapYear(2024)).toBe(true);
      expect(dateUtils.isLeapYear(2000)).toBe(true);
      expect(dateUtils.isLeapYear(1600)).toBe(true);
    });
    it('应该识别平年', function () {
      expect(dateUtils.isLeapYear(2023)).toBe(false);
      expect(dateUtils.isLeapYear(1900)).toBe(false);
      expect(dateUtils.isLeapYear(2100)).toBe(false);
    });
  });
  describe('getQuarter', function () {
    var currentYear = new Date().getFullYear();
    it('应该返回正确的季度', function () {
      expect(dateUtils.getQuarter(`${currentYear}-01-15`)).toBe(1);
      expect(dateUtils.getQuarter(`${currentYear}-04-15`)).toBe(2);
      expect(dateUtils.getQuarter(`${currentYear}-07-15`)).toBe(3);
      expect(dateUtils.getQuarter(`${currentYear}-10-15`)).toBe(4);
    });
  });
  describe('convertTimezone', function () {
    var currentYear = new Date().getFullYear();
    it('应该转换时区', function () {
      var date = new Date(`${currentYear}-01-15T12:00:00`);
      var result = dateUtils.convertTimezone(date, 'UTC', 'GMT+8');
      expect(result.getHours()).toBe(20);
    });
    it('应该处理相同时区', function () {
      var date = new Date(`${currentYear}-01-15T12:00:00`);
      var result = dateUtils.convertTimezone(date, 'UTC', 'UTC');
      expect(result.getTime()).toBe(date.getTime());
    });
  });
  describe('getWorkdays', function () {
    it('应该计算工作日数量', function () {
      var workdays = dateUtils.getWorkdays('2024-01-15', '2024-01-19');
      expect(workdays).toBe(5);
    });
    it('应该排除周末', function () {
      var workdays = dateUtils.getWorkdays('2024-01-15', '2024-01-21');
      expect(workdays).toBe(5);
    });
  });
  describe('parseDate', function () {
    var currentYear = new Date().getFullYear();
    it('应该解析YYYY-MM-DD格式', function () {
      var result = dateUtils.parseDate(`${currentYear}-01-15`);
      expect(result.getFullYear()).toBe(currentYear);
      expect(result.getMonth()).toBe(0);
      expect(result.getDate()).toBe(15);
    });
    it('应该解析DD/MM/YYYY格式', function () {
      var result = dateUtils.parseDate(`15/01/${currentYear}`, 'DD/MM/YYYY');
      expect(result.getFullYear()).toBe(currentYear);
      expect(result.getMonth()).toBe(0);
      expect(result.getDate()).toBe(15);
    });
    it('应该拒绝无效格式', function () {
      expect(function () {
        return dateUtils.parseDate('invalid-date');
      }).toThrow('无法解析日期字符串');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,