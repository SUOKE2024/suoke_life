{"version":3,"names":["dateUtils","formatDate","date","format","arguments","length","undefined","d","Date","isNaN","getTime","Error","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","toString","getRelativeTime","mockNow","now","diffMs","diffMinutes","Math","floor","diffHours","diffDays","calculateAge","birthDate","birth","today","age","monthDiff","addTime","amount","unit","setDate","setHours","setMinutes","setSeconds","getTimeRange","startDate","endDate","start","end","days","totalMs","isToday","isThisWeek","startOfWeek","getDay","endOfWeek","getDaysInMonth","isLeapYear","getQuarter","ceil","convertTimezone","fromTz","toTz","timezoneOffsets","fromOffset","toOffset","offsetDiff","getWorkdays","workdays","current","dayOfWeek","parseDate","dateString","match","_match","_slicedToArray2","default","parseInt","_match3","describe","currentYear","it","result","expect","toBe","timestamp","toThrow","beforeEach","jest","spyOn","mockReturnValue","afterEach","restoreAllMocks","mockDate","futureDate","range","yesterday","thisWeek","lastWeek"],"sources":["dateUtils.test.ts"],"sourcesContent":["// Mock日期工具函数\nconst dateUtils = {\n    // 格式化日期\n    formatDate: (date: Date | string | number, format: string = 'YYYY-MM-DD') => {\n      const d = new Date(date);\n      if (isNaN(d.getTime())) {\n        throw new Error('无效的日期');\n      }\n  \n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      const hours = String(d.getHours()).padStart(2, '0');\n      const minutes = String(d.getMinutes()).padStart(2, '0');\n      const seconds = String(d.getSeconds()).padStart(2, '0');\n  \n      return format\n        .replace('YYYY', year.toString())\n        .replace('MM', month)\n        .replace('DD', day)\n        .replace('HH', hours)\n        .replace('mm', minutes)\n        .replace('ss', seconds);\n    },\n  \n        // 相对时间\n    getRelativeTime: (date: Date | string | number, mockNow?: Date) => {\n      const d = new Date(date);\n      const now = mockNow || new Date();\n      const diffMs = now.getTime() - d.getTime();\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n      if (diffMinutes < 1) return '刚刚';\n      if (diffMinutes < 60) return `${diffMinutes}分钟前`;\n      if (diffHours < 24) return `${diffHours}小时前`;\n      if (diffDays < 7) return `${diffDays}天前`;\n      if (diffDays < 30) return `${Math.floor(diffDays / 7)}周前`;\n      if (diffDays < 365) return `${Math.floor(diffDays / 30)}个月前`;\n      return `${Math.floor(diffDays / 365)}年前`;\n    },\n  \n    // 计算年龄\n    calculateAge: (birthDate: Date | string) => {\n      const birth = new Date(birthDate);\n      const today = new Date();\n      \n      if (birth > today) {\n        throw new Error('出生日期不能晚于今天');\n      }\n  \n      let age = today.getFullYear() - birth.getFullYear();\n      const monthDiff = today.getMonth() - birth.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n        age--;\n      }\n      \n      return age;\n    },\n  \n    // 添加时间\n    addTime: (date: Date | string, amount: number, unit: 'days' | 'hours' | 'minutes' | 'seconds') => {\n      const d = new Date(date);\n      \n      switch (unit) {\n        case 'days':\n          d.setDate(d.getDate() + amount);\n          break;\n        case 'hours':\n          d.setHours(d.getHours() + amount);\n          break;\n        case 'minutes':\n          d.setMinutes(d.getMinutes() + amount);\n          break;\n        case 'seconds':\n          d.setSeconds(d.getSeconds() + amount);\n          break;\n        default:\n          throw new Error('不支持的时间单位');\n      }\n      \n      return d;\n    },\n  \n    // 获取时间范围\n    getTimeRange: (startDate: Date | string, endDate: Date | string) => {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      \n      if (start > end) {\n        throw new Error('开始时间不能晚于结束时间');\n      }\n  \n      const diffMs = end.getTime() - start.getTime();\n      const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n  \n      return { days, hours, minutes, totalMs: diffMs };\n    },\n  \n    // 判断是否为今天\n    isToday: (date: Date | string, mockNow?: Date) => {\n      const d = new Date(date);\n      const today = mockNow || new Date();\n      \n      return d.getDate() === today.getDate() &&\n             d.getMonth() === today.getMonth() &&\n             d.getFullYear() === today.getFullYear();\n    },\n  \n    // 判断是否为本周\n    isThisWeek: (date: Date | string, mockNow?: Date) => {\n      const d = new Date(date);\n      const today = mockNow || new Date();\n      \n      // 获取本周的开始和结束\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      \n      const endOfWeek = new Date(startOfWeek);\n      endOfWeek.setDate(startOfWeek.getDate() + 6);\n      endOfWeek.setHours(23, 59, 59, 999);\n      \n      return d >= startOfWeek && d <= endOfWeek;\n    },\n  \n    // 获取月份天数\n    getDaysInMonth: (year: number, month: number) => {\n      return new Date(year, month, 0).getDate();\n    },\n  \n    // 判断是否为闰年\n    isLeapYear: (year: number) => {\n      return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n    },\n  \n    // 获取季度\n    getQuarter: (date: Date | string) => {\n      const d = new Date(date);\n      const month = d.getMonth() + 1;\n      return Math.ceil(month / 3);\n    },\n  \n    // 时区转换\n    convertTimezone: (date: Date | string, fromTz: string, toTz: string) => {\n      // 简化的时区转换实现\n      const d = new Date(date);\n      const timezoneOffsets: Record<string, number> = {\n        'UTC': 0,\n        'GMT+8': 8,\n        'EST': -5,\n        'PST': -8,\n      };\n  \n      const fromOffset = timezoneOffsets[fromTz] || 0;\n      const toOffset = timezoneOffsets[toTz] || 0;\n      const offsetDiff = (toOffset - fromOffset) * 60 * 60 * 1000;\n  \n      return new Date(d.getTime() + offsetDiff);\n    },\n  \n    // 工作日计算\n    getWorkdays: (startDate: Date | string, endDate: Date | string) => {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      let workdays = 0;\n      \n      const current = new Date(start);\n      while (current <= end) {\n        const dayOfWeek = current.getDay();\n        if (dayOfWeek !== 0 && dayOfWeek !== 6) { // 不是周末\n          workdays++;\n        }\n        current.setDate(current.getDate() + 1);\n      }\n      \n      return workdays;\n    },\n  \n    // 解析日期字符串\n    parseDate: (dateString: string, format: string = 'YYYY-MM-DD') => {\n      if (format === 'YYYY-MM-DD') {\n        const match = dateString.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n        if (match) {\n          const [, year, month, day] = match;\n          return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n        }\n      }\n      \n      if (format === 'DD/MM/YYYY') {\n        const match = dateString.match(/^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/);\n        if (match) {\n          const [, day, month, year] = match;\n          return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n        }\n      }\n      \n      throw new Error('无法解析日期字符串');\n    },\n  };\n  \n  describe('日期工具函数测试', () => {\n    describe('formatDate', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该格式化日期为默认格式', () => {\n        const date = new Date(`${currentYear}-01-15T10:30:45`);\n        const result = dateUtils.formatDate(date);\n        expect(result).toBe(`${currentYear}-01-15`);\n      });\n  \n      it('应该支持自定义格式', () => {\n        const date = new Date(`${currentYear}-01-15T10:30:45`);\n        const result = dateUtils.formatDate(date, 'YYYY-MM-DD HH:mm:ss');\n        expect(result).toBe(`${currentYear}-01-15 10:30:45`);\n      });\n  \n      it('应该处理字符串日期', () => {\n        const result = dateUtils.formatDate(`${currentYear}-01-15`);\n        expect(result).toBe(`${currentYear}-01-15`);\n      });\n  \n      it('应该处理时间戳', () => {\n        const timestamp = new Date(`${currentYear}-01-15`).getTime();\n        const result = dateUtils.formatDate(timestamp);\n        expect(result).toBe(`${currentYear}-01-15`);\n      });\n  \n      it('应该拒绝无效日期', () => {\n        expect(() => dateUtils.formatDate('invalid')).toThrow('无效的日期');\n      });\n    });\n  \n        describe('getRelativeTime', () => {\n      // 使用固定的测试日期，避免年份变化导致的问题\n      const mockNow = new Date('2024-01-15T12:00:00');\n      \n      beforeEach(() => {\n        // Mock当前时间为固定值\n        jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());\n      });\n\n      afterEach(() => {\n        jest.restoreAllMocks();\n      });\n\n      it('应该返回\"刚刚\"对于很近的时间', () => {\n        const date = new Date('2024-01-15T11:59:30');\n        const result = dateUtils.getRelativeTime(date, mockNow);\n        expect(result).toBe('刚刚');\n      });\n\n      it('应该返回分钟前', () => {\n        const date = new Date('2024-01-15T11:45:00');\n        const result = dateUtils.getRelativeTime(date, mockNow);\n        expect(result).toBe('15分钟前');\n      });\n\n      it('应该返回小时前', () => {\n        const date = new Date('2024-01-15T10:00:00');\n        const result = dateUtils.getRelativeTime(date, mockNow);\n        expect(result).toBe('2小时前');\n      });\n\n      it('应该返回天前', () => {\n        const date = new Date('2024-01-13T12:00:00');\n        const result = dateUtils.getRelativeTime(date, mockNow);\n        expect(result).toBe('2天前');\n      });\n\n      it('应该返回周前', () => {\n        const date = new Date('2024-01-01T12:00:00');\n        const result = dateUtils.getRelativeTime(date, mockNow);\n        expect(result).toBe('2周前');\n      });\n    });\n  \n    describe('calculateAge', () => {\n      const currentYear = new Date().getFullYear();\n      const mockDate = new Date(`${currentYear}-01-15`);\n      \n      beforeEach(() => {\n        // Mock当前时间为当前年份的1月15日\n        jest.spyOn(Date, 'now').mockReturnValue(mockDate.getTime());\n      });\n  \n      afterEach(() => {\n        jest.restoreAllMocks();\n      });\n  \n      it('应该正确计算年龄', () => {\n        const birthDate = '1990-01-15';\n        const age = dateUtils.calculateAge(birthDate);\n        expect(age).toBe(currentYear - 1990);\n      });\n  \n      it('应该处理生日未到的情况', () => {\n        const birthDate = '1990-06-15';\n        const age = dateUtils.calculateAge(birthDate);\n        expect(age).toBe(currentYear - 1990 - 1);\n      });\n  \n      it('应该拒绝未来的出生日期', () => {\n        const futureDate = `${currentYear + 1}-01-15`;\n        expect(() => dateUtils.calculateAge(futureDate)).toThrow('出生日期不能晚于今天');\n      });\n    });\n  \n    describe('addTime', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该添加天数', () => {\n        const date = new Date(`${currentYear}-01-15`);\n        const result = dateUtils.addTime(date, 5, 'days');\n        expect(dateUtils.formatDate(result)).toBe(`${currentYear}-01-20`);\n      });\n  \n      it('应该添加小时', () => {\n        const date = new Date(`${currentYear}-01-15T10:00:00`);\n        const result = dateUtils.addTime(date, 3, 'hours');\n        expect(result.getHours()).toBe(13);\n      });\n  \n      it('应该添加分钟', () => {\n        const date = new Date(`${currentYear}-01-15T10:30:00`);\n        const result = dateUtils.addTime(date, 45, 'minutes');\n        expect(result.getMinutes()).toBe(15);\n        expect(result.getHours()).toBe(11);\n      });\n  \n      it('应该拒绝不支持的时间单位', () => {\n        const date = new Date(`${currentYear}-01-15`);\n        expect(() => dateUtils.addTime(date, 1, 'years' as any)).toThrow('不支持的时间单位');\n      });\n    });\n  \n    describe('getTimeRange', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该计算时间范围', () => {\n        const start = `${currentYear}-01-15T10:00:00`;\n        const end = `${currentYear}-01-17T14:30:00`;\n        const range = dateUtils.getTimeRange(start, end);\n        \n        expect(range.days).toBe(2);\n        expect(range.hours).toBe(4);\n        expect(range.minutes).toBe(30);\n      });\n  \n      it('应该拒绝无效的时间范围', () => {\n        const start = `${currentYear}-01-17T10:00:00`;\n        const end = `${currentYear}-01-15T10:00:00`;\n        \n        expect(() => dateUtils.getTimeRange(start, end)).toThrow('开始时间不能晚于结束时间');\n      });\n    });\n  \n    describe('isToday', () => {\n      const mockNow = new Date('2024-01-15T12:00:00');\n      \n      beforeEach(() => {\n        jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());\n      });\n  \n      afterEach(() => {\n        jest.restoreAllMocks();\n      });\n  \n            it('应该识别今天的日期', () => {\n        const today = new Date('2024-01-15T08:30:00');\n        expect(dateUtils.isToday(today, mockNow)).toBe(true);\n      });\n\n      it('应该识别不是今天的日期', () => {\n        const yesterday = new Date('2024-01-14T12:00:00');\n        expect(dateUtils.isToday(yesterday, mockNow)).toBe(false);\n      });\n    });\n  \n    describe('isThisWeek', () => {\n      const mockNow = new Date('2024-01-15T12:00:00'); // 2024-01-15是周一\n      \n      beforeEach(() => {\n        jest.spyOn(Date, 'now').mockReturnValue(mockNow.getTime());\n      });\n  \n      afterEach(() => {\n        jest.restoreAllMocks();\n      });\n  \n            it('应该识别本周的日期', () => {\n        const thisWeek = new Date('2024-01-17T12:00:00'); // 周三\n        expect(dateUtils.isThisWeek(thisWeek, mockNow)).toBe(true);\n      });\n\n      it('应该识别不是本周的日期', () => {\n        const lastWeek = new Date('2024-01-07T12:00:00');\n        expect(dateUtils.isThisWeek(lastWeek, mockNow)).toBe(false);\n      });\n    });\n  \n    describe('getDaysInMonth', () => {\n      it('应该返回正确的月份天数', () => {\n        expect(dateUtils.getDaysInMonth(2024, 1)).toBe(31); // 1月\n        expect(dateUtils.getDaysInMonth(2024, 2)).toBe(29); // 2月（闰年）\n        expect(dateUtils.getDaysInMonth(2023, 2)).toBe(28); // 2月（平年）\n        expect(dateUtils.getDaysInMonth(2024, 4)).toBe(30); // 4月\n      });\n    });\n  \n    describe('isLeapYear', () => {\n      it('应该识别闰年', () => {\n        expect(dateUtils.isLeapYear(2024)).toBe(true);\n        expect(dateUtils.isLeapYear(2000)).toBe(true);\n        expect(dateUtils.isLeapYear(1600)).toBe(true);\n      });\n  \n      it('应该识别平年', () => {\n        expect(dateUtils.isLeapYear(2023)).toBe(false);\n        expect(dateUtils.isLeapYear(1900)).toBe(false);\n        expect(dateUtils.isLeapYear(2100)).toBe(false);\n      });\n    });\n  \n    describe('getQuarter', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该返回正确的季度', () => {\n        expect(dateUtils.getQuarter(`${currentYear}-01-15`)).toBe(1);\n        expect(dateUtils.getQuarter(`${currentYear}-04-15`)).toBe(2);\n        expect(dateUtils.getQuarter(`${currentYear}-07-15`)).toBe(3);\n        expect(dateUtils.getQuarter(`${currentYear}-10-15`)).toBe(4);\n      });\n    });\n  \n    describe('convertTimezone', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该转换时区', () => {\n        const date = new Date(`${currentYear}-01-15T12:00:00`);\n        const result = dateUtils.convertTimezone(date, 'UTC', 'GMT+8');\n        \n        expect(result.getHours()).toBe(20); // UTC 12:00 -> GMT+8 20:00\n      });\n  \n      it('应该处理相同时区', () => {\n        const date = new Date(`${currentYear}-01-15T12:00:00`);\n        const result = dateUtils.convertTimezone(date, 'UTC', 'UTC');\n        \n        expect(result.getTime()).toBe(date.getTime());\n      });\n    });\n  \n    describe('getWorkdays', () => {\n      it('应该计算工作日数量', () => {\n        // 2024-01-15是周一，2024-01-19是周五\n        const workdays = dateUtils.getWorkdays('2024-01-15', '2024-01-19');\n        expect(workdays).toBe(5);\n      });\n  \n      it('应该排除周末', () => {\n        // 包含一个完整的周\n        const workdays = dateUtils.getWorkdays('2024-01-15', '2024-01-21');\n        expect(workdays).toBe(5); // 周一到周五\n      });\n    });\n  \n    describe('parseDate', () => {\n      const currentYear = new Date().getFullYear();\n      \n      it('应该解析YYYY-MM-DD格式', () => {\n        const result = dateUtils.parseDate(`${currentYear}-01-15`);\n        expect(result.getFullYear()).toBe(currentYear);\n        expect(result.getMonth()).toBe(0); // 0-based\n        expect(result.getDate()).toBe(15);\n      });\n  \n      it('应该解析DD/MM/YYYY格式', () => {\n        const result = dateUtils.parseDate(`15/01/${currentYear}`, 'DD/MM/YYYY');\n        expect(result.getFullYear()).toBe(currentYear);\n        expect(result.getMonth()).toBe(0);\n        expect(result.getDate()).toBe(15);\n      });\n  \n      it('应该拒绝无效格式', () => {\n        expect(() => dateUtils.parseDate('invalid-date')).toThrow('无法解析日期字符串');\n      });\n    });\n  });"],"mappings":"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","ignoreList":[]}