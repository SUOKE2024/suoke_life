{"version":3,"names":["_getJestObj","mock","AuthService","mockAuthService","_interopRequireDefault","require","_asyncToGenerator2","_slicedToArray2","_react","_reactNative","_reactRedux","_native","_stack","_reactNative2","_store","_jsxRuntime","_require","jest","login","fn","register","logout","getCurrentUser","refreshToken","LoginScreen","_React$useState","React","useState","_React$useState2","default","email","setEmail","_React$useState3","_React$useState4","password","setPassword","_React$useState5","_React$useState6","loading","setLoading","handleLogin","_ref","error","console","apply","arguments","jsxs","View","children","jsx","TextInput","testID","value","onChangeText","placeholder","secureTextEntry","TouchableOpacity","onPress","disabled","Text","RegisterScreen","_React$useState7","_React$useState8","_React$useState9","_React$useState0","_React$useState1","_React$useState10","confirmPassword","setConfirmPassword","_React$useState11","_React$useState12","_React$useState13","_React$useState14","setError","handleRegister","_ref2","HomeScreen","handleLogout","_ref3","Stack","createStackNavigator","TestApp","Provider","store","NavigationContainer","Navigator","initialRouteName","Screen","name","component","describe","beforeEach","clearAllMocks","it","mockResolvedValue","user","id","token","_render","render","getByTestId","emailInput","passwordInput","loginButton","fireEvent","changeText","press","waitFor","expect","toHaveBeenCalledWith","mockRejectedValue","Error","consoleSpy","spyOn","mockImplementation","_render2","any","mockRestore","resolveLogin","Promise","resolve","_render3","getByText","toBeTruthy","_render4","confirmPasswordInput","registerButton","_render5","undefined","_render6","logoutButton","toHaveBeenCalled","startTime","performance","now","_render7","endTime","totalTime","toBeLessThan","_render8","i","toHaveBeenCalledTimes","_render9","_render0"],"sources":["AuthFlow.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { store } from '../../store';\n\n// Mock AuthService\nconst mockAuthService = {\n  login: jest.fn(),\n  register: jest.fn(),\n  logout: jest.fn(),\n  getCurrentUser: jest.fn(),\n  refreshToken: jest.fn(),\n};\n\njest.mock('../../services/auth', () => ({\n  AuthService: mockAuthService,\n}));\n\n// Mock screens for testing\nconst LoginScreen = () => {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handleLogin = async () => {\n    setLoading(true);\n    try {\n      await mockAuthService.login(email, password);\n    } catch (error) {\n      console.error('Login failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View>\n      <TextInput\n        testID=\"email-input\"\n        value={email}\n        onChangeText={setEmail}\n        placeholder=\"邮箱\"\n      />\n      <TextInput\n        testID=\"password-input\"\n        value={password}\n        onChangeText={setPassword}\n        placeholder=\"密码\"\n        secureTextEntry\n      />\n      <TouchableOpacity\n        testID=\"login-button\"\n        onPress={handleLogin}\n        disabled={loading}\n      >\n        <Text>{loading ? '登录中...' : '登录'}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst RegisterScreen = () => {\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [confirmPassword, setConfirmPassword] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const handleRegister = async () => {\n    if (password !== confirmPassword) {\n      setError('密码不匹配');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n    try {\n      await mockAuthService.register(email, password);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      setError('注册失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View>\n      <TextInput\n        testID=\"register-email-input\"\n        value={email}\n        onChangeText={setEmail}\n        placeholder=\"邮箱\"\n      />\n      <TextInput\n        testID=\"register-password-input\"\n        value={password}\n        onChangeText={setPassword}\n        placeholder=\"密码\"\n        secureTextEntry\n      />\n      <TextInput\n        testID=\"confirm-password-input\"\n        value={confirmPassword}\n        onChangeText={setConfirmPassword}\n        placeholder=\"确认密码\"\n        secureTextEntry\n      />\n      {error ? <Text testID=\"error-message\">{error}</Text> : null}\n      <TouchableOpacity\n        testID=\"register-button\"\n        onPress={handleRegister}\n        disabled={loading}\n      >\n        <Text>{loading ? '注册中...' : '注册'}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst HomeScreen = () => {\n  const handleLogout = async () => {\n    await mockAuthService.logout();\n  };\n\n  return (\n    <View>\n      <Text testID=\"welcome-message\">欢迎回来！</Text>\n      <TouchableOpacity testID=\"logout-button\" onPress={handleLogout}>\n        <Text>登出</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nconst TestApp = () => {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Login\">\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n          <Stack.Screen name=\"Register\" component={RegisterScreen} />\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n};\n\ndescribe('认证流程集成测试', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('登录流程', () => {\n    it('应该成功完成登录流程', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(<TestApp />);\n\n      // 输入邮箱和密码\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n\n      // 点击登录按钮\n      fireEvent.press(loginButton);\n\n      // 等待登录完成\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalledWith('test@example.com', 'password123');\n      });\n    });\n\n    it('应该处理登录错误', async () => {\n      mockAuthService.login.mockRejectedValue(new Error('登录失败'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId } = render(<TestApp />);\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'wrongpassword');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));\n      });\n\n      consoleSpy.mockRestore();\n    });\n\n    it('应该在登录过程中显示加载状态', async () => {\n      let resolveLogin: (value: any) => void;\n      mockAuthService.login.mockImplementation(() => new Promise(resolve => {\n        resolveLogin = resolve;\n      }));\n\n      const { getByTestId, getByText } = render(<TestApp />);\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      // 检查加载状态\n      expect(getByText('登录中...')).toBeTruthy();\n\n      // 完成登录\n      resolveLogin!({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      await waitFor(() => {\n        expect(getByText('登录')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('注册流程', () => {\n    it('应该成功完成注册流程', async () => {\n      mockAuthService.register.mockResolvedValue({\n        user: { id: '2', email: 'newuser@example.com', name: '新用户' },\n        token: 'new-token',\n      });\n\n      const { getByTestId } = render(<TestApp />);\n\n      // 假设我们已经导航到注册页面\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'newuser@example.com');\n      fireEvent.changeText(passwordInput, 'newpassword123');\n      fireEvent.changeText(confirmPasswordInput, 'newpassword123');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.register).toHaveBeenCalledWith('newuser@example.com', 'newpassword123');\n      });\n    });\n\n    it('应该验证密码匹配', async () => {\n      const { getByTestId, getByText } = render(<TestApp />);\n\n      const emailInput = getByTestId('register-email-input');\n      const passwordInput = getByTestId('register-password-input');\n      const confirmPasswordInput = getByTestId('confirm-password-input');\n      const registerButton = getByTestId('register-button');\n\n      fireEvent.changeText(emailInput, 'newuser@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.changeText(confirmPasswordInput, 'differentpassword');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(getByText('密码不匹配')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('登出流程', () => {\n    it('应该成功完成登出流程', async () => {\n      mockAuthService.logout.mockResolvedValue(undefined);\n\n      const { getByTestId } = render(<TestApp />);\n\n      // 假设用户已经登录并在主页\n      const logoutButton = getByTestId('logout-button');\n      fireEvent.press(logoutButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.logout).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('性能测试', () => {\n    it('登录流程应该在合理时间内完成', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const startTime = performance.now();\n      \n      const { getByTestId } = render(<TestApp />);\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(1000); // 1秒内完成\n    });\n\n    it('应该高效处理多个并发登录请求', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com', name: '测试用户' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(<TestApp />);\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n\n      const startTime = performance.now();\n\n      // 模拟快速多次点击\n      for (let i = 0; i < 5; i++) {\n        fireEvent.press(loginButton);\n      }\n\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalled();\n      });\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(2000); // 2秒内完成\n      // 验证只调用了一次（防止重复提交）\n      expect(mockAuthService.login).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('错误处理', () => {\n    it('应该处理网络错误', async () => {\n      mockAuthService.login.mockRejectedValue(new Error('网络连接失败'));\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const { getByTestId } = render(<TestApp />);\n\n      const emailInput = getByTestId('email-input');\n      const passwordInput = getByTestId('password-input');\n      const loginButton = getByTestId('login-button');\n\n      fireEvent.changeText(emailInput, 'test@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));\n      });\n\n      consoleSpy.mockRestore();\n    });\n\n    it('应该处理无效的输入', async () => {\n      const { getByTestId } = render(<TestApp />);\n\n      const loginButton = getByTestId('login-button');\n\n      // 不输入任何内容直接点击登录\n      fireEvent.press(loginButton);\n\n      // 验证AuthService.login被调用时使用了空字符串\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalledWith('', '');\n      });\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}