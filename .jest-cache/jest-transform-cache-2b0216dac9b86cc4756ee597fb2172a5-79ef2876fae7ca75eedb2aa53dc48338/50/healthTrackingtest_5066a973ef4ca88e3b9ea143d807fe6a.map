{"version":3,"names":["mockHealthService","getHealthMetrics","jest","fn","addHealthRecord","updateHealthRecord","deleteHealthRecord","getHealthTrends","generateHealthReport","getHealthSuggestions","syncHealthData","exportHealthData","importHealthData","recordHealthData","getHealthData","setHealthReminder","getHealthAdvice","syncData","backupData","mockAgentService","getHealthAnalysis","getPersonalizedAdvice","startHealthConsultation","sendHealthData","startConsultation","sendMessage","mockNotificationService","scheduleHealthReminder","sendHealthAlert","cancelReminder","sendHealthReminder","scheduleReminder","mockStorage","getItem","mockResolvedValue","setItem","undefined","removeItem","mockHealthData","vitals","heartRate","value","timestamp","Date","now","unit","bloodPressure","systolic","diastolic","temperature","weight","height","activities","steps","goal","calories","exercise","duration","type","intensity","sleep","quality","bedtime","wakeTime","nutrition","water","meals","nutrients","protein","carbs","fat","symptoms","id","severity","notes","medications","name","dosage","frequency","startDate","endDate","taken","describe","beforeEach","clearAllMocks","success","data","mockImplementation","key","Promise","resolve","JSON","stringify","it","_asyncToGenerator2","default","currentData","expect","toBe","toEqual","newVitalRecord","_ref2","record","existingData","healthData","parse","_x","apply","arguments","addResult","toHaveBeenCalledWith","stringContaining","synced","syncResult","toHaveBeenCalled","batchRecords","results","all","map","toHaveLength","forEach","result","toHaveBeenCalledTimes","invalidRecords","error","trendData","trend","average","range","min","max","change","goalAchievement","period","trends","analysisResult","overall_score","recommendations","risk_factors","factor","level","suggestion","achievements","analysis","agent","personalizedAdvice","lifestyle","tcm","advice","healthReport","start","end","summary","overall_health_score","improvement_areas","vitals_analysis","heart_rate","status","blood_pressure","activity_analysis","daily_average","goal_achievement","weekly_minutes","recommendation","average_hours","quality_score","nutrition_analysis","calorie_balance","water_intake","meal_regularity","next_goals","report","periods","generated_at","reports","index","exportData","format","metadata","export_date","user_id","data_range","export","download_url","exportResult","toContain","reminders","time","message","interval","reminder","healthAlerts","threshold","medication","alert","sent","createResult","cancelled","cancelResult","consultationData","additional_info","session_id","initial_response","consultation","analysisRequest","focus_areas","questions","heart_rate_analysis","sleep_analysis","exercise_analysis","localData","Object","assign","lastSync","cloudData","synced_records","conflicts","latest_data","conflictData","local","cloud","conflict_resolution","resolved_data","mockRejectedValue","Error","offlineRecord","synced_offline_records","err","cachedData","toBeTruthy","invalidData","validation_errors","recoveredData"],"sources":["healthTracking.test.ts"],"sourcesContent":["// Mock健康服务\nconst mockHealthService = {\n    getHealthMetrics: jest.fn(),\n    addHealthRecord: jest.fn(),\n    updateHealthRecord: jest.fn(),\n    deleteHealthRecord: jest.fn(),\n    getHealthTrends: jest.fn(),\n    generateHealthReport: jest.fn(),\n    getHealthSuggestions: jest.fn(),\n    syncHealthData: jest.fn(),\n    exportHealthData: jest.fn(),\n    importHealthData: jest.fn(),\n    recordHealthData: jest.fn(),\n    getHealthData: jest.fn(),\n    setHealthReminder: jest.fn(),\n    getHealthAdvice: jest.fn(),\n    syncData: jest.fn(),\n    backupData: jest.fn(),\n  };\n  \n  // Mock智能体服务\n  const mockAgentService = {\n    getHealthAnalysis: jest.fn(),\n    getPersonalizedAdvice: jest.fn(),\n    startHealthConsultation: jest.fn(),\n    sendHealthData: jest.fn(),\n    startConsultation: jest.fn(),\n    sendMessage: jest.fn(),\n  };\n  \n  // Mock通知服务\n  const mockNotificationService = {\n    scheduleHealthReminder: jest.fn(),\n    sendHealthAlert: jest.fn(),\n    cancelReminder: jest.fn(),\n    sendHealthReminder: jest.fn(),\n    scheduleReminder: jest.fn(),\n  };\n  \n  // Mock数据存储\n  const mockStorage = {\n    getItem: jest.fn().mockResolvedValue(null),\n    setItem: jest.fn().mockResolvedValue(undefined),\n    removeItem: jest.fn().mockResolvedValue(undefined),\n  };\n  \n  // Mock服务已在上面定义\n  \n  // Mock健康数据\n  const mockHealthData = {\n    vitals: {\n      heartRate: { value: 72, timestamp: Date.now(), unit: 'bpm' },\n      bloodPressure: { \n        systolic: 120, \n        diastolic: 80, \n        timestamp: Date.now(), \n        unit: 'mmHg' \n      },\n      temperature: { value: 36.5, timestamp: Date.now(), unit: '°C' },\n      weight: { value: 70, timestamp: Date.now(), unit: 'kg' },\n      height: { value: 175, timestamp: Date.now(), unit: 'cm' },\n    },\n    activities: {\n      steps: { value: 8500, goal: 10000, timestamp: Date.now() },\n      calories: { value: 2200, goal: 2500, timestamp: Date.now() },\n      exercise: { \n        duration: 45, \n        type: 'running', \n        intensity: 'moderate',\n        timestamp: Date.now() \n      },\n      sleep: {\n        duration: 7.5,\n        quality: 'good',\n        bedtime: Date.now() - 8 * 60 * 60 * 1000,\n        wakeTime: Date.now(),\n      },\n    },\n    nutrition: {\n      water: { value: 1500, goal: 2000, unit: 'ml', timestamp: Date.now() },\n      meals: [\n        {\n          type: 'breakfast',\n          calories: 400,\n          nutrients: { protein: 20, carbs: 50, fat: 15 },\n          timestamp: Date.now() - 4 * 60 * 60 * 1000,\n        },\n        {\n          type: 'lunch',\n          calories: 600,\n          nutrients: { protein: 30, carbs: 70, fat: 20 },\n          timestamp: Date.now() - 1 * 60 * 60 * 1000,\n        },\n      ],\n    },\n    symptoms: [\n      {\n        id: '1',\n        type: 'headache',\n        severity: 3,\n        duration: 2,\n        timestamp: Date.now() - 2 * 60 * 60 * 1000,\n        notes: '轻微头痛，可能是睡眠不足',\n      },\n    ],\n    medications: [\n      {\n        id: '1',\n        name: '维生素D',\n        dosage: '1000IU',\n        frequency: 'daily',\n        startDate: Date.now() - 30 * 24 * 60 * 60 * 1000,\n        endDate: Date.now() + 60 * 24 * 60 * 60 * 1000,\n        taken: true,\n        timestamp: Date.now(),\n      },\n    ],\n  };\n  \n  describe('健康追踪端到端测试', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n      \n      // 设置默认Mock返回值\n      mockHealthService.getHealthMetrics.mockResolvedValue({\n        success: true,\n        data: mockHealthData,\n      });\n      \n      mockStorage.getItem.mockImplementation((key: string) => {\n        if (key === 'health_data') {\n          return Promise.resolve(JSON.stringify(mockHealthData));\n        }\n        return Promise.resolve(null);\n      });\n    });\n  \n    describe('健康数据记录流程', () => {\n      it('应该完成完整的健康数据记录流程', async () => {\n        // 1. 获取当前健康数据\n        const currentData = await mockHealthService.getHealthMetrics();\n        expect(currentData.success).toBe(true);\n        expect(currentData.data).toEqual(mockHealthData);\n  \n        // 2. 添加新的健康记录\n        const newVitalRecord = {\n          type: 'heartRate',\n          value: 75,\n          timestamp: Date.now(),\n          unit: 'bpm',\n        };\n  \n                mockHealthService.addHealthRecord.mockImplementation(async (record) => {\n          // 模拟保存到本地存储\n          const existingData = await mockStorage.getItem('health_data');\n          const healthData = existingData ? JSON.parse(existingData) : {};\n          \n          if (!healthData.vitals) healthData.vitals = {};\n          healthData.vitals.heartRate = record;\n          \n          await mockStorage.setItem('health_data', JSON.stringify(healthData));\n          \n          return {\n            success: true,\n            id: 'new-record-id',\n          };\n        });\n\n        const addResult = await mockHealthService.addHealthRecord(newVitalRecord);\n        expect(addResult.success).toBe(true);\n        expect(mockHealthService.addHealthRecord).toHaveBeenCalledWith(newVitalRecord);\n\n        // 3. 验证数据已保存到本地存储\n        expect(mockStorage.setItem).toHaveBeenCalledWith(\n          'health_data',\n          expect.stringContaining('75')\n        );\n  \n        // 4. 同步数据到服务器\n        mockHealthService.syncHealthData.mockResolvedValue({\n          success: true,\n          synced: 1,\n        });\n  \n        const syncResult = await mockHealthService.syncHealthData();\n        expect(syncResult.success).toBe(true);\n        expect(mockHealthService.syncHealthData).toHaveBeenCalled();\n      });\n  \n      it('应该处理批量健康数据记录', async () => {\n        const batchRecords = [\n          { type: 'weight', value: 71, timestamp: Date.now(), unit: 'kg' },\n          { type: 'bloodPressure', systolic: 125, diastolic: 82, timestamp: Date.now(), unit: 'mmHg' },\n          { type: 'steps', value: 9000, timestamp: Date.now() },\n        ];\n  \n        mockHealthService.addHealthRecord.mockImplementation((record) => \n          Promise.resolve({ success: true, id: `record-${record.type}` })\n        );\n  \n        // 批量添加记录\n        const results = await Promise.all(\n          batchRecords.map(record => mockHealthService.addHealthRecord(record))\n        );\n  \n        expect(results).toHaveLength(3);\n        results.forEach(result => {\n          expect(result.success).toBe(true);\n        });\n  \n        expect(mockHealthService.addHealthRecord).toHaveBeenCalledTimes(3);\n      });\n  \n      it('应该验证健康数据的有效性', async () => {\n        const invalidRecords = [\n          { type: 'heartRate', value: -10, timestamp: Date.now(), unit: 'bpm' }, // 负值\n          { type: 'bloodPressure', systolic: 300, diastolic: 200, timestamp: Date.now(), unit: 'mmHg' }, // 异常高值\n          { type: 'weight', value: 0, timestamp: Date.now(), unit: 'kg' }, // 零值\n        ];\n  \n        mockHealthService.addHealthRecord.mockImplementation((record) => {\n          if (record.value <= 0 || (record.type === 'heartRate' && record.value > 200)) {\n            return Promise.resolve({ success: false, error: '健康数据值异常' });\n          }\n          if (record.type === 'bloodPressure' && (record.systolic > 250 || record.diastolic > 150)) {\n            return Promise.resolve({ success: false, error: '血压值异常' });\n          }\n          return Promise.resolve({ success: true, id: 'valid-record' });\n        });\n  \n        const results = await Promise.all(\n          invalidRecords.map(record => mockHealthService.addHealthRecord(record))\n        );\n  \n        expect(results[0].success).toBe(false);\n        expect(results[1].success).toBe(false);\n        expect(results[2].success).toBe(false);\n      });\n    });\n  \n    describe('健康趋势分析流程', () => {\n      it('应该生成健康趋势分析报告', async () => {\n        const trendData = {\n          heartRate: {\n            trend: 'stable',\n            average: 72,\n            range: { min: 65, max: 80 },\n            data: [70, 72, 74, 71, 73],\n          },\n          weight: {\n            trend: 'decreasing',\n            average: 69.5,\n            change: -0.5,\n            data: [70, 69.8, 69.5, 69.3, 69.2],\n          },\n          steps: {\n            trend: 'increasing',\n            average: 8800,\n            goalAchievement: 0.88,\n            data: [8000, 8200, 8500, 8800, 9000],\n          },\n        };\n  \n        mockHealthService.getHealthTrends.mockResolvedValue({\n          success: true,\n          data: trendData,\n          period: '7days',\n        });\n  \n        const trends = await mockHealthService.getHealthTrends('7days');\n        expect(trends.success).toBe(true);\n        expect(trends.data).toEqual(trendData);\n  \n        // 验证趋势分析的准确性\n        expect(trends.data.heartRate.trend).toBe('stable');\n        expect(trends.data.weight.trend).toBe('decreasing');\n        expect(trends.data.steps.trend).toBe('increasing');\n      });\n  \n      it('应该获取智能体健康分析', async () => {\n        const analysisResult = {\n          overall_score: 85,\n          recommendations: [\n            '建议增加每日步数到10000步',\n            '保持当前的心率水平',\n            '继续保持体重下降趋势',\n          ],\n          risk_factors: [\n            { factor: '睡眠不足', level: 'low', suggestion: '建议每晚睡眠7-8小时' },\n          ],\n          achievements: [\n            '本周体重下降0.5kg',\n            '心率保持稳定范围',\n          ],\n        };\n  \n        mockAgentService.getHealthAnalysis.mockResolvedValue({\n          success: true,\n          analysis: analysisResult,\n          agent: 'xiaoai',\n        });\n  \n        const analysis = await mockAgentService.getHealthAnalysis(mockHealthData);\n        expect(analysis.success).toBe(true);\n        expect(analysis.analysis.overall_score).toBe(85);\n        expect(analysis.analysis.recommendations).toHaveLength(3);\n      });\n  \n      it('应该生成个性化健康建议', async () => {\n        const personalizedAdvice = {\n          nutrition: [\n            '建议增加蛋白质摄入',\n            '减少糖分摄入',\n            '多吃绿叶蔬菜',\n          ],\n          exercise: [\n            '增加有氧运动时间',\n            '添加力量训练',\n            '保持运动规律性',\n          ],\n          lifestyle: [\n            '改善睡眠质量',\n            '减少压力',\n            '定期体检',\n          ],\n          tcm: [\n            '根据体质调理饮食',\n            '适当进行穴位按摩',\n            '注意情志调节',\n          ],\n        };\n  \n        mockAgentService.getPersonalizedAdvice.mockResolvedValue({\n          success: true,\n          advice: personalizedAdvice,\n          agent: 'xiaoke',\n        });\n  \n        const advice = await mockAgentService.getPersonalizedAdvice(mockHealthData);\n        expect(advice.success).toBe(true);\n        expect(advice.advice.nutrition).toHaveLength(3);\n        expect(advice.advice.tcm).toHaveLength(3);\n      });\n    });\n  \n    describe('健康报告生成流程', () => {\n      it('应该生成完整的健康报告', async () => {\n        const healthReport = {\n          id: 'report-2024-01',\n          period: { start: Date.now() - 30 * 24 * 60 * 60 * 1000, end: Date.now() },\n          summary: {\n            overall_health_score: 82,\n            improvement_areas: ['睡眠', '运动'],\n            achievements: ['体重管理', '心率稳定'],\n          },\n          vitals_analysis: {\n            heart_rate: { average: 72, status: 'normal' },\n            blood_pressure: { average: '120/80', status: 'optimal' },\n            weight: { change: -1.2, status: 'improving' },\n          },\n          activity_analysis: {\n            steps: { daily_average: 8500, goal_achievement: 0.85 },\n            exercise: { weekly_minutes: 180, recommendation: 150 },\n            sleep: { average_hours: 7.2, quality_score: 75 },\n          },\n          nutrition_analysis: {\n            calorie_balance: 'appropriate',\n            water_intake: 'adequate',\n            meal_regularity: 'good',\n          },\n          recommendations: [\n            '增加每日步数到10000步',\n            '改善睡眠质量',\n            '保持当前饮食习惯',\n          ],\n          next_goals: [\n            '达到每日步数目标',\n            '保持体重下降趋势',\n            '提高睡眠质量',\n          ],\n        };\n  \n        mockHealthService.generateHealthReport.mockResolvedValue({\n          success: true,\n          report: healthReport,\n        });\n  \n        const report = await mockHealthService.generateHealthReport('monthly');\n        expect(report.success).toBe(true);\n        expect(report.report.summary.overall_health_score).toBe(82);\n        expect(report.report.recommendations).toHaveLength(3);\n        expect(report.report.next_goals).toHaveLength(3);\n      });\n  \n      it('应该支持不同时间段的报告生成', async () => {\n        const periods = ['weekly', 'monthly', 'quarterly', 'yearly'];\n        \n        mockHealthService.generateHealthReport.mockImplementation((period) => \n          Promise.resolve({\n            success: true,\n            report: { period, generated_at: Date.now() },\n          })\n        );\n  \n        const reports = await Promise.all(\n          periods.map(period => mockHealthService.generateHealthReport(period))\n        );\n  \n        expect(reports).toHaveLength(4);\n        reports.forEach((report, index) => {\n          expect(report.success).toBe(true);\n          expect(report.report.period).toBe(periods[index]);\n        });\n      });\n  \n      it('应该导出健康数据', async () => {\n        const exportData = {\n          format: 'json',\n          data: mockHealthData,\n          metadata: {\n            export_date: Date.now(),\n            user_id: 'user-123',\n            data_range: { start: Date.now() - 30 * 24 * 60 * 60 * 1000, end: Date.now() },\n          },\n        };\n  \n        mockHealthService.exportHealthData.mockResolvedValue({\n          success: true,\n          export: exportData,\n          download_url: 'https://example.com/export/health-data.json',\n        });\n  \n        const exportResult = await mockHealthService.exportHealthData('json', '30days');\n        expect(exportResult.success).toBe(true);\n        expect(exportResult.export.format).toBe('json');\n        expect(exportResult.download_url).toContain('health-data.json');\n      });\n    });\n  \n    describe('健康提醒和通知流程', () => {\n      it('应该设置健康提醒', async () => {\n        const reminders = [\n          { type: 'medication', time: '08:00', message: '服用维生素D' },\n          { type: 'water', interval: 2, message: '记得喝水' },\n          { type: 'exercise', time: '18:00', message: '运动时间到了' },\n          { type: 'sleep', time: '22:00', message: '准备睡觉' },\n        ];\n  \n        mockNotificationService.scheduleHealthReminder.mockImplementation((reminder) =>\n          Promise.resolve({ success: true, id: `reminder-${reminder.type}` })\n        );\n  \n        const results = await Promise.all(\n          reminders.map(reminder => mockNotificationService.scheduleHealthReminder(reminder))\n        );\n  \n        expect(results).toHaveLength(4);\n        results.forEach(result => {\n          expect(result.success).toBe(true);\n        });\n  \n        expect(mockNotificationService.scheduleHealthReminder).toHaveBeenCalledTimes(4);\n      });\n  \n      it('应该发送健康警报', async () => {\n        const healthAlerts = [\n          { type: 'high_heart_rate', value: 120, threshold: 100 },\n          { type: 'low_activity', steps: 2000, goal: 10000 },\n          { type: 'missed_medication', medication: '维生素D', time: '08:00' },\n        ];\n  \n        mockNotificationService.sendHealthAlert.mockImplementation((alert) =>\n          Promise.resolve({ success: true, sent: true })\n        );\n  \n        const results = await Promise.all(\n          healthAlerts.map(alert => mockNotificationService.sendHealthAlert(alert))\n        );\n  \n        expect(results).toHaveLength(3);\n        results.forEach(result => {\n          expect(result.success).toBe(true);\n          expect(result.sent).toBe(true);\n        });\n      });\n  \n      it('应该管理提醒的生命周期', async () => {\n        // 创建提醒\n        const reminder = { type: 'medication', time: '08:00', message: '服用维生素D' };\n        \n        mockNotificationService.scheduleHealthReminder.mockResolvedValue({\n          success: true,\n          id: 'reminder-123',\n        });\n  \n        const createResult = await mockNotificationService.scheduleHealthReminder(reminder);\n        expect(createResult.success).toBe(true);\n  \n        // 取消提醒\n        mockNotificationService.cancelReminder.mockResolvedValue({\n          success: true,\n          cancelled: true,\n        });\n  \n        const cancelResult = await mockNotificationService.cancelReminder('reminder-123');\n        expect(cancelResult.success).toBe(true);\n        expect(cancelResult.cancelled).toBe(true);\n      });\n    });\n  \n    describe('智能体健康咨询流程', () => {\n      it('应该开始健康咨询会话', async () => {\n        const consultationData = {\n          symptoms: ['头痛', '疲劳'],\n          duration: '2天',\n          severity: 3,\n          additional_info: '最近工作压力大，睡眠不足',\n        };\n  \n        mockAgentService.startHealthConsultation.mockResolvedValue({\n          success: true,\n          session_id: 'consultation-123',\n          agent: 'laoke',\n          initial_response: '根据您的症状，可能是压力和睡眠不足导致的。建议您...',\n        });\n  \n        const consultation = await mockAgentService.startHealthConsultation(consultationData);\n        expect(consultation.success).toBe(true);\n        expect(consultation.session_id).toBe('consultation-123');\n        expect(consultation.agent).toBe('laoke');\n        expect(consultation.initial_response).toContain('压力和睡眠不足');\n      });\n  \n      it('应该发送健康数据给智能体分析', async () => {\n        const analysisRequest = {\n          data: mockHealthData,\n          focus_areas: ['心率', '睡眠', '运动'],\n          questions: ['我的心率是否正常？', '如何改善睡眠质量？'],\n        };\n  \n        mockAgentService.sendHealthData.mockResolvedValue({\n          success: true,\n          analysis: {\n            heart_rate_analysis: '您的心率在正常范围内',\n            sleep_analysis: '睡眠时间略少，建议增加到8小时',\n            exercise_analysis: '运动量适中，可以适当增加强度',\n          },\n          recommendations: [\n            '保持当前的心率水平',\n            '建立规律的睡眠时间',\n            '增加有氧运动',\n          ],\n        });\n  \n        const analysis = await mockAgentService.sendHealthData(analysisRequest);\n        expect(analysis.success).toBe(true);\n        expect(analysis.analysis.heart_rate_analysis).toContain('正常范围');\n        expect(analysis.recommendations).toHaveLength(3);\n      });\n    });\n  \n    describe('数据同步和备份流程', () => {\n      it('应该同步本地和云端数据', async () => {\n        // 模拟本地数据\n        const localData = { ...mockHealthData, lastSync: Date.now() - 60 * 60 * 1000 };\n        \n        // 模拟云端数据\n        const cloudData = {\n          ...mockHealthData,\n          vitals: {\n            ...mockHealthData.vitals,\n            heartRate: { value: 74, timestamp: Date.now(), unit: 'bpm' },\n          },\n          lastSync: Date.now(),\n        };\n  \n                mockStorage.getItem.mockResolvedValue(JSON.stringify(localData));\n        mockHealthService.syncHealthData.mockImplementation(async () => {\n          // 模拟同步过程中更新本地存储\n          await mockStorage.setItem('health_data', JSON.stringify(cloudData));\n          \n          return {\n            success: true,\n            synced_records: 5,\n            conflicts: 0,\n            latest_data: cloudData,\n          };\n        });\n\n        const syncResult = await mockHealthService.syncHealthData();\n        expect(syncResult.success).toBe(true);\n        expect(syncResult.synced_records).toBe(5);\n        expect(syncResult.conflicts).toBe(0);\n\n        // 验证本地数据已更新\n        expect(mockStorage.setItem).toHaveBeenCalledWith(\n          'health_data',\n          JSON.stringify(cloudData)\n        );\n      });\n  \n      it('应该处理数据冲突', async () => {\n        const conflictData = {\n          local: { heartRate: 72, timestamp: Date.now() - 1000 },\n          cloud: { heartRate: 75, timestamp: Date.now() },\n        };\n  \n        mockHealthService.syncHealthData.mockResolvedValue({\n          success: true,\n          conflicts: 1,\n          conflict_resolution: 'use_latest',\n          resolved_data: conflictData.cloud,\n        });\n  \n        const syncResult = await mockHealthService.syncHealthData();\n        expect(syncResult.success).toBe(true);\n        expect(syncResult.conflicts).toBe(1);\n        expect(syncResult.conflict_resolution).toBe('use_latest');\n      });\n  \n      it('应该处理离线模式', async () => {\n        // 模拟网络断开\n        mockHealthService.syncHealthData.mockRejectedValue(new Error('Network Error'));\n  \n        // 数据应该保存到本地队列\n        const offlineRecord = { type: 'heartRate', value: 76, timestamp: Date.now() };\n        \n        mockStorage.setItem.mockResolvedValue(undefined);\n        \n        // 保存到离线队列\n        await mockStorage.setItem('offline_queue', JSON.stringify([offlineRecord]));\n        \n        expect(mockStorage.setItem).toHaveBeenCalledWith(\n          'offline_queue',\n          JSON.stringify([offlineRecord])\n        );\n  \n        // 网络恢复后同步\n        mockHealthService.syncHealthData.mockResolvedValue({\n          success: true,\n          synced_offline_records: 1,\n        });\n  \n        const syncResult = await mockHealthService.syncHealthData();\n        expect(syncResult.success).toBe(true);\n        expect(syncResult.synced_offline_records).toBe(1);\n      });\n    });\n  \n    describe('错误处理和恢复', () => {\n      it('应该处理服务不可用错误', async () => {\n        mockHealthService.getHealthMetrics.mockRejectedValue(new Error('Service Unavailable'));\n  \n        try {\n          await mockHealthService.getHealthMetrics();\n        } catch (error: unknown) {\n          const err = error as Error;\n          expect(err.message).toBe('Service Unavailable');\n        }\n  \n        // 应该从本地缓存获取数据\n        const cachedData = await mockStorage.getItem('health_data');\n        expect(cachedData).toBeTruthy();\n      });\n  \n      it('应该处理数据验证错误', async () => {\n        const invalidData = { heartRate: 'invalid' };\n        \n        mockHealthService.addHealthRecord.mockResolvedValue({\n          success: false,\n          error: 'Invalid data format',\n          validation_errors: ['heartRate must be a number'],\n        });\n  \n        const result = await mockHealthService.addHealthRecord(invalidData);\n        expect(result.success).toBe(false);\n        expect(result.validation_errors).toContain('heartRate must be a number');\n      });\n  \n      it('应该实现数据恢复机制', async () => {\n        // 模拟数据损坏\n        mockStorage.getItem.mockResolvedValue('corrupted_data');\n  \n        // 应该从备份恢复\n        const backupData = JSON.stringify(mockHealthData);\n        mockStorage.getItem.mockImplementation((key) => {\n          if (key === 'health_data_backup') {\n            return Promise.resolve(backupData);\n          }\n          return Promise.resolve('corrupted_data');\n        });\n  \n        const recoveredData = await mockStorage.getItem('health_data_backup');\n        expect(recoveredData).toBe(backupData);\n  \n        // 恢复主数据\n        await mockStorage.setItem('health_data', recoveredData);\n        expect(mockStorage.setItem).toHaveBeenCalledWith('health_data', backupData);\n      });\n    });\n  });"],"mappings":"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","ignoreList":[]}