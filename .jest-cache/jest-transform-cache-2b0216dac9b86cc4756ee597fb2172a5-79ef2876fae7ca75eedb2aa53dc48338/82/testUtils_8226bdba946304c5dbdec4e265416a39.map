{"version":3,"names":["TestUtils","exports","_classCallCheck2","default","_createClass2","key","value","measureRenderTime","renderFn","startTime","performance","now","endTime","measureAverageRenderTime","iterations","arguments","length","undefined","times","i","time","push","reduce","sum","expectRenderTimeBelow","maxTime","renderTime","expect","toBeLessThan","expectBatchRenderTimeBelow","count","maxTotalTime","totalTime","getMemoryUsage","memory","usedJSHeapSize","detectMemoryLeak","testFn","initialMemory","globalThis","gc","finalMemory","memoryIncrease","createPerformanceBenchmark","name","PerformanceBenchmark","results","run","getResults","sorted","_toConsumableArray2","sort","a","b","average","min","Math","apply","max","median","floor","p95","p99","MockDataGenerator","randomString","chars","result","charAt","random","randomNumber","randomBoolean","randomDate","start","Date","end","getTime","randomChoice","array"],"sources":["testUtils.ts"],"sourcesContent":["import { ReactTestRenderer } from 'react-test-renderer';\n\n// 全局类型声明\ndeclare global {\n  var gc: (() => void) | undefined;\n}\n\n// 简单的性能测试工具\nexport class TestUtils {\n  /**\n   * 测量渲染时间\n   */\n  static measureRenderTime(renderFn: () => void): number {\n    const startTime = performance.now();\n    renderFn();\n    const endTime = performance.now();\n    return endTime - startTime;\n  }\n\n  /**\n   * 测量多次渲染的平均时间\n   */\n  static measureAverageRenderTime(renderFn: () => void, iterations: number = 5): number {\n    const times: number[] = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      const time = this.measureRenderTime(renderFn);\n      times.push(time);\n    }\n    \n    return times.reduce((sum, time) => sum + time, 0) / times.length;\n  }\n\n  /**\n   * 性能断言\n   */\n  static expectRenderTimeBelow(renderFn: () => void, maxTime: number): void {\n    const renderTime = this.measureRenderTime(renderFn);\n    expect(renderTime).toBeLessThan(maxTime);\n  }\n\n  /**\n   * 批量性能测试\n   */\n  static expectBatchRenderTimeBelow(renderFn: () => void, count: number, maxTotalTime: number): void {\n    const startTime = performance.now();\n    \n    for (let i = 0; i < count; i++) {\n      renderFn();\n    }\n    \n    const totalTime = performance.now() - startTime;\n    expect(totalTime).toBeLessThan(maxTotalTime);\n  }\n\n  /**\n   * 内存使用监控（简化版）\n   */\n  static getMemoryUsage(): number {\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return 0;\n  }\n\n  /**\n   * 检测内存泄漏\n   */\n  static detectMemoryLeak(testFn: () => void, iterations: number = 10): boolean {\n    const initialMemory = this.getMemoryUsage();\n    \n    for (let i = 0; i < iterations; i++) {\n      testFn();\n    }\n    \n    // 强制垃圾回收（如果可用）\n    if (typeof globalThis !== 'undefined' && (globalThis as any).gc) {\n      (globalThis as any).gc();\n    }\n    \n    const finalMemory = this.getMemoryUsage();\n    const memoryIncrease = finalMemory - initialMemory;\n    \n    // 如果内存增长超过10MB，可能存在内存泄漏\n    return memoryIncrease > 10 * 1024 * 1024;\n  }\n\n  /**\n   * 创建性能基准\n   */\n  static createPerformanceBenchmark(name: string, renderFn: () => void): PerformanceBenchmark {\n    return new PerformanceBenchmark(name, renderFn);\n  }\n}\n\n/**\n * 性能基准测试类\n */\nexport class PerformanceBenchmark {\n  private name: string;\n  private renderFn: () => void;\n  private results: number[] = [];\n\n  constructor(name: string, renderFn: () => void) {\n    this.name = name;\n    this.renderFn = renderFn;\n  }\n\n  /**\n   * 运行基准测试\n   */\n  run(iterations: number = 10): PerformanceResult {\n    this.results = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      const time = TestUtils.measureRenderTime(this.renderFn);\n      this.results.push(time);\n    }\n    \n    return this.getResults();\n  }\n\n  /**\n   * 获取测试结果\n   */\n  private getResults(): PerformanceResult {\n    const sorted = [...this.results].sort((a, b) => a - b);\n    const sum = this.results.reduce((a, b) => a + b, 0);\n    \n    return {\n      name: this.name,\n      iterations: this.results.length,\n      average: sum / this.results.length,\n      min: Math.min(...this.results),\n      max: Math.max(...this.results),\n      median: sorted[Math.floor(sorted.length / 2)],\n      p95: sorted[Math.floor(sorted.length * 0.95)],\n      p99: sorted[Math.floor(sorted.length * 0.99)],\n    };\n  }\n}\n\n/**\n * 性能测试结果接口\n */\nexport interface PerformanceResult {\n  name: string;\n  iterations: number;\n  average: number;\n  min: number;\n  max: number;\n  median: number;\n  p95: number;\n  p99: number;\n}\n\n/**\n * Mock数据生成器\n */\nexport class MockDataGenerator {\n  /**\n   * 生成随机字符串\n   */\n  static randomString(length: number = 10): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  /**\n   * 生成随机数字\n   */\n  static randomNumber(min: number = 0, max: number = 100): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  /**\n   * 生成随机布尔值\n   */\n  static randomBoolean(): boolean {\n    return Math.random() > 0.5;\n  }\n\n  /**\n   * 生成随机日期\n   */\n  static randomDate(start: Date = new Date(2020, 0, 1), end: Date = new Date()): Date {\n    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n  }\n\n  /**\n   * 从数组中随机选择元素\n   */\n  static randomChoice<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n} "],"mappings":"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","ignoreList":[]}