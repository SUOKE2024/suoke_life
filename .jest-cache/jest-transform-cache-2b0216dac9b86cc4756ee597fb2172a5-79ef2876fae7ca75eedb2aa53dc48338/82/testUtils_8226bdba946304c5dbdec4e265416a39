9229669237fc8dbc825b096624422e1c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestUtils = exports.PerformanceBenchmark = exports.MockDataGenerator = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var TestUtils = exports.TestUtils = function () {
  function TestUtils() {
    (0, _classCallCheck2.default)(this, TestUtils);
  }
  return (0, _createClass2.default)(TestUtils, null, [{
    key: "measureRenderTime",
    value: function measureRenderTime(renderFn) {
      var startTime = performance.now();
      renderFn();
      var endTime = performance.now();
      return endTime - startTime;
    }
  }, {
    key: "measureAverageRenderTime",
    value: function measureAverageRenderTime(renderFn) {
      var iterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
      var times = [];
      for (var i = 0; i < iterations; i++) {
        var time = this.measureRenderTime(renderFn);
        times.push(time);
      }
      return times.reduce(function (sum, time) {
        return sum + time;
      }, 0) / times.length;
    }
  }, {
    key: "expectRenderTimeBelow",
    value: function expectRenderTimeBelow(renderFn, maxTime) {
      var renderTime = this.measureRenderTime(renderFn);
      expect(renderTime).toBeLessThan(maxTime);
    }
  }, {
    key: "expectBatchRenderTimeBelow",
    value: function expectBatchRenderTimeBelow(renderFn, count, maxTotalTime) {
      var startTime = performance.now();
      for (var i = 0; i < count; i++) {
        renderFn();
      }
      var totalTime = performance.now() - startTime;
      expect(totalTime).toBeLessThan(maxTotalTime);
    }
  }, {
    key: "getMemoryUsage",
    value: function getMemoryUsage() {
      if (typeof performance !== 'undefined' && performance.memory) {
        return performance.memory.usedJSHeapSize;
      }
      return 0;
    }
  }, {
    key: "detectMemoryLeak",
    value: function detectMemoryLeak(testFn) {
      var iterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var initialMemory = this.getMemoryUsage();
      for (var i = 0; i < iterations; i++) {
        testFn();
      }
      if (typeof globalThis !== 'undefined' && globalThis.gc) {
        globalThis.gc();
      }
      var finalMemory = this.getMemoryUsage();
      var memoryIncrease = finalMemory - initialMemory;
      return memoryIncrease > 10 * 1024 * 1024;
    }
  }, {
    key: "createPerformanceBenchmark",
    value: function createPerformanceBenchmark(name, renderFn) {
      return new PerformanceBenchmark(name, renderFn);
    }
  }]);
}();
var PerformanceBenchmark = exports.PerformanceBenchmark = function () {
  function PerformanceBenchmark(name, renderFn) {
    (0, _classCallCheck2.default)(this, PerformanceBenchmark);
    this.results = [];
    this.name = name;
    this.renderFn = renderFn;
  }
  return (0, _createClass2.default)(PerformanceBenchmark, [{
    key: "run",
    value: function run() {
      var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      this.results = [];
      for (var i = 0; i < iterations; i++) {
        var time = TestUtils.measureRenderTime(this.renderFn);
        this.results.push(time);
      }
      return this.getResults();
    }
  }, {
    key: "getResults",
    value: function getResults() {
      var sorted = (0, _toConsumableArray2.default)(this.results).sort(function (a, b) {
        return a - b;
      });
      var sum = this.results.reduce(function (a, b) {
        return a + b;
      }, 0);
      return {
        name: this.name,
        iterations: this.results.length,
        average: sum / this.results.length,
        min: Math.min.apply(Math, (0, _toConsumableArray2.default)(this.results)),
        max: Math.max.apply(Math, (0, _toConsumableArray2.default)(this.results)),
        median: sorted[Math.floor(sorted.length / 2)],
        p95: sorted[Math.floor(sorted.length * 0.95)],
        p99: sorted[Math.floor(sorted.length * 0.99)]
      };
    }
  }]);
}();
var MockDataGenerator = exports.MockDataGenerator = function () {
  function MockDataGenerator() {
    (0, _classCallCheck2.default)(this, MockDataGenerator);
  }
  return (0, _createClass2.default)(MockDataGenerator, null, [{
    key: "randomString",
    value: function randomString() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      var result = '';
      for (var i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    }
  }, {
    key: "randomNumber",
    value: function randomNumber() {
      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }
  }, {
    key: "randomBoolean",
    value: function randomBoolean() {
      return Math.random() > 0.5;
    }
  }, {
    key: "randomDate",
    value: function randomDate() {
      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date(2020, 0, 1);
      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    }
  }, {
    key: "randomChoice",
    value: function randomChoice(array) {
      return array[Math.floor(Math.random() * array.length)];
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,