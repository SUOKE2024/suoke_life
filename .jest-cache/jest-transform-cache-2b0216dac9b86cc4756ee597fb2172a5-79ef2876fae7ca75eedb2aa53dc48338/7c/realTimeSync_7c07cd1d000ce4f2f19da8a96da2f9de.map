{"version":3,"names":["SimpleEventEmitter","_classCallCheck2","default","listeners","cov_2cqtjufn4o","s","Map","_createClass2","key","value","on","event","listener","f","has","b","set","get","push","emit","_len","arguments","length","args","Array","_key","eventListeners","forEach","apply","off","index","indexOf","splice","RealTimeSync","_SimpleEventEmitter2","wsUrl","authToken","_this","_callSuper","ws","isConnected","reconnectAttempts","heartbeatTimer","syncTimer","pendingSync","localData","config","reconnectInterval","maxReconnectAttempts","heartbeatInterval","syncInterval","conflictResolution","loadLocalData","setupConflictResolvers","_inherits2","strategy","resolver","clientData","serverData","Object","assign","clientNotes","localTimestamp","timestamp","_connect","_asyncToGenerator2","_this2","WebSocket","onopen","console","log","startHeartbeat","startPeriodicSync","syncPendingData","onmessage","handleMessage","JSON","parse","data","onclose","stopHeartbeat","stopPeriodicSync","scheduleReconnect","onerror","error","connect","_this3","delay","Math","pow","setTimeout","_this4","setInterval","send","stringify","type","clearInterval","_this5","requestFullSync","message","handleDataUpdate","handleSyncResponse","handleConflict","warn","_handleDataUpdate","localVersion","id","version","saveLocalData","sendDataUpdate","resolveConflict","_x","_handleSyncResponse","syncData","_x2","_handleConflict","conflictData","_ref","resolved","_x3","_resolveConflict","resolvedData","max","_x4","_x5","_updateData","existingData","Date","now","savePendingSync","updateData","_x6","_x7","_x8","localVersions","from","values","map","versions","_syncPendingData","_ref2","_ref3","_slicedToArray2","clear","_loadLocalData","_saveLocalData","_savePendingSync","getData","getAllData","getDataByType","filter","_clearAllData","clearAllData","disconnect","close","getConnectionStatus","getPendingSyncCount","size","_default","exports"],"sources":["realTimeSync.ts"],"sourcesContent":["// 实时数据同步服务\n// 支持WebSocket连接、数据同步、冲突解决等功能\n\ninterface SyncConfig {\n  reconnectInterval: number;\n  maxReconnectAttempts: number;\n  heartbeatInterval: number;\n  syncInterval: number;\n}\n\ninterface SyncData {\n  id: string;\n  type: string;\n  data: any;\n  timestamp: number;\n  version: number;\n}\n\ninterface ConflictResolution {\n  strategy: 'client_wins' | 'server_wins' | 'merge' | 'manual';\n  resolver?: (clientData: any, serverData: any) => any;\n}\n\n// 简化的事件发射器\nclass SimpleEventEmitter {\n  private listeners: Map<string, Function[]> = new Map();\n\n  on(event: string, listener: Function): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(listener);\n  }\n\n  emit(event: string, ...args: any[]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(listener => listener(...args));\n    }\n  }\n\n  off(event: string, listener: Function): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(listener);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n}\n\nclass RealTimeSync extends SimpleEventEmitter {\n  private ws: WebSocket | null = null;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private heartbeatTimer: ReturnType<typeof setInterval> | null = null;\n  private syncTimer: ReturnType<typeof setInterval> | null = null;\n  private pendingSync: Map<string, SyncData> = new Map();\n  private localData: Map<string, SyncData> = new Map();\n  \n  private config: SyncConfig = {\n    reconnectInterval: 5000,\n    maxReconnectAttempts: 10,\n    heartbeatInterval: 30000,\n    syncInterval: 60000\n  };\n\n  private conflictResolution: Map<string, ConflictResolution> = new Map();\n\n  constructor(private wsUrl: string, private authToken: string) {\n    super();\n    this.loadLocalData();\n    this.setupConflictResolvers();\n  }\n\n  private setupConflictResolvers(): void {\n    // 健康数据：服务器优先\n    this.conflictResolution.set('health_data', {\n      strategy: 'server_wins'\n    });\n\n    // 用户偏好：客户端优先\n    this.conflictResolution.set('user_preferences', {\n      strategy: 'client_wins'\n    });\n\n    // 诊断结果：合并策略\n    this.conflictResolution.set('diagnosis_result', {\n      strategy: 'merge',\n      resolver: (clientData, serverData) => ({\n        ...serverData,\n        clientNotes: clientData.clientNotes,\n        localTimestamp: clientData.timestamp\n      })\n    });\n  }\n\n  async connect(): Promise<void> {\n    if (this.isConnected) {\n      return;\n    }\n\n    try {\n      this.ws = new WebSocket(`${this.wsUrl}?token=${this.authToken}`);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.startHeartbeat();\n        this.startPeriodicSync();\n        this.syncPendingData();\n        this.emit('connected');\n      };\n\n      this.ws.onmessage = (event) => {\n        this.handleMessage(JSON.parse(event.data));\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.isConnected = false;\n        this.stopHeartbeat();\n        this.stopPeriodicSync();\n        this.emit('disconnected');\n        this.scheduleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n\n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.config.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1);\n    \n    setTimeout(() => {\n      console.log(`Reconnecting... (attempt ${this.reconnectAttempts})`);\n      this.connect();\n    }, delay);\n  }\n\n  private startHeartbeat(): void {\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected && this.ws) {\n        this.ws.send(JSON.stringify({ type: 'ping' }));\n      }\n    }, this.config.heartbeatInterval);\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  private startPeriodicSync(): void {\n    this.syncTimer = setInterval(() => {\n      this.requestFullSync();\n    }, this.config.syncInterval);\n  }\n\n  private stopPeriodicSync(): void {\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n  }\n\n  private handleMessage(message: any): void {\n    switch (message.type) {\n      case 'pong':\n        // 心跳响应\n        break;\n        \n      case 'data_update':\n        this.handleDataUpdate(message.data);\n        break;\n        \n      case 'sync_response':\n        this.handleSyncResponse(message.data);\n        break;\n        \n      case 'conflict':\n        this.handleConflict(message.data);\n        break;\n        \n      case 'error':\n        this.emit('serverError', message.error);\n        break;\n        \n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  private async handleDataUpdate(data: SyncData): Promise<void> {\n    const localVersion = this.localData.get(data.id);\n    \n    if (!localVersion || data.version > localVersion.version) {\n      // 服务器数据更新\n      this.localData.set(data.id, data);\n      await this.saveLocalData();\n      this.emit('dataUpdated', data);\n    } else if (data.version < localVersion.version) {\n      // 本地数据更新，发送到服务器\n      this.sendDataUpdate(localVersion);\n    } else {\n      // 版本相同，检查内容是否一致\n      if (JSON.stringify(data.data) !== JSON.stringify(localVersion.data)) {\n        // 数据冲突\n        await this.resolveConflict(data, localVersion);\n      }\n    }\n  }\n\n  private async handleSyncResponse(syncData: SyncData[]): Promise<void> {\n    for (const data of syncData) {\n      await this.handleDataUpdate(data);\n    }\n    this.emit('syncCompleted');\n  }\n\n  private async handleConflict(conflictData: any): Promise<void> {\n    const { clientData, serverData } = conflictData;\n    const resolved = await this.resolveConflict(serverData, clientData);\n    \n    if (resolved) {\n      this.sendDataUpdate(resolved);\n    }\n  }\n\n  private async resolveConflict(serverData: SyncData, clientData: SyncData): Promise<SyncData | null> {\n    const resolver = this.conflictResolution.get(serverData.type);\n    \n    if (!resolver) {\n      // 默认策略：服务器优先\n      this.localData.set(serverData.id, serverData);\n      await this.saveLocalData();\n      this.emit('conflictResolved', { strategy: 'server_wins', data: serverData });\n      return null;\n    }\n\n    let resolvedData: any;\n\n    switch (resolver.strategy) {\n      case 'server_wins':\n        resolvedData = serverData;\n        break;\n        \n      case 'client_wins':\n        resolvedData = clientData;\n        break;\n        \n      case 'merge':\n        if (resolver.resolver) {\n          resolvedData = {\n            ...serverData,\n            data: resolver.resolver(clientData.data, serverData.data),\n            version: Math.max(serverData.version, clientData.version) + 1\n          };\n        } else {\n          resolvedData = serverData; // 回退到服务器优先\n        }\n        break;\n        \n      case 'manual':\n        // 触发手动解决事件\n        this.emit('manualConflictResolution', { serverData, clientData });\n        return null;\n    }\n\n    this.localData.set(resolvedData.id, resolvedData);\n    await this.saveLocalData();\n    this.emit('conflictResolved', { strategy: resolver.strategy, data: resolvedData });\n    \n    return resolvedData;\n  }\n\n  async updateData(id: string, type: string, data: any): Promise<void> {\n    const existingData = this.localData.get(id);\n    const version = existingData ? existingData.version + 1 : 1;\n    \n    const syncData: SyncData = {\n      id,\n      type,\n      data,\n      timestamp: Date.now(),\n      version\n    };\n\n    this.localData.set(id, syncData);\n    await this.saveLocalData();\n\n    if (this.isConnected) {\n      this.sendDataUpdate(syncData);\n    } else {\n      // 离线时加入待同步队列\n      this.pendingSync.set(id, syncData);\n      await this.savePendingSync();\n    }\n\n    this.emit('localDataUpdated', syncData);\n  }\n\n  private sendDataUpdate(data: SyncData): void {\n    if (this.ws && this.isConnected) {\n      this.ws.send(JSON.stringify({\n        type: 'data_update',\n        data\n      }));\n    }\n  }\n\n  private requestFullSync(): void {\n    if (this.ws && this.isConnected) {\n      const localVersions = Array.from(this.localData.values()).map(data => ({\n        id: data.id,\n        version: data.version\n      }));\n\n      this.ws.send(JSON.stringify({\n        type: 'sync_request',\n        versions: localVersions\n      }));\n    }\n  }\n\n  private async syncPendingData(): Promise<void> {\n    for (const [id, data] of this.pendingSync) {\n      this.sendDataUpdate(data);\n    }\n    \n    this.pendingSync.clear();\n    // 在实际应用中，这里应该使用AsyncStorage\n    // await AsyncStorage.removeItem('pendingSync');\n  }\n\n  private async loadLocalData(): Promise<void> {\n    try {\n      // 在实际应用中，这里应该从AsyncStorage加载数据\n      // const data = await AsyncStorage.getItem('localSyncData');\n      // if (data) {\n      //   const parsed = JSON.parse(data);\n      //   this.localData = new Map(parsed);\n      // }\n\n      // const pending = await AsyncStorage.getItem('pendingSync');\n      // if (pending) {\n      //   const parsedPending = JSON.parse(pending);\n      //   this.pendingSync = new Map(parsedPending);\n      // }\n    } catch (error) {\n      console.error('Failed to load local data:', error);\n    }\n  }\n\n  private async saveLocalData(): Promise<void> {\n    try {\n      // 在实际应用中，这里应该保存到AsyncStorage\n      // const data = Array.from(this.localData.entries());\n      // await AsyncStorage.setItem('localSyncData', JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save local data:', error);\n    }\n  }\n\n  private async savePendingSync(): Promise<void> {\n    try {\n      // 在实际应用中，这里应该保存到AsyncStorage\n      // const data = Array.from(this.pendingSync.entries());\n      // await AsyncStorage.setItem('pendingSync', JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save pending sync:', error);\n    }\n  }\n\n  getData(id: string): SyncData | undefined {\n    return this.localData.get(id);\n  }\n\n  getAllData(): SyncData[] {\n    return Array.from(this.localData.values());\n  }\n\n  getDataByType(type: string): SyncData[] {\n    return Array.from(this.localData.values()).filter(data => data.type === type);\n  }\n\n  async clearAllData(): Promise<void> {\n    this.localData.clear();\n    this.pendingSync.clear();\n    // 在实际应用中，这里应该清理AsyncStorage\n    // await AsyncStorage.multiRemove(['localSyncData', 'pendingSync']);\n    this.emit('dataCleared');\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.stopHeartbeat();\n    this.stopPeriodicSync();\n  }\n\n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n\n  getPendingSyncCount(): number {\n    return this.pendingSync.size;\n  }\n}\n\nexport default RealTimeSync; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}