59017c69caad6da20e166d5eb8ccf3b4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _excluded = ["state", "descriptors"];
var _GestureHandler$Gestu;
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _elements = require("@react-navigation/elements");
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _ModalPresentationContext = _interopRequireDefault(require("../../utils/ModalPresentationContext"));
var _GestureHandler = require("../GestureHandler");
var _HeaderContainer = _interopRequireDefault(require("../Header/HeaderContainer"));
var _CardStack = _interopRequireDefault(require("./CardStack"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var GestureHandlerWrapper = (_GestureHandler$Gestu = _GestureHandler.GestureHandlerRootView) != null ? _GestureHandler$Gestu : _reactNative.View;
var isArrayEqual = function isArrayEqual(a, b) {
  return a.length === b.length && a.every(function (it, index) {
    return it === b[index];
  });
};
var StackView = function (_React$Component) {
  function StackView() {
    var _this;
    (0, _classCallCheck2.default)(this, StackView);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, StackView, [].concat(args));
    _this.state = {
      routes: [],
      previousRoutes: [],
      previousDescriptors: {},
      openingRouteKeys: [],
      closingRouteKeys: [],
      replacingRouteKeys: [],
      descriptors: {}
    };
    _this.getPreviousRoute = function (_ref2) {
      var route = _ref2.route;
      var _this$state = _this.state,
        closingRouteKeys = _this$state.closingRouteKeys,
        replacingRouteKeys = _this$state.replacingRouteKeys;
      var routes = _this.state.routes.filter(function (r) {
        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);
      });
      var index = routes.findIndex(function (r) {
        return r.key === route.key;
      });
      return routes[index - 1];
    };
    _this.renderScene = function (_ref3) {
      var route = _ref3.route;
      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];
      if (!descriptor) {
        return null;
      }
      return descriptor.render();
    };
    _this.renderHeader = function (props) {
      return React.createElement(_HeaderContainer.default, props);
    };
    _this.handleOpenRoute = function (_ref4) {
      var route = _ref4.route;
      var _this$props = _this.props,
        state = _this$props.state,
        navigation = _this$props.navigation;
      var _this$state2 = _this.state,
        closingRouteKeys = _this$state2.closingRouteKeys,
        replacingRouteKeys = _this$state2.replacingRouteKeys;
      if (closingRouteKeys.some(function (key) {
        return key === route.key;
      }) && replacingRouteKeys.every(function (key) {
        return key !== route.key;
      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {
        return r.key === route.key;
      })) {
        navigation.navigate(route);
      } else {
        _this.setState(function (state) {
          return {
            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {
              return !state.replacingRouteKeys.includes(r.key);
            }) : state.routes,
            openingRouteKeys: state.openingRouteKeys.filter(function (key) {
              return key !== route.key;
            }),
            closingRouteKeys: state.closingRouteKeys.filter(function (key) {
              return key !== route.key;
            }),
            replacingRouteKeys: []
          };
        });
      }
    };
    _this.handleCloseRoute = function (_ref5) {
      var route = _ref5.route;
      var _this$props2 = _this.props,
        state = _this$props2.state,
        navigation = _this$props2.navigation;
      if (state.routes.some(function (r) {
        return r.key === route.key;
      })) {
        navigation.dispatch(Object.assign({}, _native.StackActions.pop(), {
          source: route.key,
          target: state.key
        }));
      } else {
        _this.setState(function (state) {
          return {
            routes: state.routes.filter(function (r) {
              return r.key !== route.key;
            }),
            openingRouteKeys: state.openingRouteKeys.filter(function (key) {
              return key !== route.key;
            }),
            closingRouteKeys: state.closingRouteKeys.filter(function (key) {
              return key !== route.key;
            })
          };
        });
      }
    };
    _this.handleTransitionStart = function (_ref6, closing) {
      var route = _ref6.route;
      return _this.props.navigation.emit({
        type: 'transitionStart',
        data: {
          closing: closing
        },
        target: route.key
      });
    };
    _this.handleTransitionEnd = function (_ref7, closing) {
      var route = _ref7.route;
      return _this.props.navigation.emit({
        type: 'transitionEnd',
        data: {
          closing: closing
        },
        target: route.key
      });
    };
    _this.handleGestureStart = function (_ref8) {
      var route = _ref8.route;
      _this.props.navigation.emit({
        type: 'gestureStart',
        target: route.key
      });
    };
    _this.handleGestureEnd = function (_ref9) {
      var route = _ref9.route;
      _this.props.navigation.emit({
        type: 'gestureEnd',
        target: route.key
      });
    };
    _this.handleGestureCancel = function (_ref10) {
      var route = _ref10.route;
      _this.props.navigation.emit({
        type: 'gestureCancel',
        target: route.key
      });
    };
    return _this;
  }
  (0, _inherits2.default)(StackView, _React$Component);
  return (0, _createClass2.default)(StackView, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props3 = this.props,
        state = _this$props3.state,
        _ = _this$props3.descriptors,
        rest = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
      var _this$state3 = this.state,
        routes = _this$state3.routes,
        descriptors = _this$state3.descriptors,
        openingRouteKeys = _this$state3.openingRouteKeys,
        closingRouteKeys = _this$state3.closingRouteKeys;
      return React.createElement(GestureHandlerWrapper, {
        style: styles.container
      }, React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, null, function (insets) {
        return React.createElement(_ModalPresentationContext.default.Consumer, null, function (isParentModal) {
          return React.createElement(_elements.HeaderShownContext.Consumer, null, function (isParentHeaderShown) {
            return React.createElement(_CardStack.default, _extends({
              insets: insets,
              isParentHeaderShown: isParentHeaderShown,
              isParentModal: isParentModal,
              getPreviousRoute: _this2.getPreviousRoute,
              routes: routes,
              openingRouteKeys: openingRouteKeys,
              closingRouteKeys: closingRouteKeys,
              onOpenRoute: _this2.handleOpenRoute,
              onCloseRoute: _this2.handleCloseRoute,
              onTransitionStart: _this2.handleTransitionStart,
              onTransitionEnd: _this2.handleTransitionEnd,
              renderHeader: _this2.renderHeader,
              renderScene: _this2.renderScene,
              state: state,
              descriptors: descriptors,
              onGestureStart: _this2.handleGestureStart,
              onGestureEnd: _this2.handleGestureEnd,
              onGestureCancel: _this2.handleGestureCancel
            }, rest));
          });
        });
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {
        return r.key;
      }), state.previousRoutes.map(function (r) {
        return r.key;
      }))) && state.routes.length) {
        var _routes = state.routes;
        var _previousRoutes = state.previousRoutes;
        var _descriptors = props.descriptors;
        var previousDescriptors = state.previousDescriptors;
        if (props.descriptors !== state.previousDescriptors) {
          _descriptors = state.routes.reduce(function (acc, route) {
            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
            return acc;
          }, {});
          previousDescriptors = props.descriptors;
        }
        if (props.state.routes !== state.previousRoutes) {
          var map = props.state.routes.reduce(function (acc, route) {
            acc[route.key] = route;
            return acc;
          }, {});
          _routes = state.routes.map(function (route) {
            return map[route.key] || route;
          });
          _previousRoutes = props.state.routes;
        }
        return {
          routes: _routes,
          previousRoutes: _previousRoutes,
          descriptors: _descriptors,
          previousDescriptors: previousDescriptors
        };
      }
      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;
      var openingRouteKeys = state.openingRouteKeys,
        closingRouteKeys = state.closingRouteKeys,
        replacingRouteKeys = state.replacingRouteKeys,
        previousRoutes = state.previousRoutes;
      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];
      var nextFocusedRoute = routes[routes.length - 1];
      var isAnimationEnabled = function isAnimationEnabled(key) {
        var descriptor = props.descriptors[key] || state.descriptors[key];
        return descriptor ? descriptor.options.animationEnabled !== false : true;
      };
      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {
        var _descriptor$options$a;
        var descriptor = props.descriptors[key] || state.descriptors[key];
        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';
      };
      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {
        if (!previousRoutes.some(function (r) {
          return r.key === nextFocusedRoute.key;
        })) {
          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {
            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);
            closingRouteKeys = closingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== nextFocusedRoute.key;
            });
            if (!routes.some(function (r) {
              return r.key === previousFocusedRoute.key;
            })) {
              openingRouteKeys = openingRouteKeys.filter(function (key) {
                return key !== previousFocusedRoute.key;
              });
              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {
                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);
                openingRouteKeys = openingRouteKeys.filter(function (key) {
                  return key !== nextFocusedRoute.key;
                });
                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);
              } else {
                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);
                closingRouteKeys = closingRouteKeys.filter(function (key) {
                  return key !== previousFocusedRoute.key;
                });
                routes = routes.slice();
                routes.splice(routes.length - 1, 0, previousFocusedRoute);
              }
            }
          }
        } else if (!routes.some(function (r) {
          return r.key === previousFocusedRoute.key;
        })) {
          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {
            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);
            openingRouteKeys = openingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            replacingRouteKeys = replacingRouteKeys.filter(function (key) {
              return key !== previousFocusedRoute.key;
            });
            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);
          }
        } else {}
      } else if (replacingRouteKeys.length || closingRouteKeys.length) {
        var _routes2;
        routes = routes.slice();
        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref) {
          var key = _ref.key;
          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;
        }))));
      }
      if (!routes.length) {
        throw new Error('There should always be at least one route in the navigation state.');
      }
      var descriptors = routes.reduce(function (acc, route) {
        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];
        return acc;
      }, {});
      return {
        routes: routes,
        previousRoutes: props.state.routes,
        previousDescriptors: props.descriptors,
        openingRouteKeys: openingRouteKeys,
        closingRouteKeys: closingRouteKeys,
        replacingRouteKeys: replacingRouteKeys,
        descriptors: descriptors
      };
    }
  }]);
}(React.Component);
exports.default = StackView;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,