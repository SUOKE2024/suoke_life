7b7734668c31f2b9b2dded1438086f22
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Checkbox = _interopRequireDefault(require("../../../components/ui/Checkbox"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Checkbox组件', function () {
  it('应该正确渲染', function () {
    var mockOnPress = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: false,
        onPress: mockOnPress,
        testID: "test-checkbox"
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('test-checkbox')).toBeTruthy();
  });
  it('应该显示标签', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: false,
        onPress: mockOnPress,
        label: "\u6D4B\u8BD5\u6807\u7B7E"
      })),
      getByText = _render2.getByText;
    expect(getByText('测试标签')).toBeTruthy();
  });
  it('应该处理点击事件', function () {
    var mockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: false,
        onPress: mockOnPress,
        testID: "test-checkbox"
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('test-checkbox'));
    expect(mockOnPress).toHaveBeenCalledWith(true);
  });
  it('选中状态下点击应该取消选中', function () {
    var mockOnPress = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: true,
        onPress: mockOnPress,
        testID: "test-checkbox"
      })),
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByTestId('test-checkbox'));
    expect(mockOnPress).toHaveBeenCalledWith(false);
  });
  it('禁用状态下不应该响应点击', function () {
    var mockOnPress = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: false,
        onPress: mockOnPress,
        disabled: true,
        testID: "test-checkbox"
      })),
      getByTestId = _render5.getByTestId;
    _reactNative.fireEvent.press(getByTestId('test-checkbox'));
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('应该支持不确定状态', function () {
    var mockOnPress = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Checkbox.default, {
        checked: false,
        onPress: mockOnPress,
        indeterminate: true,
        testID: "test-checkbox"
      })),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('test-checkbox')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9DaGVja2JveCIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJpdCIsIm1vY2tPblByZXNzIiwiamVzdCIsImZuIiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJjaGVja2VkIiwib25QcmVzcyIsInRlc3RJRCIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwibGFiZWwiLCJnZXRCeVRleHQiLCJfcmVuZGVyMyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyNCIsIl9yZW5kZXI1IiwiZGlzYWJsZWQiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjYiLCJpbmRldGVybWluYXRlIl0sInNvdXJjZXMiOlsiQ2hlY2tib3gudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja2JveOe7hOS7tuWNleWFg+a1i+ivlVxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3VpL0NoZWNrYm94JztcblxuZGVzY3JpYmUoJ0NoZWNrYm9457uE5Lu2JywgKCkgPT4ge1xuICBpdCgn5bqU6K+l5q2j56Gu5riy5p+TJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxDaGVja2JveFxuICAgICAgICBjaGVja2VkPXtmYWxzZX1cbiAgICAgICAgb25QcmVzcz17bW9ja09uUHJlc3N9XG4gICAgICAgIHRlc3RJRD1cInRlc3QtY2hlY2tib3hcIlxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd0ZXN0LWNoZWNrYm94JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ+W6lOivpeaYvuekuuagh+etvicsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPENoZWNrYm94XG4gICAgICAgIGNoZWNrZWQ9e2ZhbHNlfVxuICAgICAgICBvblByZXNzPXttb2NrT25QcmVzc31cbiAgICAgICAgbGFiZWw9XCLmtYvor5XmoIfnrb5cIlxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn5rWL6K+V5qCH562+JykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ+W6lOivpeWkhOeQhueCueWHu+S6i+S7ticsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8Q2hlY2tib3hcbiAgICAgICAgY2hlY2tlZD17ZmFsc2V9XG4gICAgICAgIG9uUHJlc3M9e21vY2tPblByZXNzfVxuICAgICAgICB0ZXN0SUQ9XCJ0ZXN0LWNoZWNrYm94XCJcbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgndGVzdC1jaGVja2JveCcpKTtcbiAgICBleHBlY3QobW9ja09uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICB9KTtcblxuICBpdCgn6YCJ5Lit54q25oCB5LiL54K55Ye75bqU6K+l5Y+W5raI6YCJ5LitJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxDaGVja2JveFxuICAgICAgICBjaGVja2VkPXt0cnVlfVxuICAgICAgICBvblByZXNzPXttb2NrT25QcmVzc31cbiAgICAgICAgdGVzdElEPVwidGVzdC1jaGVja2JveFwiXG4gICAgICAvPlxuICAgICk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3Rlc3QtY2hlY2tib3gnKSk7XG4gICAgZXhwZWN0KG1vY2tPblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCfnpoHnlKjnirbmgIHkuIvkuI3lupTor6Xlk43lupTngrnlh7snLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uUHJlc3MgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPENoZWNrYm94XG4gICAgICAgIGNoZWNrZWQ9e2ZhbHNlfVxuICAgICAgICBvblByZXNzPXttb2NrT25QcmVzc31cbiAgICAgICAgZGlzYWJsZWQ9e3RydWV9XG4gICAgICAgIHRlc3RJRD1cInRlc3QtY2hlY2tib3hcIlxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCd0ZXN0LWNoZWNrYm94JykpO1xuICAgIGV4cGVjdChtb2NrT25QcmVzcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ+W6lOivpeaUr+aMgeS4jeehruWumueKtuaAgScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT25QcmVzcyA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8Q2hlY2tib3hcbiAgICAgICAgY2hlY2tlZD17ZmFsc2V9XG4gICAgICAgIG9uUHJlc3M9e21vY2tPblByZXNzfVxuICAgICAgICBpbmRldGVybWluYXRlPXt0cnVlfVxuICAgICAgICB0ZXN0SUQ9XCJ0ZXN0LWNoZWNrYm94XCJcbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGV4cGVj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