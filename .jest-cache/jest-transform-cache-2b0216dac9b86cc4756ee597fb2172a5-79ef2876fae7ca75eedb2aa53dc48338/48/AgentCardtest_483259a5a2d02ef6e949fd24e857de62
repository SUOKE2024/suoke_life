eb80215663e9ff0314d1cfd6f005f047
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var MockAgentCard = function MockAgentCard(_ref) {
  var agent = _ref.agent,
    _onPress = _ref.onPress;
  return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
    testID: `agent-card-${agent.id}`,
    onPress: function onPress() {
      return _onPress && _onPress(agent);
    },
    children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "agent-card-container",
      children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
        children: [(0, _jsxRuntime.jsx)(_reactNative2.View, {}), (0, _jsxRuntime.jsx)(_reactNative2.Image, {
          testID: "agent-avatar",
          source: {
            uri: agent.avatar
          },
          style: {
            width: 50,
            height: 50
          },
          alt: ""
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "agent-info",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "agent-name",
          children: agent.name
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "agent-specialty",
          children: agent.specialty
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "agent-description",
          children: agent.description
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "agent-status",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: `status-${agent.status}`,
          children: agent.status === 'online' ? '在线' : '离线'
        })
      })]
    })
  });
};
var mockAgent = {
  id: 'xiaoai',
  name: '小艾',
  specialty: '健康咨询',
  description: '专业的健康管理顾问',
  avatar: 'https://example.com/xiaoai.jpg',
  status: 'online'
};
describe('AgentCard', function () {
  it('应该正确渲染智能体卡片', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('agent-card-container')).toBeTruthy();
    expect(getByTestId('agent-avatar')).toBeTruthy();
    expect(getByTestId('agent-info')).toBeTruthy();
    expect(getByText('小艾')).toBeTruthy();
    expect(getByText('健康咨询')).toBeTruthy();
    expect(getByText('专业的健康管理顾问')).toBeTruthy();
  });
  it('应该显示智能体状态', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    expect(getByTestId('agent-status')).toBeTruthy();
    expect(getByTestId('status-online')).toBeTruthy();
    expect(getByText('在线')).toBeTruthy();
  });
  it('应该显示离线状态', function () {
    var offlineAgent = Object.assign({}, mockAgent, {
      status: 'offline'
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: offlineAgent
      })),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    expect(getByTestId('status-offline')).toBeTruthy();
    expect(getByText('离线')).toBeTruthy();
  });
  it('应该处理点击事件', function () {
    var mockOnPress = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent,
        onPress: mockOnPress
      })),
      getByTestId = _render4.getByTestId;
    var card = getByTestId(`agent-card-${mockAgent.id}`);
    _reactNative.fireEvent.press(card);
    expect(mockOnPress).toHaveBeenCalledWith(mockAgent);
  });
  it('应该设置正确的testID', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('agent-card-xiaoai')).toBeTruthy();
    expect(getByTestId('agent-name')).toBeTruthy();
    expect(getByTestId('agent-specialty')).toBeTruthy();
    expect(getByTestId('agent-description')).toBeTruthy();
  });
  it('应该处理缺少onPress的情况', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByTestId = _render6.getByTestId;
    var card = getByTestId(`agent-card-${mockAgent.id}`);
    expect(function () {
      return _reactNative.fireEvent.press(card);
    }).not.toThrow();
  });
  it('应该正确显示头像', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentCard, {
        agent: mockAgent
      })),
      getByTestId = _render7.getByTestId;
    var avatar = getByTestId('agent-avatar');
    expect(avatar.props.source.uri).toBe(mockAgent.avatar);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,