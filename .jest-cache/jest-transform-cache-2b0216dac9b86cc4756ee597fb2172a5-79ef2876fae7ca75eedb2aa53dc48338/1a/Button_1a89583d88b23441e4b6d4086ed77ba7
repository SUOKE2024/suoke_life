8abb946e27ff92c94cf88f020138189c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _theme = require("../../constants/theme");
var _jsxRuntime = require("react/jsx-runtime");
var Button = exports.Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    style = _ref.style,
    textStyle = _ref.textStyle;
  var buttonStyle = [styles.button, styles[variant], styles[size], (disabled || loading) && styles.disabled, style];
  var buttonTextStyle = [styles.text, styles[`${variant}Text`], styles[`${size}Text`], textStyle];
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
    style: buttonStyle,
    onPress: onPress,
    disabled: disabled || loading,
    activeOpacity: 0.8,
    children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      testID: "activity-indicator",
      size: "small",
      color: variant === 'primary' ? _theme.colors.surface : _theme.colors.primary
    }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: buttonTextStyle,
      children: title
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  button: {
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  primary: {
    backgroundColor: _theme.colors.primary
  },
  secondary: {
    backgroundColor: _theme.colors.secondary
  },
  outline: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: _theme.colors.primary
  },
  small: {
    paddingHorizontal: _theme.spacing.md,
    paddingVertical: _theme.spacing.sm,
    minHeight: 36
  },
  medium: {
    paddingHorizontal: _theme.spacing.lg,
    paddingVertical: _theme.spacing.md,
    minHeight: 48
  },
  large: {
    paddingHorizontal: _theme.spacing.xl,
    paddingVertical: _theme.spacing.lg,
    minHeight: 56
  },
  text: {
    fontWeight: '600',
    textAlign: 'center'
  },
  primaryText: {
    color: _theme.colors.surface
  },
  secondaryText: {
    color: _theme.colors.surface
  },
  outlineText: {
    color: _theme.colors.primary
  },
  smallText: {
    fontSize: 14
  },
  mediumText: {
    fontSize: 16
  },
  largeText: {
    fontSize: 18
  },
  disabled: {
    opacity: 0.6
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,