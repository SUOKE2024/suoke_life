8ded2dbc3bae985dbd5e62687c90b457
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setApiAuthToken = exports.removeApiAuthToken = exports.apiClient = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _config = require("../constants/config");
var ApiClient = function () {
  function ApiClient() {
    (0, _classCallCheck2.default)(this, ApiClient);
    this.baseURL = _config.API_CONFIG.BASE_URL;
    this.defaultTimeout = _config.API_CONFIG.TIMEOUT;
  }
  return (0, _createClass2.default)(ApiClient, [{
    key: "getAuthToken",
    value: (function () {
      var _getAuthToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          return yield _asyncStorage.default.getItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN);
        } catch (error) {
          console.error("Ëé∑ÂèñËÆ§ËØÅ‰ª§ÁâåÂ§±Ë¥•:", error);
          return null;
        }
      });
      function getAuthToken() {
        return _getAuthToken.apply(this, arguments);
      }
      return getAuthToken;
    }())
  }, {
    key: "setAuthToken",
    value: (function () {
      var _setAuthToken = (0, _asyncToGenerator2.default)(function* (token) {
        try {
          yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, token);
        } catch (error) {
          console.error("ËÆæÁΩÆËÆ§ËØÅ‰ª§ÁâåÂ§±Ë¥•:", error);
        }
      });
      function setAuthToken(_x) {
        return _setAuthToken.apply(this, arguments);
      }
      return setAuthToken;
    }())
  }, {
    key: "removeAuthToken",
    value: (function () {
      var _removeAuthToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.removeItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN);
        } catch (error) {
          console.error("ÁßªÈô§ËÆ§ËØÅ‰ª§ÁâåÂ§±Ë¥•:", error);
        }
      });
      function removeAuthToken() {
        return _removeAuthToken.apply(this, arguments);
      }
      return removeAuthToken;
    }())
  }, {
    key: "buildHeaders",
    value: (function () {
      var _buildHeaders = (0, _asyncToGenerator2.default)(function* (config) {
        var headers = Object.assign({
          "Content-Type": "application/json",
          Accept: "application/json"
        }, config == null ? void 0 : config.headers);
        if ((config == null ? void 0 : config.requireAuth) !== false) {
          var token = yield this.getAuthToken();
          if (token) {
            headers.Authorization = `Bearer ${token}`;
          }
        }
        return headers;
      });
      function buildHeaders(_x2) {
        return _buildHeaders.apply(this, arguments);
      }
      return buildHeaders;
    }())
  }, {
    key: "request",
    value: (function () {
      var _request = (0, _asyncToGenerator2.default)(function* (method, endpoint, data, config) {
        try {
          var url = `${this.baseURL}${endpoint}`;
          var headers = yield this.buildHeaders(config);
          var timeout = (config == null ? void 0 : config.timeout) || this.defaultTimeout;
          var controller = new AbortController();
          var timeoutId = setTimeout(function () {
            return controller.abort();
          }, timeout);
          var requestOptions = {
            method: method,
            headers: headers,
            signal: controller.signal
          };
          if (data && ["POST", "PUT", "PATCH"].includes(method)) {
            requestOptions.body = JSON.stringify(data);
          }
          console.log(`üöÄ APIËØ∑Ê±Ç: ${method} ${url}`);
          var response = yield fetch(url, requestOptions);
          clearTimeout(timeoutId);
          var responseData = yield response.json();
          console.log(`üì° APIÂìçÂ∫î: ${response.status}`, responseData);
          if (!response.ok) {
            return {
              success: false,
              data: undefined,
              error: {
                code: response.status.toString(),
                message: responseData.message || `HTTP ${response.status}`,
                details: responseData.details
              }
            };
          }
          return {
            success: true,
            data: responseData.data || responseData,
            error: undefined
          };
        } catch (error) {
          console.error(`‚ùå APIÈîôËØØ: ${method} ${endpoint}`, error);
          var errorMessage = "ÁΩëÁªúËøûÊé•Â§±Ë¥•";
          var errorCode = _config.ERROR_CODES.NETWORK_ERROR;
          if (error.name === "AbortError") {
            errorMessage = "ËØ∑Ê±ÇË∂ÖÊó∂";
            errorCode = _config.ERROR_CODES.TIMEOUT;
          } else if (error.message) {
            errorMessage = error.message;
          }
          return {
            success: false,
            data: undefined,
            error: {
              code: errorCode,
              message: errorMessage,
              details: error.stack
            }
          };
        }
      });
      function request(_x3, _x4, _x5, _x6) {
        return _request.apply(this, arguments);
      }
      return request;
    }())
  }, {
    key: "get",
    value: (function () {
      var _get = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request("GET", endpoint, undefined, config);
      });
      function get(_x7, _x8) {
        return _get.apply(this, arguments);
      }
      return get;
    }())
  }, {
    key: "post",
    value: (function () {
      var _post = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request("POST", endpoint, data, config);
      });
      function post(_x9, _x0, _x1) {
        return _post.apply(this, arguments);
      }
      return post;
    }())
  }, {
    key: "put",
    value: (function () {
      var _put = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request("PUT", endpoint, data, config);
      });
      function put(_x10, _x11, _x12) {
        return _put.apply(this, arguments);
      }
      return put;
    }())
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request("DELETE", endpoint, undefined, config);
      });
      function _delete(_x13, _x14) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }())
  }, {
    key: "patch",
    value: (function () {
      var _patch = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request("PATCH", endpoint, data, config);
      });
      function patch(_x15, _x16, _x17) {
        return _patch.apply(this, arguments);
      }
      return patch;
    }())
  }, {
    key: "uploadFile",
    value: (function () {
      var _uploadFile = (0, _asyncToGenerator2.default)(function* (endpoint, file, config) {
        try {
          var url = `${this.baseURL}${endpoint}`;
          var headers = yield this.buildHeaders(config);
          delete headers["Content-Type"];
          var formData = new FormData();
          formData.append("file", file);
          var controller = new AbortController();
          var timeoutId = setTimeout(function () {
            return controller.abort();
          }, (config == null ? void 0 : config.timeout) || this.defaultTimeout);
          var response = yield fetch(url, {
            method: "POST",
            headers: headers,
            body: formData,
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          var responseData = yield response.json();
          if (!response.ok) {
            return {
              success: false,
              data: undefined,
              error: {
                code: response.status.toString(),
                message: responseData.message || `HTTP ${response.status}`,
                details: responseData.details
              }
            };
          }
          return {
            success: true,
            data: responseData.data || responseData,
            error: undefined
          };
        } catch (error) {
          return {
            success: false,
            data: undefined,
            error: {
              code: _config.ERROR_CODES.NETWORK_ERROR,
              message: error.message || "Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•",
              details: error.stack
            }
          };
        }
      });
      function uploadFile(_x18, _x19, _x20) {
        return _uploadFile.apply(this, arguments);
      }
      return uploadFile;
    }())
  }]);
}();
var apiClient = exports.apiClient = new ApiClient();
var setApiAuthToken = exports.setApiAuthToken = function setApiAuthToken(token) {
  return apiClient.setAuthToken(token);
};
var removeApiAuthToken = exports.removeApiAuthToken = function removeApiAuthToken() {
  return apiClient.removeAuthToken();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,