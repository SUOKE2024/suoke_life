76203617fa78b48094910d05d8d6e767
_getJestObj().mock('../../components/common/Icon', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return function (_ref) {
    var name = _ref.name,
      size = _ref.size,
      color = _ref.color;
    return (0, _jsxRuntime.jsx)(Text, {
      testID: `icon-${name}`,
      style: {
        fontSize: size,
        color: color
      },
      children: name
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HealthMetricCard = _interopRequireDefault(require("../../screens/components/HealthMetricCard"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockHealthMetric = {
  id: 'mood',
  name: '心情指数',
  value: 85,
  unit: '分',
  target: 80,
  icon: 'emoticon-happy',
  color: '#FF9500',
  trend: 'up',
  suggestion: '保持积极心态，今天心情不错！',
  history: [{
    date: '2024-01-01',
    value: 75
  }, {
    date: '2024-01-02',
    value: 80
  }, {
    date: '2024-01-03',
    value: 85
  }]
};
var mockGetTrendIcon = function mockGetTrendIcon(trend) {
  var iconMap = {
    up: 'trending-up',
    down: 'trending-down',
    stable: 'trending-neutral'
  };
  return iconMap[trend] || 'trending-neutral';
};
describe('HealthMetricCard', function () {
  it('应该正确渲染健康指标信息', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockHealthMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render.getByText;
    expect(getByText('心情指数')).toBeTruthy();
    expect(getByText('85')).toBeTruthy();
    expect(getByText('分')).toBeTruthy();
    expect(getByText('目标: 80分')).toBeTruthy();
    expect(getByText('保持积极心态，今天心情不错！')).toBeTruthy();
  });
  it('应该在有onPress时响应点击', function () {
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockHealthMetric,
        onPress: mockOnPress,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('心情指数'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('应该正确显示不同趋势的图标', function () {
    expect(mockGetTrendIcon('up')).toBe('trending-up');
    expect(mockGetTrendIcon('down')).toBe('trending-down');
    expect(mockGetTrendIcon('stable')).toBe('trending-neutral');
    expect(mockGetTrendIcon('unknown')).toBe('trending-neutral');
  });
  it('应该正确显示不同的数值', function () {
    var aboveTargetMetric = Object.assign({}, mockHealthMetric, {
      value: 90,
      target: 80
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: aboveTargetMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render3.getByText,
      rerender = _render3.rerender;
    expect(getByText('90')).toBeTruthy();
    expect(getByText('目标: 80分')).toBeTruthy();
    var belowTargetMetric = Object.assign({}, mockHealthMetric, {
      value: 60,
      target: 80
    });
    rerender((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
      metric: belowTargetMetric,
      getTrendIcon: mockGetTrendIcon
    }));
    expect(getByText('60')).toBeTruthy();
    expect(getByText('目标: 80分')).toBeTruthy();
  });
  it('应该正确显示不同趋势的颜色', function () {
    var trends = ['up', 'down', 'stable'];
    trends.forEach(function (trend) {
      var metricWithTrend = Object.assign({}, mockHealthMetric, {
        trend: trend
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
          metric: metricWithTrend,
          getTrendIcon: mockGetTrendIcon
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId(`icon-${mockGetTrendIcon(trend)}`)).toBeTruthy();
    });
  });
  it('应该处理没有历史数据的情况', function () {
    var metricWithoutHistory = Object.assign({}, mockHealthMetric, {
      history: undefined
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: metricWithoutHistory,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render5.getByText;
    expect(getByText('心情指数')).toBeTruthy();
    expect(getByText('85')).toBeTruthy();
  });
  it('应该在没有onPress时不响应点击', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockHealthMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText('心情指数'));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,