{"version":3,"names":["_getJestObj","mock","_require","require","Text","_ref","name","size","color","_jsxRuntime","jsx","testID","style","fontSize","children","_interopRequireDefault","_react","_reactNative","_HealthMetricCard","_require2","jest","mockHealthMetric","id","value","unit","target","icon","trend","suggestion","history","date","mockGetTrendIcon","iconMap","up","down","stable","describe","it","_render","render","default","metric","getTrendIcon","getByText","expect","toBeTruthy","mockOnPress","fn","_render2","onPress","fireEvent","press","toHaveBeenCalledTimes","toBe","aboveTargetMetric","Object","assign","_render3","rerender","belowTargetMetric","trends","forEach","metricWithTrend","_render4","getByTestId","metricWithoutHistory","undefined","_render5","_render6"],"sources":["HealthMetricCard.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport HealthMetricCard from '../../screens/components/HealthMetricCard';\nimport { HealthMetric } from '../../types/life';\n\n// Mock Icon component\njest.mock('../../components/common/Icon', () => {\n  const { Text } = require('react-native');\n  return ({ name, size, color }: any) => (\n    <Text testID={`icon-${name}`} style={{ fontSize: size, color }}>\n      {name}\n    </Text>\n  );\n});\n\n// Mock数据\nconst mockHealthMetric: HealthMetric = {\n  id: 'mood',\n  name: '心情指数',\n  value: 85,\n  unit: '分',\n  target: 80,\n  icon: 'emoticon-happy',\n  color: '#FF9500',\n  trend: 'up',\n  suggestion: '保持积极心态，今天心情不错！',\n  history: [\n    { date: '2024-01-01', value: 75 },\n    { date: '2024-01-02', value: 80 },\n    { date: '2024-01-03', value: 85 },\n  ],\n};\n\nconst mockGetTrendIcon = (trend: string) => {\n  const iconMap: Record<string, string> = {\n    up: 'trending-up',\n    down: 'trending-down',\n    stable: 'trending-neutral',\n  };\n  return iconMap[trend] || 'trending-neutral';\n};\n\ndescribe('HealthMetricCard', () => {\n  it('应该正确渲染健康指标信息', () => {\n    const { getByText } = render(\n      <HealthMetricCard\n        metric={mockHealthMetric}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    expect(getByText('心情指数')).toBeTruthy();\n    expect(getByText('85')).toBeTruthy();\n    expect(getByText('分')).toBeTruthy();\n    expect(getByText('目标: 80分')).toBeTruthy();\n    expect(getByText('保持积极心态，今天心情不错！')).toBeTruthy();\n  });\n\n  it('应该在有onPress时响应点击', () => {\n    const mockOnPress = jest.fn();\n    const { getByText } = render(\n      <HealthMetricCard\n        metric={mockHealthMetric}\n        onPress={mockOnPress}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    // 点击卡片\n    fireEvent.press(getByText('心情指数'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('应该正确显示不同趋势的图标', () => {\n    expect(mockGetTrendIcon('up')).toBe('trending-up');\n    expect(mockGetTrendIcon('down')).toBe('trending-down');\n    expect(mockGetTrendIcon('stable')).toBe('trending-neutral');\n    expect(mockGetTrendIcon('unknown')).toBe('trending-neutral');\n  });\n\n  it('应该正确显示不同的数值', () => {\n    // 测试超过目标的情况\n    const aboveTargetMetric = { ...mockHealthMetric, value: 90, target: 80 };\n    const { getByText, rerender } = render(\n      <HealthMetricCard\n        metric={aboveTargetMetric}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    expect(getByText('90')).toBeTruthy();\n    expect(getByText('目标: 80分')).toBeTruthy();\n\n    // 测试低于目标的情况\n    const belowTargetMetric = { ...mockHealthMetric, value: 60, target: 80 };\n    rerender(\n      <HealthMetricCard\n        metric={belowTargetMetric}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    expect(getByText('60')).toBeTruthy();\n    expect(getByText('目标: 80分')).toBeTruthy();\n  });\n\n  it('应该正确显示不同趋势的颜色', () => {\n    const trends = ['up', 'down', 'stable'];\n    trends.forEach(trend => {\n      const metricWithTrend = { ...mockHealthMetric, trend: trend as any };\n      const { getByTestId } = render(\n        <HealthMetricCard\n          metric={metricWithTrend}\n          getTrendIcon={mockGetTrendIcon}\n        />\n      );\n      \n      // 验证趋势图标存在\n      expect(getByTestId(`icon-${mockGetTrendIcon(trend)}`)).toBeTruthy();\n    });\n  });\n\n  it('应该处理没有历史数据的情况', () => {\n    const metricWithoutHistory = { ...mockHealthMetric, history: undefined };\n    const { getByText } = render(\n      <HealthMetricCard\n        metric={metricWithoutHistory}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    expect(getByText('心情指数')).toBeTruthy();\n    expect(getByText('85')).toBeTruthy();\n  });\n\n  it('应该在没有onPress时不响应点击', () => {\n    const { getByText } = render(\n      <HealthMetricCard\n        metric={mockHealthMetric}\n        getTrendIcon={mockGetTrendIcon}\n      />\n    );\n\n    // 点击卡片不应该有任何反应（不会抛出错误）\n    fireEvent.press(getByText('心情指数'));\n    // 没有onPress，所以不会有任何副作用\n  });\n}); "],"mappings":"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","ignoreList":[]}