{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_jsxRuntime","HealthCard","_ref","title","value","unit","trend","_ref$status","status","onPress","description","getStatusColor","getTrendIcon","jsx","TouchableOpacity","testID","children","jsxs","View","style","borderColor","Text","toString","color","mockHealthData","describe","it","_render","render","Object","assign","getByTestId","expect","toHaveTextContent","_render2","rerender","_render3","mockOnPress","jest","fn","_render4","fireEvent","press","toHaveBeenCalledTimes","minimalData","_render5","queryByTestId","toBeNull","numericData","_render6","_render7","not","toThrow"],"sources":["HealthCard.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\n// Mock健康卡片组件\nconst HealthCard: React.FC<{\n  title: string;\n  value: string | number;\n  unit?: string;\n  trend?: 'up' | 'down' | 'stable';\n  status?: 'normal' | 'warning' | 'danger';\n  onPress?: () => void;\n  description?: string;\n}> = ({ title, value, unit, trend, status = 'normal', onPress, description }) => {\n  const getStatusColor = () => {\n    switch (status) {\n      case 'warning': return '#FFA500';\n      case 'danger': return '#FF4444';\n      default: return '#4CAF50';\n    }\n  };\n\n  const getTrendIcon = () => {\n    switch (trend) {\n      case 'up': return '↗️';\n      case 'down': return '↘️';\n      case 'stable': return '→';\n      default: return '';\n    }\n  };\n\n  return (\n    <TouchableOpacity testID=\"health-card\" onPress={onPress}>\n      <View style={{ borderColor: getStatusColor() }}>\n        <Text testID=\"health-card-title\">{title}</Text>\n        <View testID=\"health-card-value-container\">\n          <Text testID=\"health-card-value\">{value.toString()}</Text>\n          {unit && <Text testID=\"health-card-unit\">{unit}</Text>}\n          {trend && <Text testID=\"health-card-trend\">{getTrendIcon()}</Text>}\n        </View>\n        {description && (\n          <Text testID=\"health-card-description\">{description}</Text>\n        )}\n        <Text testID=\"health-card-status\" style={{ color: getStatusColor() }}>\n          {status}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\n// Mock数据\nconst mockHealthData = {\n  title: '血压',\n  value: '120/80',\n  unit: 'mmHg',\n  trend: 'stable' as const,\n  status: 'normal' as const,\n  description: '血压正常范围内',\n};\n\ndescribe('HealthCard', () => {\n  it('应该正确渲染健康卡片基本信息', () => {\n    const { getByTestId } = render(\n      <HealthCard {...mockHealthData} />\n    );\n\n    expect(getByTestId('health-card-title')).toHaveTextContent('血压');\n    expect(getByTestId('health-card-value')).toHaveTextContent('120/80');\n    expect(getByTestId('health-card-unit')).toHaveTextContent('mmHg');\n    expect(getByTestId('health-card-description')).toHaveTextContent('血压正常范围内');\n  });\n\n  it('应该正确显示趋势图标', () => {\n    const { getByTestId, rerender } = render(\n      <HealthCard {...mockHealthData} trend=\"up\" />\n    );\n\n    expect(getByTestId('health-card-trend')).toHaveTextContent('↗️');\n\n    rerender(<HealthCard {...mockHealthData} trend=\"down\" />);\n    expect(getByTestId('health-card-trend')).toHaveTextContent('↘️');\n\n    rerender(<HealthCard {...mockHealthData} trend=\"stable\" />);\n    expect(getByTestId('health-card-trend')).toHaveTextContent('→');\n  });\n\n  it('应该正确显示不同的状态', () => {\n    const { getByTestId, rerender } = render(\n      <HealthCard {...mockHealthData} status=\"normal\" />\n    );\n\n    expect(getByTestId('health-card-status')).toHaveTextContent('normal');\n\n    rerender(<HealthCard {...mockHealthData} status=\"warning\" />);\n    expect(getByTestId('health-card-status')).toHaveTextContent('warning');\n\n    rerender(<HealthCard {...mockHealthData} status=\"danger\" />);\n    expect(getByTestId('health-card-status')).toHaveTextContent('danger');\n  });\n\n  it('应该处理点击事件', () => {\n    const mockOnPress = jest.fn();\n    const { getByTestId } = render(\n      <HealthCard {...mockHealthData} onPress={mockOnPress} />\n    );\n\n    fireEvent.press(getByTestId('health-card'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('应该处理没有可选属性的情况', () => {\n    const minimalData = {\n      title: '心率',\n      value: 72,\n    };\n\n    const { getByTestId, queryByTestId } = render(\n      <HealthCard {...minimalData} />\n    );\n\n    expect(getByTestId('health-card-title')).toHaveTextContent('心率');\n    expect(getByTestId('health-card-value')).toHaveTextContent('72');\n    expect(queryByTestId('health-card-unit')).toBeNull();\n    expect(queryByTestId('health-card-trend')).toBeNull();\n    expect(queryByTestId('health-card-description')).toBeNull();\n  });\n\n  it('应该正确处理数字类型的值', () => {\n    const numericData = {\n      title: '体重',\n      value: 65.5,\n      unit: 'kg',\n    };\n\n    const { getByTestId } = render(\n      <HealthCard {...numericData} />\n    );\n\n    expect(getByTestId('health-card-value')).toHaveTextContent('65.5');\n  });\n\n  it('应该处理没有点击事件的情况', () => {\n    const { getByTestId } = render(\n      <HealthCard {...mockHealthData} />\n    );\n\n    // 应该不会抛出错误\n    expect(() => {\n      fireEvent.press(getByTestId('health-card'));\n    }).not.toThrow();\n  });\n}); "],"mappings":"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","ignoreList":[]}