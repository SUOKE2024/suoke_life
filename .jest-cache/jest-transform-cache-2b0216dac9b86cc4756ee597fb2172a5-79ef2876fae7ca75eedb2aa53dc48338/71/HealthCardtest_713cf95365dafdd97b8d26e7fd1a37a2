fa632481f5c367a4fe6fc3e0b3396cf1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var HealthCard = function HealthCard(_ref) {
  var title = _ref.title,
    value = _ref.value,
    unit = _ref.unit,
    trend = _ref.trend,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? 'normal' : _ref$status,
    onPress = _ref.onPress,
    description = _ref.description;
  var getStatusColor = function getStatusColor() {
    switch (status) {
      case 'warning':
        return '#FFA500';
      case 'danger':
        return '#FF4444';
      default:
        return '#4CAF50';
    }
  };
  var getTrendIcon = function getTrendIcon() {
    switch (trend) {
      case 'up':
        return '↗️';
      case 'down':
        return '↘️';
      case 'stable':
        return '→';
      default:
        return '';
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
    testID: "health-card",
    onPress: onPress,
    children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      style: {
        borderColor: getStatusColor()
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "health-card-title",
        children: title
      }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        testID: "health-card-value-container",
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "health-card-value",
          children: value.toString()
        }), unit && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "health-card-unit",
          children: unit
        }), trend && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "health-card-trend",
          children: getTrendIcon()
        })]
      }), description && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "health-card-description",
        children: description
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "health-card-status",
        style: {
          color: getStatusColor()
        },
        children: status
      })]
    })
  });
};
var mockHealthData = {
  title: '血压',
  value: '120/80',
  unit: 'mmHg',
  trend: 'stable',
  status: 'normal',
  description: '血压正常范围内'
};
describe('HealthCard', function () {
  it('应该正确渲染健康卡片基本信息', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData))),
      getByTestId = _render.getByTestId;
    expect(getByTestId('health-card-title')).toHaveTextContent('血压');
    expect(getByTestId('health-card-value')).toHaveTextContent('120/80');
    expect(getByTestId('health-card-unit')).toHaveTextContent('mmHg');
    expect(getByTestId('health-card-description')).toHaveTextContent('血压正常范围内');
  });
  it('应该正确显示趋势图标', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
        trend: "up"
      }))),
      getByTestId = _render2.getByTestId,
      rerender = _render2.rerender;
    expect(getByTestId('health-card-trend')).toHaveTextContent('↗️');
    rerender((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
      trend: "down"
    })));
    expect(getByTestId('health-card-trend')).toHaveTextContent('↘️');
    rerender((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
      trend: "stable"
    })));
    expect(getByTestId('health-card-trend')).toHaveTextContent('→');
  });
  it('应该正确显示不同的状态', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
        status: "normal"
      }))),
      getByTestId = _render3.getByTestId,
      rerender = _render3.rerender;
    expect(getByTestId('health-card-status')).toHaveTextContent('normal');
    rerender((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
      status: "warning"
    })));
    expect(getByTestId('health-card-status')).toHaveTextContent('warning');
    rerender((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
      status: "danger"
    })));
    expect(getByTestId('health-card-status')).toHaveTextContent('danger');
  });
  it('应该处理点击事件', function () {
    var mockOnPress = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData, {
        onPress: mockOnPress
      }))),
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByTestId('health-card'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('应该处理没有可选属性的情况', function () {
    var minimalData = {
      title: '心率',
      value: 72
    };
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, minimalData))),
      getByTestId = _render5.getByTestId,
      queryByTestId = _render5.queryByTestId;
    expect(getByTestId('health-card-title')).toHaveTextContent('心率');
    expect(getByTestId('health-card-value')).toHaveTextContent('72');
    expect(queryByTestId('health-card-unit')).toBeNull();
    expect(queryByTestId('health-card-trend')).toBeNull();
    expect(queryByTestId('health-card-description')).toBeNull();
  });
  it('应该正确处理数字类型的值', function () {
    var numericData = {
      title: '体重',
      value: 65.5,
      unit: 'kg'
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, numericData))),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('health-card-value')).toHaveTextContent('65.5');
  });
  it('应该处理没有点击事件的情况', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HealthCard, Object.assign({}, mockHealthData))),
      getByTestId = _render7.getByTestId;
    expect(function () {
      _reactNative.fireEvent.press(getByTestId('health-card'));
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,