{"version":3,"names":["_getJestObj","mock","authService","mockAuthService","_interopRequireDefault","require","_asyncToGenerator2","_slicedToArray2","_react","_reactNative","_reactRedux","_reactNative2","_store","_jsxRuntime","_require","jest","login","fn","register","logout","SimpleAuthComponent","_React$useState","React","useState","_React$useState2","default","status","setStatus","handleLogin","_ref","email","password","error","apply","arguments","handleRegister","_ref2","handleLogout","_ref3","jsxs","View","testID","children","jsx","Text","TouchableOpacity","onPress","TestWrapper","_ref4","Provider","store","describe","beforeEach","clearAllMocks","it","_render","render","getByTestId","expect","toBeTruthy","mockResolvedValue","user","id","token","_render2","loginButton","statusText","props","toBe","fireEvent","press","waitFor","toHaveBeenCalledWith","mockRejectedValue","Error","_render3","toHaveBeenCalled","_render4","registerButton","_render5","undefined","_render6","logoutButton","_render7","iterations","times","i","startTime","performance","now","_render8","unmount","endTime","push","averageTime","reduce","sum","time","toBeLessThan","_render9","totalTime","_render0","toHaveBeenCalledTimes","_render1","toJSON","toMatchSnapshot"],"sources":["SimpleAuthFlow.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { store } from '../../store';\n\n// Mock AuthService\nconst mockAuthService = {\n  login: jest.fn(),\n  register: jest.fn(),\n  logout: jest.fn(),\n};\n\njest.mock('../../services/authService', () => ({\n  authService: mockAuthService,\n}));\n\n// 简化的测试组件\nconst SimpleAuthComponent = () => {\n  const [status, setStatus] = React.useState('idle');\n\n  const handleLogin = async () => {\n    setStatus('logging-in');\n    try {\n      await mockAuthService.login({ email: 'test@example.com', password: 'password' });\n      setStatus('logged-in');\n    } catch (error) {\n      setStatus('login-error');\n    }\n  };\n\n  const handleRegister = async () => {\n    setStatus('registering');\n    try {\n      await mockAuthService.register({ email: 'test@example.com', password: 'password' });\n      setStatus('registered');\n    } catch (error) {\n      setStatus('register-error');\n    }\n  };\n\n  const handleLogout = async () => {\n    setStatus('logging-out');\n    try {\n      await mockAuthService.logout();\n      setStatus('logged-out');\n    } catch (error) {\n      setStatus('logout-error');\n    }\n  };\n\n  return (\n    <View testID=\"auth-component\">\n      <Text testID=\"status-text\">{status}</Text>\n      <TouchableOpacity testID=\"login-button\" onPress={handleLogin}>\n        <Text>Login</Text>\n      </TouchableOpacity>\n      <TouchableOpacity testID=\"register-button\" onPress={handleRegister}>\n        <Text>Register</Text>\n      </TouchableOpacity>\n      <TouchableOpacity testID=\"logout-button\" onPress={handleLogout}>\n        <Text>Logout</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\n// 测试包装器\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <Provider store={store}>\n    {children}\n  </Provider>\n);\n\ndescribe('简化认证流程集成测试', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('基础功能测试', () => {\n    it('应该正确渲染组件', () => {\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      expect(getByTestId('auth-component')).toBeTruthy();\n      expect(getByTestId('status-text')).toBeTruthy();\n      expect(getByTestId('login-button')).toBeTruthy();\n      expect(getByTestId('register-button')).toBeTruthy();\n      expect(getByTestId('logout-button')).toBeTruthy();\n    });\n\n    it('应该成功处理登录流程', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const loginButton = getByTestId('login-button');\n      const statusText = getByTestId('status-text');\n\n      // 初始状态\n      expect(statusText.props.children).toBe('idle');\n\n      // 点击登录按钮\n      fireEvent.press(loginButton);\n\n      // 检查登录中状态\n      expect(statusText.props.children).toBe('logging-in');\n\n      // 等待登录完成\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('logged-in');\n      });\n\n      // 验证服务被调用\n      expect(mockAuthService.login).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password'\n      });\n    });\n\n    it('应该处理登录错误', async () => {\n      mockAuthService.login.mockRejectedValue(new Error('Login failed'));\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const loginButton = getByTestId('login-button');\n      const statusText = getByTestId('status-text');\n\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('login-error');\n      });\n\n      expect(mockAuthService.login).toHaveBeenCalled();\n    });\n\n    it('应该成功处理注册流程', async () => {\n      mockAuthService.register.mockResolvedValue({\n        user: { id: '2', email: 'test@example.com' },\n        token: 'new-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const registerButton = getByTestId('register-button');\n      const statusText = getByTestId('status-text');\n\n      fireEvent.press(registerButton);\n\n      expect(statusText.props.children).toBe('registering');\n\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('registered');\n      });\n\n      expect(mockAuthService.register).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password'\n      });\n    });\n\n    it('应该处理注册错误', async () => {\n      mockAuthService.register.mockRejectedValue(new Error('Registration failed'));\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const registerButton = getByTestId('register-button');\n      const statusText = getByTestId('status-text');\n\n      fireEvent.press(registerButton);\n\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('register-error');\n      });\n\n      expect(mockAuthService.register).toHaveBeenCalled();\n    });\n\n    it('应该成功处理登出流程', async () => {\n      mockAuthService.logout.mockResolvedValue(undefined);\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const logoutButton = getByTestId('logout-button');\n      const statusText = getByTestId('status-text');\n\n      fireEvent.press(logoutButton);\n\n      expect(statusText.props.children).toBe('logging-out');\n\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('logged-out');\n      });\n\n      expect(mockAuthService.logout).toHaveBeenCalled();\n    });\n\n    it('应该处理登出错误', async () => {\n      mockAuthService.logout.mockRejectedValue(new Error('Logout failed'));\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const logoutButton = getByTestId('logout-button');\n      const statusText = getByTestId('status-text');\n\n      fireEvent.press(logoutButton);\n\n      await waitFor(() => {\n        expect(statusText.props.children).toBe('logout-error');\n      });\n\n      expect(mockAuthService.logout).toHaveBeenCalled();\n    });\n  });\n\n  describe('性能测试', () => {\n    it('组件渲染性能测试', () => {\n      const iterations = 10;\n      const times = [];\n\n      for (let i = 0; i < iterations; i++) {\n        const startTime = performance.now();\n        \n        const { unmount } = render(\n          <TestWrapper>\n            <SimpleAuthComponent />\n          </TestWrapper>\n        );\n        \n        const endTime = performance.now();\n        unmount();\n        times.push(endTime - startTime);\n      }\n\n      const averageTime = times.reduce((sum, time) => sum + time, 0) / iterations;\n      expect(averageTime).toBeLessThan(100); // 100ms内完成渲染\n    });\n\n    it('登录流程性能测试', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com' },\n        token: 'mock-token',\n      });\n\n      const startTime = performance.now();\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const loginButton = getByTestId('login-button');\n      fireEvent.press(loginButton);\n\n      await waitFor(() => {\n        expect(getByTestId('status-text').props.children).toBe('logged-in');\n      });\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(500); // 500ms内完成\n    });\n  });\n\n  describe('并发测试', () => {\n    it('应该正确处理多个并发操作', async () => {\n      mockAuthService.login.mockResolvedValue({\n        user: { id: '1', email: 'test@example.com' },\n        token: 'mock-token',\n      });\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      const loginButton = getByTestId('login-button');\n\n      // 快速多次点击\n      for (let i = 0; i < 3; i++) {\n        fireEvent.press(loginButton);\n      }\n\n      await waitFor(() => {\n        expect(getByTestId('status-text').props.children).toBe('logged-in');\n      });\n\n      // 验证只调用了一次（防止重复提交）\n      expect(mockAuthService.login).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('快照测试', () => {\n    it('应该匹配组件快照', () => {\n      const { toJSON } = render(\n        <TestWrapper>\n          <SimpleAuthComponent />\n        </TestWrapper>\n      );\n\n      expect(toJSON()).toMatchSnapshot();\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}