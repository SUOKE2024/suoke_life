dc2036b36f587b830899f8d1f8a03766
_getJestObj().mock('../../services/authService', function () {
  return {
    authService: mockAuthService
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _reactNative2 = require("react-native");
var _store = require("../../store");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAuthService = {
  login: jest.fn(),
  register: jest.fn(),
  logout: jest.fn()
};
var SimpleAuthComponent = function SimpleAuthComponent() {
  var _React$useState = _react.default.useState('idle'),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    status = _React$useState2[0],
    setStatus = _React$useState2[1];
  var handleLogin = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setStatus('logging-in');
      try {
        yield mockAuthService.login({
          email: 'test@example.com',
          password: 'password'
        });
        setStatus('logged-in');
      } catch (error) {
        setStatus('login-error');
      }
    });
    return function handleLogin() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleRegister = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      setStatus('registering');
      try {
        yield mockAuthService.register({
          email: 'test@example.com',
          password: 'password'
        });
        setStatus('registered');
      } catch (error) {
        setStatus('register-error');
      }
    });
    return function handleRegister() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleLogout = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      setStatus('logging-out');
      try {
        yield mockAuthService.logout();
        setStatus('logged-out');
      } catch (error) {
        setStatus('logout-error');
      }
    });
    return function handleLogout() {
      return _ref3.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "auth-component",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "status-text",
      children: status
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login-button",
      onPress: handleLogin,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Login"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register-button",
      onPress: handleRegister,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Register"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "logout-button",
      onPress: handleLogout,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Logout"
      })
    })]
  });
};
var TestWrapper = function TestWrapper(_ref4) {
  var children = _ref4.children;
  return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
    store: _store.store,
    children: children
  });
};
describe('简化认证流程集成测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('基础功能测试', function () {
    it('应该正确渲染组件', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render.getByTestId;
      expect(getByTestId('auth-component')).toBeTruthy();
      expect(getByTestId('status-text')).toBeTruthy();
      expect(getByTestId('login-button')).toBeTruthy();
      expect(getByTestId('register-button')).toBeTruthy();
      expect(getByTestId('logout-button')).toBeTruthy();
    });
    it('应该成功处理登录流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com'
        },
        token: 'mock-token'
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render2.getByTestId;
      var loginButton = getByTestId('login-button');
      var statusText = getByTestId('status-text');
      expect(statusText.props.children).toBe('idle');
      _reactNative.fireEvent.press(loginButton);
      expect(statusText.props.children).toBe('logging-in');
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('logged-in');
      });
      expect(mockAuthService.login).toHaveBeenCalledWith({
        email: 'test@example.com',
        password: 'password'
      });
    }));
    it('应该处理登录错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('Login failed'));
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render3.getByTestId;
      var loginButton = getByTestId('login-button');
      var statusText = getByTestId('status-text');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('login-error');
      });
      expect(mockAuthService.login).toHaveBeenCalled();
    }));
    it('应该成功处理注册流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        user: {
          id: '2',
          email: 'test@example.com'
        },
        token: 'new-token'
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render4.getByTestId;
      var registerButton = getByTestId('register-button');
      var statusText = getByTestId('status-text');
      _reactNative.fireEvent.press(registerButton);
      expect(statusText.props.children).toBe('registering');
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('registered');
      });
      expect(mockAuthService.register).toHaveBeenCalledWith({
        email: 'test@example.com',
        password: 'password'
      });
    }));
    it('应该处理注册错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockRejectedValue(new Error('Registration failed'));
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render5.getByTestId;
      var registerButton = getByTestId('register-button');
      var statusText = getByTestId('status-text');
      _reactNative.fireEvent.press(registerButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('register-error');
      });
      expect(mockAuthService.register).toHaveBeenCalled();
    }));
    it('应该成功处理登出流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.logout.mockResolvedValue(undefined);
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render6.getByTestId;
      var logoutButton = getByTestId('logout-button');
      var statusText = getByTestId('status-text');
      _reactNative.fireEvent.press(logoutButton);
      expect(statusText.props.children).toBe('logging-out');
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('logged-out');
      });
      expect(mockAuthService.logout).toHaveBeenCalled();
    }));
    it('应该处理登出错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.logout.mockRejectedValue(new Error('Logout failed'));
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render7.getByTestId;
      var logoutButton = getByTestId('logout-button');
      var statusText = getByTestId('status-text');
      _reactNative.fireEvent.press(logoutButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(statusText.props.children).toBe('logout-error');
      });
      expect(mockAuthService.logout).toHaveBeenCalled();
    }));
  });
  describe('性能测试', function () {
    it('组件渲染性能测试', function () {
      var iterations = 10;
      var times = [];
      for (var i = 0; i < iterations; i++) {
        var startTime = performance.now();
        var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
          })),
          unmount = _render8.unmount;
        var endTime = performance.now();
        unmount();
        times.push(endTime - startTime);
      }
      var averageTime = times.reduce(function (sum, time) {
        return sum + time;
      }, 0) / iterations;
      expect(averageTime).toBeLessThan(100);
    });
    it('登录流程性能测试', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com'
        },
        token: 'mock-token'
      });
      var startTime = performance.now();
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render9.getByTestId;
      var loginButton = getByTestId('login-button');
      _reactNative.fireEvent.press(loginButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('status-text').props.children).toBe('logged-in');
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(500);
    }));
  });
  describe('并发测试', function () {
    it('应该正确处理多个并发操作', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com'
        },
        token: 'mock-token'
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        getByTestId = _render0.getByTestId;
      var loginButton = getByTestId('login-button');
      for (var i = 0; i < 3; i++) {
        _reactNative.fireEvent.press(loginButton);
      }
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId('status-text').props.children).toBe('logged-in');
      });
      expect(mockAuthService.login).toHaveBeenCalledTimes(1);
    }));
  });
  describe('快照测试', function () {
    it('应该匹配组件快照', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(SimpleAuthComponent, {})
        })),
        toJSON = _render1.toJSON;
      expect(toJSON()).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,