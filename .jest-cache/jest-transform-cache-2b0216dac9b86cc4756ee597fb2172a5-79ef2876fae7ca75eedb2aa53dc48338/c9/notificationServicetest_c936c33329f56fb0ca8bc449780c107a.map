{"version":3,"names":["createMockNotificationService","notifications","id","title","body","type","timestamp","read","sendPushNotification","jest","fn","mockImplementation","_ref","_asyncToGenerator2","default","notification","newNotification","Object","assign","Date","now","toString","toISOString","push","_x","apply","arguments","scheduleLocalNotification","_ref2","delay","scheduleTime","_x2","_x3","getNotifications","_toConsumableArray2","sort","a","b","getTime","markAsRead","_ref4","notificationId","find","n","_x4","deleteNotification","_ref5","filter","_x5","clearAllNotifications","getUnreadCount","length","updateNotificationSettings","_ref8","settings","Promise","resolve","_x6","describe","notificationService","beforeEach","it","expect","toBeDefined","toHaveBeenCalledWith","healthNotification","systemNotification","toHaveBeenCalledTimes","data","agentId","chatId","Array","isArray","toBe","toBeGreaterThan","toHaveBeenCalled","unreadNotification","notificationToDelete","unreadCount","toBeGreaterThanOrEqual","pushEnabled","healthReminders","agentMessages","systemUpdates","quietHours","enabled","start","end","failingService","mockRejectedValue","Error","rejects","toThrow","i","current","next","healthNotifications","agentNotifications"],"sources":["notificationService.test.ts"],"sourcesContent":["// 通知服务测试\ninterface Notification {\n  id: string;\n  title: string;\n  body: string;\n  type: 'health' | 'agent' | 'system' | 'reminder';\n  timestamp: string;\n  read: boolean;\n  data?: any;\n}\n\ninterface NotificationService {\n  sendPushNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => Promise<string>;\n  scheduleLocalNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>, delay: number) => Promise<string>;\n  getNotifications: () => Promise<Notification[]>;\n  markAsRead: (notificationId: string) => Promise<void>;\n  deleteNotification: (notificationId: string) => Promise<void>;\n  clearAllNotifications: () => Promise<void>;\n  getUnreadCount: () => Promise<number>;\n  updateNotificationSettings: (settings: any) => Promise<void>;\n}\n\n// Mock通知服务\nconst createMockNotificationService = (): NotificationService => {\n  let notifications: Notification[] = [\n    {\n      id: '1',\n      title: '健康提醒',\n      body: '该测量血压了',\n      type: 'health',\n      timestamp: '2024-01-15T10:00:00Z',\n      read: false,\n    },\n    {\n      id: '2',\n      title: '小艾消息',\n      body: '您的健康报告已生成',\n      type: 'agent',\n      timestamp: '2024-01-15T09:00:00Z',\n      read: true,\n    },\n  ];\n\n  return {\n    sendPushNotification: jest.fn().mockImplementation(async (notification) => {\n      const newNotification: Notification = {\n        ...notification,\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        read: false,\n      };\n      notifications.push(newNotification);\n      return newNotification.id;\n    }),\n\n    scheduleLocalNotification: jest.fn().mockImplementation(async (notification, delay) => {\n      const scheduleTime = new Date(Date.now() + delay);\n      const newNotification: Notification = {\n        ...notification,\n        id: Date.now().toString(),\n        timestamp: scheduleTime.toISOString(),\n        read: false,\n      };\n      notifications.push(newNotification);\n      return newNotification.id;\n    }),\n\n    getNotifications: jest.fn().mockImplementation(async () => {\n      return [...notifications].sort((a, b) => \n        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n    }),\n\n    markAsRead: jest.fn().mockImplementation(async (notificationId) => {\n      const notification = notifications.find(n => n.id === notificationId);\n      if (notification) {\n        notification.read = true;\n      }\n    }),\n\n    deleteNotification: jest.fn().mockImplementation(async (notificationId) => {\n      notifications = notifications.filter(n => n.id !== notificationId);\n    }),\n\n    clearAllNotifications: jest.fn().mockImplementation(async () => {\n      notifications = [];\n    }),\n\n    getUnreadCount: jest.fn().mockImplementation(async () => {\n      return notifications.filter(n => !n.read).length;\n    }),\n\n    updateNotificationSettings: jest.fn().mockImplementation(async (settings) => {\n      // Mock更新设置\n      return Promise.resolve();\n    }),\n  };\n};\n\ndescribe('NotificationService', () => {\n  let notificationService: NotificationService;\n\n  beforeEach(() => {\n    notificationService = createMockNotificationService();\n  });\n\n  describe('发送推送通知', () => {\n    it('应该能够发送推送通知', async () => {\n      const notification = {\n        title: '新消息',\n        body: '您有一条新的健康建议',\n        type: 'agent' as const,\n      };\n\n      const notificationId = await notificationService.sendPushNotification(notification);\n\n      expect(notificationId).toBeDefined();\n      expect(notificationService.sendPushNotification).toHaveBeenCalledWith(notification);\n    });\n\n    it('应该能够发送不同类型的通知', async () => {\n      const healthNotification = {\n        title: '健康提醒',\n        body: '请按时服药',\n        type: 'health' as const,\n      };\n\n      const systemNotification = {\n        title: '系统更新',\n        body: '应用已更新到最新版本',\n        type: 'system' as const,\n      };\n\n      await notificationService.sendPushNotification(healthNotification);\n      await notificationService.sendPushNotification(systemNotification);\n\n      expect(notificationService.sendPushNotification).toHaveBeenCalledTimes(2);\n    });\n\n    it('应该能够发送带数据的通知', async () => {\n      const notification = {\n        title: '智能体回复',\n        body: '小艾回复了您的问题',\n        type: 'agent' as const,\n        data: { agentId: 'xiaoai', chatId: '123' },\n      };\n\n      const notificationId = await notificationService.sendPushNotification(notification);\n\n      expect(notificationId).toBeDefined();\n      expect(notificationService.sendPushNotification).toHaveBeenCalledWith(notification);\n    });\n  });\n\n  describe('本地通知调度', () => {\n    it('应该能够调度本地通知', async () => {\n      const notification = {\n        title: '服药提醒',\n        body: '该服用降压药了',\n        type: 'reminder' as const,\n      };\n      const delay = 3600000; // 1小时后\n\n      const notificationId = await notificationService.scheduleLocalNotification(notification, delay);\n\n      expect(notificationId).toBeDefined();\n      expect(notificationService.scheduleLocalNotification).toHaveBeenCalledWith(notification, delay);\n    });\n\n    it('应该能够调度多个本地通知', async () => {\n      const notifications = [\n        {\n          title: '早餐提醒',\n          body: '该吃早餐了',\n          type: 'reminder' as const,\n        },\n        {\n          title: '运动提醒',\n          body: '该运动了',\n          type: 'reminder' as const,\n        },\n      ];\n\n      for (const notification of notifications) {\n        await notificationService.scheduleLocalNotification(notification, 1000);\n      }\n\n      expect(notificationService.scheduleLocalNotification).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('通知管理', () => {\n    it('应该能够获取所有通知', async () => {\n      const notifications = await notificationService.getNotifications();\n\n      expect(notifications).toBeDefined();\n      expect(Array.isArray(notifications)).toBe(true);\n      expect(notifications.length).toBeGreaterThan(0);\n      expect(notificationService.getNotifications).toHaveBeenCalled();\n    });\n\n    it('应该能够标记通知为已读', async () => {\n      const notifications = await notificationService.getNotifications();\n      const unreadNotification = notifications.find(n => !n.read);\n\n      if (unreadNotification) {\n        await notificationService.markAsRead(unreadNotification.id);\n        expect(notificationService.markAsRead).toHaveBeenCalledWith(unreadNotification.id);\n      }\n    });\n\n    it('应该能够删除通知', async () => {\n      const notifications = await notificationService.getNotifications();\n      const notificationToDelete = notifications[0];\n\n      await notificationService.deleteNotification(notificationToDelete.id);\n\n      expect(notificationService.deleteNotification).toHaveBeenCalledWith(notificationToDelete.id);\n    });\n\n    it('应该能够清空所有通知', async () => {\n      await notificationService.clearAllNotifications();\n\n      expect(notificationService.clearAllNotifications).toHaveBeenCalled();\n    });\n\n    it('应该能够获取未读通知数量', async () => {\n      const unreadCount = await notificationService.getUnreadCount();\n\n      expect(typeof unreadCount).toBe('number');\n      expect(unreadCount).toBeGreaterThanOrEqual(0);\n      expect(notificationService.getUnreadCount).toHaveBeenCalled();\n    });\n  });\n\n  describe('通知设置', () => {\n    it('应该能够更新通知设置', async () => {\n      const settings = {\n        pushEnabled: true,\n        healthReminders: true,\n        agentMessages: true,\n        systemUpdates: false,\n        quietHours: {\n          enabled: true,\n          start: '22:00',\n          end: '08:00',\n        },\n      };\n\n      await notificationService.updateNotificationSettings(settings);\n\n      expect(notificationService.updateNotificationSettings).toHaveBeenCalledWith(settings);\n    });\n\n    it('应该能够禁用特定类型的通知', async () => {\n      const settings = {\n        healthReminders: false,\n        agentMessages: true,\n        systemUpdates: true,\n      };\n\n      await notificationService.updateNotificationSettings(settings);\n\n      expect(notificationService.updateNotificationSettings).toHaveBeenCalledWith(settings);\n    });\n  });\n\n  describe('错误处理', () => {\n    it('应该处理发送通知失败', async () => {\n      const failingService = createMockNotificationService();\n      failingService.sendPushNotification = jest.fn().mockRejectedValue(new Error('网络错误'));\n\n      const notification = {\n        title: '测试通知',\n        body: '测试内容',\n        type: 'system' as const,\n      };\n\n      await expect(failingService.sendPushNotification(notification)).rejects.toThrow('网络错误');\n    });\n\n    it('应该处理获取通知失败', async () => {\n      const failingService = createMockNotificationService();\n      failingService.getNotifications = jest.fn().mockRejectedValue(new Error('数据库错误'));\n\n      await expect(failingService.getNotifications()).rejects.toThrow('数据库错误');\n    });\n\n    it('应该处理标记已读失败', async () => {\n      const failingService = createMockNotificationService();\n      failingService.markAsRead = jest.fn().mockRejectedValue(new Error('更新失败'));\n\n      await expect(failingService.markAsRead('invalid-id')).rejects.toThrow('更新失败');\n    });\n  });\n\n  describe('通知过滤和排序', () => {\n    it('应该按时间倒序返回通知', async () => {\n      // 添加新通知\n      await notificationService.sendPushNotification({\n        title: '最新通知',\n        body: '这是最新的通知',\n        type: 'system',\n      });\n\n      const notifications = await notificationService.getNotifications();\n      \n      // 验证按时间倒序排列\n      for (let i = 0; i < notifications.length - 1; i++) {\n        const current = new Date(notifications[i].timestamp);\n        const next = new Date(notifications[i + 1].timestamp);\n        expect(current.getTime()).toBeGreaterThanOrEqual(next.getTime());\n      }\n    });\n\n    it('应该能够按类型过滤通知', async () => {\n      const notifications = await notificationService.getNotifications();\n      const healthNotifications = notifications.filter(n => n.type === 'health');\n      const agentNotifications = notifications.filter(n => n.type === 'agent');\n\n      expect(healthNotifications.length).toBeGreaterThan(0);\n      expect(agentNotifications.length).toBeGreaterThan(0);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}