ded5c1bdb3b3e05722989b4247d75fcd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var createMockNotificationService = function createMockNotificationService() {
  var notifications = [{
    id: '1',
    title: '健康提醒',
    body: '该测量血压了',
    type: 'health',
    timestamp: '2024-01-15T10:00:00Z',
    read: false
  }, {
    id: '2',
    title: '小艾消息',
    body: '您的健康报告已生成',
    type: 'agent',
    timestamp: '2024-01-15T09:00:00Z',
    read: true
  }];
  return {
    sendPushNotification: jest.fn().mockImplementation(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (notification) {
        var newNotification = Object.assign({}, notification, {
          id: Date.now().toString(),
          timestamp: new Date().toISOString(),
          read: false
        });
        notifications.push(newNotification);
        return newNotification.id;
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()),
    scheduleLocalNotification: jest.fn().mockImplementation(function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (notification, delay) {
        var scheduleTime = new Date(Date.now() + delay);
        var newNotification = Object.assign({}, notification, {
          id: Date.now().toString(),
          timestamp: scheduleTime.toISOString(),
          read: false
        });
        notifications.push(newNotification);
        return newNotification.id;
      });
      return function (_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }()),
    getNotifications: jest.fn().mockImplementation((0, _asyncToGenerator2.default)(function* () {
      return (0, _toConsumableArray2.default)(notifications).sort(function (a, b) {
        return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
      });
    })),
    markAsRead: jest.fn().mockImplementation(function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* (notificationId) {
        var notification = notifications.find(function (n) {
          return n.id === notificationId;
        });
        if (notification) {
          notification.read = true;
        }
      });
      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }()),
    deleteNotification: jest.fn().mockImplementation(function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* (notificationId) {
        notifications = notifications.filter(function (n) {
          return n.id !== notificationId;
        });
      });
      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }()),
    clearAllNotifications: jest.fn().mockImplementation((0, _asyncToGenerator2.default)(function* () {
      notifications = [];
    })),
    getUnreadCount: jest.fn().mockImplementation((0, _asyncToGenerator2.default)(function* () {
      return notifications.filter(function (n) {
        return !n.read;
      }).length;
    })),
    updateNotificationSettings: jest.fn().mockImplementation(function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* (settings) {
        return Promise.resolve();
      });
      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }())
  };
};
describe('NotificationService', function () {
  var notificationService;
  beforeEach(function () {
    notificationService = createMockNotificationService();
  });
  describe('发送推送通知', function () {
    it('应该能够发送推送通知', (0, _asyncToGenerator2.default)(function* () {
      var notification = {
        title: '新消息',
        body: '您有一条新的健康建议',
        type: 'agent'
      };
      var notificationId = yield notificationService.sendPushNotification(notification);
      expect(notificationId).toBeDefined();
      expect(notificationService.sendPushNotification).toHaveBeenCalledWith(notification);
    }));
    it('应该能够发送不同类型的通知', (0, _asyncToGenerator2.default)(function* () {
      var healthNotification = {
        title: '健康提醒',
        body: '请按时服药',
        type: 'health'
      };
      var systemNotification = {
        title: '系统更新',
        body: '应用已更新到最新版本',
        type: 'system'
      };
      yield notificationService.sendPushNotification(healthNotification);
      yield notificationService.sendPushNotification(systemNotification);
      expect(notificationService.sendPushNotification).toHaveBeenCalledTimes(2);
    }));
    it('应该能够发送带数据的通知', (0, _asyncToGenerator2.default)(function* () {
      var notification = {
        title: '智能体回复',
        body: '小艾回复了您的问题',
        type: 'agent',
        data: {
          agentId: 'xiaoai',
          chatId: '123'
        }
      };
      var notificationId = yield notificationService.sendPushNotification(notification);
      expect(notificationId).toBeDefined();
      expect(notificationService.sendPushNotification).toHaveBeenCalledWith(notification);
    }));
  });
  describe('本地通知调度', function () {
    it('应该能够调度本地通知', (0, _asyncToGenerator2.default)(function* () {
      var notification = {
        title: '服药提醒',
        body: '该服用降压药了',
        type: 'reminder'
      };
      var delay = 3600000;
      var notificationId = yield notificationService.scheduleLocalNotification(notification, delay);
      expect(notificationId).toBeDefined();
      expect(notificationService.scheduleLocalNotification).toHaveBeenCalledWith(notification, delay);
    }));
    it('应该能够调度多个本地通知', (0, _asyncToGenerator2.default)(function* () {
      var notifications = [{
        title: '早餐提醒',
        body: '该吃早餐了',
        type: 'reminder'
      }, {
        title: '运动提醒',
        body: '该运动了',
        type: 'reminder'
      }];
      for (var notification of notifications) {
        yield notificationService.scheduleLocalNotification(notification, 1000);
      }
      expect(notificationService.scheduleLocalNotification).toHaveBeenCalledTimes(2);
    }));
  });
  describe('通知管理', function () {
    it('应该能够获取所有通知', (0, _asyncToGenerator2.default)(function* () {
      var notifications = yield notificationService.getNotifications();
      expect(notifications).toBeDefined();
      expect(Array.isArray(notifications)).toBe(true);
      expect(notifications.length).toBeGreaterThan(0);
      expect(notificationService.getNotifications).toHaveBeenCalled();
    }));
    it('应该能够标记通知为已读', (0, _asyncToGenerator2.default)(function* () {
      var notifications = yield notificationService.getNotifications();
      var unreadNotification = notifications.find(function (n) {
        return !n.read;
      });
      if (unreadNotification) {
        yield notificationService.markAsRead(unreadNotification.id);
        expect(notificationService.markAsRead).toHaveBeenCalledWith(unreadNotification.id);
      }
    }));
    it('应该能够删除通知', (0, _asyncToGenerator2.default)(function* () {
      var notifications = yield notificationService.getNotifications();
      var notificationToDelete = notifications[0];
      yield notificationService.deleteNotification(notificationToDelete.id);
      expect(notificationService.deleteNotification).toHaveBeenCalledWith(notificationToDelete.id);
    }));
    it('应该能够清空所有通知', (0, _asyncToGenerator2.default)(function* () {
      yield notificationService.clearAllNotifications();
      expect(notificationService.clearAllNotifications).toHaveBeenCalled();
    }));
    it('应该能够获取未读通知数量', (0, _asyncToGenerator2.default)(function* () {
      var unreadCount = yield notificationService.getUnreadCount();
      expect(typeof unreadCount).toBe('number');
      expect(unreadCount).toBeGreaterThanOrEqual(0);
      expect(notificationService.getUnreadCount).toHaveBeenCalled();
    }));
  });
  describe('通知设置', function () {
    it('应该能够更新通知设置', (0, _asyncToGenerator2.default)(function* () {
      var settings = {
        pushEnabled: true,
        healthReminders: true,
        agentMessages: true,
        systemUpdates: false,
        quietHours: {
          enabled: true,
          start: '22:00',
          end: '08:00'
        }
      };
      yield notificationService.updateNotificationSettings(settings);
      expect(notificationService.updateNotificationSettings).toHaveBeenCalledWith(settings);
    }));
    it('应该能够禁用特定类型的通知', (0, _asyncToGenerator2.default)(function* () {
      var settings = {
        healthReminders: false,
        agentMessages: true,
        systemUpdates: true
      };
      yield notificationService.updateNotificationSettings(settings);
      expect(notificationService.updateNotificationSettings).toHaveBeenCalledWith(settings);
    }));
  });
  describe('错误处理', function () {
    it('应该处理发送通知失败', (0, _asyncToGenerator2.default)(function* () {
      var failingService = createMockNotificationService();
      failingService.sendPushNotification = jest.fn().mockRejectedValue(new Error('网络错误'));
      var notification = {
        title: '测试通知',
        body: '测试内容',
        type: 'system'
      };
      yield expect(failingService.sendPushNotification(notification)).rejects.toThrow('网络错误');
    }));
    it('应该处理获取通知失败', (0, _asyncToGenerator2.default)(function* () {
      var failingService = createMockNotificationService();
      failingService.getNotifications = jest.fn().mockRejectedValue(new Error('数据库错误'));
      yield expect(failingService.getNotifications()).rejects.toThrow('数据库错误');
    }));
    it('应该处理标记已读失败', (0, _asyncToGenerator2.default)(function* () {
      var failingService = createMockNotificationService();
      failingService.markAsRead = jest.fn().mockRejectedValue(new Error('更新失败'));
      yield expect(failingService.markAsRead('invalid-id')).rejects.toThrow('更新失败');
    }));
  });
  describe('通知过滤和排序', function () {
    it('应该按时间倒序返回通知', (0, _asyncToGenerator2.default)(function* () {
      yield notificationService.sendPushNotification({
        title: '最新通知',
        body: '这是最新的通知',
        type: 'system'
      });
      var notifications = yield notificationService.getNotifications();
      for (var i = 0; i < notifications.length - 1; i++) {
        var current = new Date(notifications[i].timestamp);
        var next = new Date(notifications[i + 1].timestamp);
        expect(current.getTime()).toBeGreaterThanOrEqual(next.getTime());
      }
    }));
    it('应该能够按类型过滤通知', (0, _asyncToGenerator2.default)(function* () {
      var notifications = yield notificationService.getNotifications();
      var healthNotifications = notifications.filter(function (n) {
        return n.type === 'health';
      });
      var agentNotifications = notifications.filter(function (n) {
        return n.type === 'agent';
      });
      expect(healthNotifications.length).toBeGreaterThan(0);
      expect(agentNotifications.length).toBeGreaterThan(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,