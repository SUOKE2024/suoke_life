ebfa0efa85898db76c96168785847199
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var mockUseAgent = function mockUseAgent() {
  var _React$useState = React.useState([]),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    agents = _React$useState2[0],
    setAgents = _React$useState2[1];
  var _React$useState3 = React.useState(null),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    selectedAgent = _React$useState4[0],
    setSelectedAgent = _React$useState4[1];
  var _React$useState5 = React.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    loading = _React$useState6[0],
    setLoading = _React$useState6[1];
  var _React$useState7 = React.useState(null),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    error = _React$useState8[0],
    setError = _React$useState8[1];
  var fetchAgents = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      try {
        var mockAgents = [{
          id: 'xiaoai',
          name: '小艾',
          specialty: '健康咨询',
          status: 'online'
        }, {
          id: 'xiaoke',
          name: '小克',
          specialty: '疾病诊断',
          status: 'online'
        }, {
          id: 'laoke',
          name: '老克',
          specialty: '中医调理',
          status: 'offline'
        }, {
          id: 'soer',
          name: '索儿',
          specialty: '生活指导',
          status: 'online'
        }];
        setAgents(mockAgents);
        setError(null);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    });
    return function fetchAgents() {
      return _ref.apply(this, arguments);
    };
  }();
  var selectAgent = function selectAgent(agentId) {
    var agent = agents.find(function (a) {
      return a.id === agentId;
    });
    setSelectedAgent(agent || null);
  };
  var clearError = function clearError() {
    return setError(null);
  };
  return {
    agents: agents,
    selectedAgent: selectedAgent,
    loading: loading,
    error: error,
    fetchAgents: fetchAgents,
    selectAgent: selectAgent,
    clearError: clearError
  };
};
var React = {
  useState: jest.fn()
};
describe('useAgent Hook', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('初始状态', function () {
    it('应该返回正确的初始状态', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.agents).toEqual([]);
      expect(hook.selectedAgent).toBeNull();
      expect(hook.loading).toBe(false);
      expect(hook.error).toBeNull();
    });
    it('应该提供必要的方法', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(typeof hook.fetchAgents).toBe('function');
      expect(typeof hook.selectAgent).toBe('function');
      expect(typeof hook.clearError).toBe('function');
    });
  });
  describe('智能体管理', function () {
    it('应该能够管理智能体列表', function () {
      var mockAgents = [{
        id: 'xiaoai',
        name: '小艾',
        specialty: '健康咨询',
        status: 'online'
      }, {
        id: 'xiaoke',
        name: '小克',
        specialty: '疾病诊断',
        status: 'online'
      }];
      React.useState.mockReturnValueOnce([mockAgents, jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.agents).toEqual(mockAgents);
      expect(hook.agents).toHaveLength(2);
    });
    it('应该能够选择智能体', function () {
      var _hook$selectedAgent, _hook$selectedAgent2;
      var mockAgents = [{
        id: 'xiaoai',
        name: '小艾',
        specialty: '健康咨询',
        status: 'online'
      }, {
        id: 'xiaoke',
        name: '小克',
        specialty: '疾病诊断',
        status: 'online'
      }];
      var selectedAgent = mockAgents[0];
      React.useState.mockReturnValueOnce([mockAgents, jest.fn()]).mockReturnValueOnce([selectedAgent, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.selectedAgent).toEqual(selectedAgent);
      expect((_hook$selectedAgent = hook.selectedAgent) == null ? void 0 : _hook$selectedAgent.id).toBe('xiaoai');
      expect((_hook$selectedAgent2 = hook.selectedAgent) == null ? void 0 : _hook$selectedAgent2.name).toBe('小艾');
    });
    it('应该能够处理空的智能体列表', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.agents).toEqual([]);
      expect(hook.selectedAgent).toBeNull();
    });
  });
  describe('加载状态', function () {
    it('应该正确处理加载状态', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([true, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.loading).toBe(true);
    });
    it('应该在非加载状态下返回false', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.loading).toBe(false);
    });
  });
  describe('错误处理', function () {
    it('应该能够处理错误状态', function () {
      var errorMessage = '获取智能体列表失败';
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([errorMessage, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.error).toBe(errorMessage);
    });
    it('应该能够清除错误', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(typeof hook.clearError).toBe('function');
      expect(hook.error).toBeNull();
    });
  });
  describe('智能体数据结构', function () {
    it('应该返回正确的智能体数据结构', function () {
      var mockAgents = [{
        id: 'xiaoai',
        name: '小艾',
        specialty: '健康咨询',
        status: 'online'
      }];
      React.useState.mockReturnValueOnce([mockAgents, jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(hook.agents[0]).toHaveProperty('id');
      expect(hook.agents[0]).toHaveProperty('name');
      expect(hook.agents[0]).toHaveProperty('specialty');
      expect(hook.agents[0]).toHaveProperty('status');
    });
    it('应该正确处理智能体状态', function () {
      var mockAgents = [{
        id: 'xiaoai',
        name: '小艾',
        specialty: '健康咨询',
        status: 'online'
      }, {
        id: 'laoke',
        name: '老克',
        specialty: '中医调理',
        status: 'offline'
      }];
      React.useState.mockReturnValueOnce([mockAgents, jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      var onlineAgents = hook.agents.filter(function (agent) {
        return agent.status === 'online';
      });
      var offlineAgents = hook.agents.filter(function (agent) {
        return agent.status === 'offline';
      });
      expect(onlineAgents).toHaveLength(1);
      expect(offlineAgents).toHaveLength(1);
      expect(onlineAgents[0].name).toBe('小艾');
      expect(offlineAgents[0].name).toBe('老克');
    });
  });
  describe('方法调用', function () {
    it('应该能够调用fetchAgents方法', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(function () {
        return hook.fetchAgents();
      }).not.toThrow();
    });
    it('应该能够调用selectAgent方法', function () {
      var mockAgents = [{
        id: 'xiaoai',
        name: '小艾',
        specialty: '健康咨询',
        status: 'online'
      }];
      React.useState.mockReturnValueOnce([mockAgents, jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(function () {
        return hook.selectAgent('xiaoai');
      }).not.toThrow();
    });
    it('应该能够调用clearError方法', function () {
      React.useState.mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([null, jest.fn()]).mockReturnValueOnce([false, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
      var hook = mockUseAgent();
      expect(function () {
        return hook.clearError();
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,