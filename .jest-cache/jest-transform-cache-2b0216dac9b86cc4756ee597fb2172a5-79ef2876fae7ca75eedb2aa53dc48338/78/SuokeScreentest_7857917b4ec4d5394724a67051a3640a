0bcad760411ab06ff0d577130f2c31b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var MockSuokeScreen = function MockSuokeScreen() {
  var _React$useState = _react.default.useState('xiaoai'),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    selectedAgent = _React$useState2[0],
    setSelectedAgent = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    consultationActive = _React$useState4[0],
    setConsultationActive = _React$useState4[1];
  var _React$useState5 = _react.default.useState([]),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    symptoms = _React$useState6[0],
    setSymptoms = _React$useState6[1];
  var _React$useState7 = _react.default.useState(''),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    diagnosis = _React$useState8[0],
    setDiagnosis = _React$useState8[1];
  var _React$useState9 = _react.default.useState(false),
    _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
    loading = _React$useState0[0],
    setLoading = _React$useState0[1];
  var _React$useState1 = _react.default.useState(''),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
    tcmFeature = _React$useState10[0],
    setTcmFeature = _React$useState10[1];
  var _React$useState11 = _react.default.useState(''),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    recordAction = _React$useState12[0],
    setRecordAction = _React$useState12[1];
  var agents = [{
    id: 'xiaoai',
    name: '小艾',
    specialty: '健康管理',
    status: 'online'
  }, {
    id: 'xiaoke',
    name: '小克',
    specialty: '疾病预防',
    status: 'online'
  }, {
    id: 'laoke',
    name: '老克',
    specialty: '中医诊断',
    status: 'online'
  }, {
    id: 'soer',
    name: '索儿',
    specialty: '康复指导',
    status: 'offline'
  }];
  var commonSymptoms = ['头痛', '发热', '咳嗽', '乏力', '失眠', '胸闷', '腹痛', '恶心', '眩晕', '心悸'];
  var handleSymptomToggle = function handleSymptomToggle(symptom) {
    setSymptoms(function (prev) {
      return prev.includes(symptom) ? prev.filter(function (s) {
        return s !== symptom;
      }) : [].concat((0, _toConsumableArray2.default)(prev), [symptom]);
    });
  };
  var handleStartConsultation = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      if (symptoms.length === 0) {
        return;
      }
      setLoading(true);
      setConsultationActive(true);
      try {
        yield new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve();
          }, 100);
        });
        if (symptoms.includes('头痛') && symptoms.includes('发热')) {
          setDiagnosis('根据症状分析，可能是感冒引起的头痛发热，建议多休息，多喝水。');
        } else if (symptoms.includes('失眠') && symptoms.includes('心悸')) {
          setDiagnosis('症状提示可能存在心神不宁，建议调整作息，必要时就医检查。');
        } else if (symptoms.length === 1) {
          setDiagnosis('请提供更多症状信息以便准确诊断。');
        } else {
          setDiagnosis('根据您的症状，建议进一步观察或咨询专业医生。');
        }
      } catch (error) {
        setDiagnosis('诊断服务暂时不可用，请稍后重试。');
      } finally {
        setLoading(false);
      }
    });
    return function handleStartConsultation() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleEndConsultation = function handleEndConsultation() {
    setConsultationActive(false);
    setSymptoms([]);
    setDiagnosis('');
  };
  var styles = _reactNative2.StyleSheet.create({
    container: {
      flex: 1,
      padding: 16
    },
    button: {
      padding: 12,
      margin: 4,
      borderRadius: 8,
      backgroundColor: '#F0F0F0'
    },
    buttonSelected: {
      backgroundColor: '#007AFF'
    },
    buttonDisabled: {
      opacity: 0.5,
      backgroundColor: '#CCCCCC'
    },
    symptomButton: {
      padding: 8,
      margin: 4,
      borderRadius: 6,
      backgroundColor: '#F0F0F0'
    },
    symptomButtonSelected: {
      backgroundColor: '#FF6B6B'
    }
  });
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "suoke-screen",
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "agent-selector",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "agent-title",
        children: "\u9009\u62E9\u667A\u80FD\u4F53"
      }), agents.map(function (agent) {
        return (0, _jsxRuntime.jsxs)(_reactNative2.Pressable, {
          testID: `agent-${agent.id}`,
          onPress: function onPress() {
            return setSelectedAgent(agent.id);
          },
          style: [styles.button, selectedAgent === agent.id ? styles.buttonSelected : {}, agent.status === 'offline' ? styles.buttonDisabled : {}],
          disabled: agent.status === 'offline',
          accessibilityState: {
            disabled: agent.status === 'offline'
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: `agent-name-${agent.id}`,
            children: agent.name
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: `agent-specialty-${agent.id}`,
            children: agent.specialty
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            testID: `agent-status-${agent.id}`,
            children: agent.status
          })]
        }, agent.id);
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "symptom-selector",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "symptom-title",
        children: "\u9009\u62E9\u75C7\u72B6"
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "symptom-grid",
        children: commonSymptoms.map(function (symptom) {
          return (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
            testID: `symptom-${symptom}`,
            onPress: function onPress() {
              return handleSymptomToggle(symptom);
            },
            style: [styles.symptomButton, symptoms.includes(symptom) ? styles.symptomButtonSelected : {}],
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: symptom
            })
          }, symptom);
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        testID: "selected-symptoms",
        children: ["\u5DF2\u9009\u62E9: ", symptoms.join(', ') || '无']
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "consultation-controls",
      children: !consultationActive ? (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "start-consultation",
        onPress: handleStartConsultation,
        style: [styles.button, symptoms.length === 0 || loading ? styles.buttonDisabled : {}],
        disabled: symptoms.length === 0 || loading,
        accessibilityState: {
          disabled: symptoms.length === 0 || loading
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: loading ? '正在分析...' : '开始咨询'
        })
      }) : (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "end-consultation",
        onPress: handleEndConsultation,
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u7ED3\u675F\u54A8\u8BE2"
        })
      })
    }), diagnosis && (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "diagnosis-result",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "diagnosis-title",
        children: "\u8BCA\u65AD\u5EFA\u8BAE"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "diagnosis-content",
        children: diagnosis
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "tcm-features",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "tcm-title",
        children: "\u4E2D\u533B\u7279\u8272"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "constitution-test",
        onPress: function onPress() {
          return setTcmFeature('constitution');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u4F53\u8D28\u6D4B\u8BD5"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "meridian-analysis",
        onPress: function onPress() {
          return setTcmFeature('meridian');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u7ECF\u7EDC\u5206\u6790"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "herb-recommendation",
        onPress: function onPress() {
          return setTcmFeature('herb');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u836F\u6750\u63A8\u8350"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "acupoint-guide",
        onPress: function onPress() {
          return setTcmFeature('acupoint');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u7A74\u4F4D\u6307\u5BFC"
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "health-profile",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "profile-title",
        children: "\u5065\u5EB7\u6863\u6848"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "view-history",
        onPress: function onPress() {
          return setRecordAction('view');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u67E5\u770B\u5386\u53F2"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "export-report",
        onPress: function onPress() {
          return setRecordAction('export');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u5BFC\u51FA\u62A5\u544A"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
        testID: "share-data",
        onPress: function onPress() {
          return setRecordAction('share');
        },
        style: styles.button,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u5206\u4EAB\u6570\u636E"
        })
      })]
    })]
  });
};
var mockStore = (0, _toolkit.configureStore)({
  reducer: {
    suoke: function suoke() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        selectedAgent: 'xiaoai',
        consultationHistory: [],
        healthProfile: {}
      };
      var action = arguments.length > 1 ? arguments[1] : undefined;
      return state;
    }
  }
});
describe('索克屏幕测试', function () {
  var renderWithProviders = function renderWithProviders(component) {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: mockStore,
      children: component
    }));
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('基本渲染', function () {
    it('应该正确渲染所有主要组件', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByTestId('suoke-screen')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('agent-selector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('symptom-selector')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('consultation-controls')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('tcm-features')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('health-profile')).toBeTruthy();
    });
    it('应该显示所有智能体选项', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByTestId('agent-xiaoai')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('agent-xiaoke')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('agent-laoke')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('agent-soer')).toBeTruthy();
      expect(_reactNative.screen.getByTestId('agent-name-xiaoai')).toHaveTextContent('小艾');
      expect(_reactNative.screen.getByTestId('agent-specialty-xiaoai')).toHaveTextContent('健康管理');
      expect(_reactNative.screen.getByTestId('agent-status-xiaoai')).toHaveTextContent('online');
    });
    it('应该显示常见症状选项', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByText('头痛')).toBeTruthy();
      expect(_reactNative.screen.getByText('发热')).toBeTruthy();
      expect(_reactNative.screen.getByText('咳嗽')).toBeTruthy();
      expect(_reactNative.screen.getByText('乏力')).toBeTruthy();
      expect(_reactNative.screen.getByText('失眠')).toBeTruthy();
    });
  });
  describe('智能体选择', function () {
    it('应该能够选择不同的智能体', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByTestId('agent-xiaoai')).toBeTruthy();
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('agent-xiaoke'));
      expect(_reactNative.screen.getByTestId('agent-xiaoke')).toBeTruthy();
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('agent-laoke'));
      expect(_reactNative.screen.getByTestId('agent-laoke')).toBeTruthy();
    });
    it('应该禁用离线的智能体', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var soerAgent = _reactNative.screen.getByTestId('agent-soer');
      expect(soerAgent).toBeTruthy();
      expect(soerAgent.props.accessibilityState.disabled).toBe(true);
    });
    it('应该显示智能体的专业领域', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByTestId('agent-specialty-xiaoai')).toHaveTextContent('健康管理');
      expect(_reactNative.screen.getByTestId('agent-specialty-xiaoke')).toHaveTextContent('疾病预防');
      expect(_reactNative.screen.getByTestId('agent-specialty-laoke')).toHaveTextContent('中医诊断');
      expect(_reactNative.screen.getByTestId('agent-specialty-soer')).toHaveTextContent('康复指导');
    });
  });
  describe('症状选择', function () {
    it('应该能够选择和取消选择症状', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var headacheSymptom = _reactNative.screen.getByTestId('symptom-头痛');
      var selectedSymptoms = _reactNative.screen.getByTestId('selected-symptoms');
      expect(selectedSymptoms).toHaveTextContent('已选择: 无');
      _reactNative.fireEvent.press(headacheSymptom);
      expect(selectedSymptoms).toHaveTextContent('已选择: 头痛');
      _reactNative.fireEvent.press(headacheSymptom);
      expect(selectedSymptoms).toHaveTextContent('已选择: 无');
    });
    it('应该能够选择多个症状', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var headacheSymptom = _reactNative.screen.getByTestId('symptom-头痛');
      var feverSymptom = _reactNative.screen.getByTestId('symptom-发热');
      var selectedSymptoms = _reactNative.screen.getByTestId('selected-symptoms');
      _reactNative.fireEvent.press(headacheSymptom);
      expect(selectedSymptoms).toHaveTextContent('已选择: 头痛');
      _reactNative.fireEvent.press(feverSymptom);
      expect(selectedSymptoms).toHaveTextContent('已选择: 头痛, 发热');
      expect(headacheSymptom).toBeTruthy();
      expect(feverSymptom).toBeTruthy();
    });
    it('应该正确显示已选择的症状列表', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var symptoms = ['头痛', '发热', '咳嗽'];
      var selectedSymptoms = _reactNative.screen.getByTestId('selected-symptoms');
      symptoms.forEach(function (symptom) {
        _reactNative.fireEvent.press(_reactNative.screen.getByTestId(`symptom-${symptom}`));
      });
      expect(selectedSymptoms).toHaveTextContent('已选择: 头痛, 发热, 咳嗽');
    });
  });
  describe('咨询功能', function () {
    it('应该在未选择症状时禁用开始咨询按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var startButton = _reactNative.screen.getByTestId('start-consultation');
      expect(startButton.props.accessibilityState.disabled).toBe(true);
      expect(_reactNative.screen.getByText('开始咨询')).toBeTruthy();
    });
    it('应该在选择症状后启用开始咨询按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var startButton = _reactNative.screen.getByTestId('start-consultation');
      var headacheSymptom = _reactNative.screen.getByTestId('symptom-头痛');
      _reactNative.fireEvent.press(headacheSymptom);
      expect(startButton.props.accessibilityState.disabled).toBe(false);
    });
    it('应该能够开始和结束咨询', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var headacheSymptom = _reactNative.screen.getByTestId('symptom-头痛');
      var feverSymptom = _reactNative.screen.getByTestId('symptom-发热');
      var startButton = _reactNative.screen.getByTestId('start-consultation');
      _reactNative.fireEvent.press(headacheSymptom);
      _reactNative.fireEvent.press(feverSymptom);
      _reactNative.fireEvent.press(startButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      var diagnosisContent = _reactNative.screen.getByTestId('diagnosis-content');
      expect(diagnosisContent).toHaveTextContent('根据症状分析，可能是感冒引起的头痛发热，建议多休息，多喝水。');
      var endButton = _reactNative.screen.getByTestId('end-consultation');
      _reactNative.fireEvent.press(endButton);
      expect(_reactNative.screen.queryByTestId('diagnosis-result')).toBeNull();
      expect(_reactNative.screen.getByTestId('selected-symptoms')).toHaveTextContent('已选择: 无');
    }));
    it('应该根据不同症状组合给出不同诊断', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var insomniaSymptom = _reactNative.screen.getByTestId('symptom-失眠');
      var palpitationSymptom = _reactNative.screen.getByTestId('symptom-心悸');
      var startButton = _reactNative.screen.getByTestId('start-consultation');
      _reactNative.fireEvent.press(insomniaSymptom);
      _reactNative.fireEvent.press(palpitationSymptom);
      _reactNative.fireEvent.press(startButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      var diagnosisContent = _reactNative.screen.getByTestId('diagnosis-content');
      expect(diagnosisContent).toHaveTextContent('症状提示可能存在心神不宁，建议调整作息，必要时就医检查。');
    }));
    it('应该显示加载状态', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var headacheSymptom = _reactNative.screen.getByTestId('symptom-头痛');
      _reactNative.fireEvent.press(headacheSymptom);
      var startButton = _reactNative.screen.getByTestId('start-consultation');
      _reactNative.fireEvent.press(startButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      expect(_reactNative.screen.getByTestId('diagnosis-content')).toHaveTextContent('请提供更多症状信息以便准确诊断。');
    }));
  });
  describe('中医特色功能', function () {
    it('应该显示所有中医特色功能按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByText('体质测试')).toBeTruthy();
      expect(_reactNative.screen.getByText('经络分析')).toBeTruthy();
      expect(_reactNative.screen.getByText('药材推荐')).toBeTruthy();
      expect(_reactNative.screen.getByText('穴位指导')).toBeTruthy();
    });
    it('应该能够点击中医功能按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var constitutionTest = _reactNative.screen.getByText('体质测试');
      var meridianAnalysis = _reactNative.screen.getByText('经络分析');
      var herbRecommendation = _reactNative.screen.getByText('药材推荐');
      var acupointGuide = _reactNative.screen.getByText('穴位指导');
      _reactNative.fireEvent.press(constitutionTest);
      _reactNative.fireEvent.press(meridianAnalysis);
      _reactNative.fireEvent.press(herbRecommendation);
      _reactNative.fireEvent.press(acupointGuide);
      expect(constitutionTest).toBeTruthy();
      expect(meridianAnalysis).toBeTruthy();
      expect(herbRecommendation).toBeTruthy();
      expect(acupointGuide).toBeTruthy();
    });
  });
  describe('健康档案功能', function () {
    it('应该显示健康档案相关按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      expect(_reactNative.screen.getByText('查看历史')).toBeTruthy();
      expect(_reactNative.screen.getByText('导出报告')).toBeTruthy();
      expect(_reactNative.screen.getByText('分享数据')).toBeTruthy();
    });
    it('应该能够点击健康档案功能按钮', function () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      var viewHistory = _reactNative.screen.getByText('查看历史');
      var exportReport = _reactNative.screen.getByText('导出报告');
      var shareData = _reactNative.screen.getByText('分享数据');
      _reactNative.fireEvent.press(viewHistory);
      _reactNative.fireEvent.press(exportReport);
      _reactNative.fireEvent.press(shareData);
      expect(viewHistory).toBeTruthy();
      expect(exportReport).toBeTruthy();
      expect(shareData).toBeTruthy();
    });
  });
  describe('交互流程', function () {
    it('应该支持完整的诊断流程', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('老克'));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('头痛'));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('发热'));
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('start-consultation'));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      expect(_reactNative.screen.getByTestId('diagnosis-content')).toHaveTextContent('根据症状分析，可能是感冒引起的头痛发热，建议多休息，多喝水。');
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('end-consultation'));
      expect(_reactNative.screen.queryByTestId('diagnosis-result')).toBeNull();
    }));
    it('应该在症状不足时提示需要更多信息', (0, _asyncToGenerator2.default)(function* () {
      renderWithProviders((0, _jsxRuntime.jsx)(MockSuokeScreen, {}));
      _reactNative.fireEvent.press(_reactNative.screen.getByText('眩晕'));
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('start-consultation'));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      var diagnosisContent = _reactNative.screen.getByTestId('diagnosis-content');
      expect(diagnosisContent).toHaveTextContent('请提供更多症状信息以便准确诊断。');
    }));
  });
  describe('错误处理', function () {
    it('应该处理诊断服务错误', (0, _asyncToGenerator2.default)(function* () {
      var ErrorMockSuokeScreen = function ErrorMockSuokeScreen() {
        var _React$useState13 = _react.default.useState([]),
          _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
          symptoms = _React$useState14[0],
          setSymptoms = _React$useState14[1];
        var _React$useState15 = _react.default.useState(''),
          _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
          diagnosis = _React$useState16[0],
          setDiagnosis = _React$useState16[1];
        var _React$useState17 = _react.default.useState(false),
          _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
          loading = _React$useState18[0],
          setLoading = _React$useState18[1];
        var _React$useState19 = _react.default.useState(false),
          _React$useState20 = (0, _slicedToArray2.default)(_React$useState19, 2),
          consultationActive = _React$useState20[0],
          setConsultationActive = _React$useState20[1];
        var handleSymptomToggle = function handleSymptomToggle(symptom) {
          setSymptoms(function (prev) {
            return prev.includes(symptom) ? prev.filter(function (s) {
              return s !== symptom;
            }) : [].concat((0, _toConsumableArray2.default)(prev), [symptom]);
          });
        };
        var handleStartConsultation = function () {
          var _ref8 = (0, _asyncToGenerator2.default)(function* () {
            if (symptoms.length === 0) return;
            setLoading(true);
            setConsultationActive(true);
            try {
              throw new Error('Network Error');
            } catch (error) {
              setDiagnosis('诊断服务暂时不可用，请稍后重试。');
            } finally {
              setLoading(false);
            }
          });
          return function handleStartConsultation() {
            return _ref8.apply(this, arguments);
          };
        }();
        return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: "suoke-screen",
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
            testID: "symptom-\u5934\u75DB",
            onPress: function onPress() {
              return handleSymptomToggle('头痛');
            },
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "\u5934\u75DB"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative2.Pressable, {
            testID: "start-consultation",
            onPress: handleStartConsultation,
            disabled: symptoms.length === 0 || loading,
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: loading ? '正在分析...' : '开始咨询'
            })
          }), diagnosis && (0, _jsxRuntime.jsx)(_reactNative2.View, {
            testID: "diagnosis-result",
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              testID: "diagnosis-content",
              children: diagnosis
            })
          })]
        });
      };
      renderWithProviders((0, _jsxRuntime.jsx)(ErrorMockSuokeScreen, {}));
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('symptom-头痛'));
      _reactNative.fireEvent.press(_reactNative.screen.getByTestId('start-consultation'));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByTestId('diagnosis-result')).toBeTruthy();
      }, {
        timeout: 3000
      });
      var diagnosisContent = _reactNative.screen.getByTestId('diagnosis-content');
      expect(diagnosisContent).toHaveTextContent('诊断服务暂时不可用，请稍后重试。');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,