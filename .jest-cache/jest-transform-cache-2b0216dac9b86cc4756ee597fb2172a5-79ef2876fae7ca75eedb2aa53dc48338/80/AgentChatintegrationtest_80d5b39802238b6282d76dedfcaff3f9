d3eafa7579890b244838d4ffaea90e96
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var MockAgentChatScreen = function MockAgentChatScreen(_ref) {
  var route = _ref.route;
  var agentId = route.params.agentId;
  var _React$useState = _react.default.useState([{
      id: '1',
      text: `你好！我是${agentId}，很高兴为您服务！`,
      sender: 'agent',
      timestamp: new Date().toISOString()
    }]),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    messages = _React$useState2[0],
    setMessages = _React$useState2[1];
  var _React$useState3 = _react.default.useState(''),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    inputText = _React$useState4[0],
    setInputText = _React$useState4[1];
  var sendMessage = function sendMessage() {
    if (inputText.trim()) {
      var newMessage = {
        id: Date.now().toString(),
        text: inputText,
        sender: 'user',
        timestamp: new Date().toISOString()
      };
      setMessages(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [newMessage]);
      });
      setInputText('');
      setTimeout(function () {
        var agentReply = {
          id: (Date.now() + 1).toString(),
          text: `我理解您说的"${inputText}"，让我为您提供帮助。`,
          sender: 'agent',
          timestamp: new Date().toISOString()
        };
        setMessages(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), [agentReply]);
        });
      }, 1000);
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "agent-chat-screen",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "chat-header",
      children: (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
        children: ["\u4E0E", agentId, "\u5BF9\u8BDD"]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "message-list",
      children: messages.map(function (message) {
        return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          testID: `message-${message.id}`,
          children: [(0, _jsxRuntime.jsx)(_reactNative2.View, {
            testID: `message-sender-${message.sender}`,
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: message.sender === 'agent' ? agentId : '我'
            })
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            testID: "message-text",
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: message.text
            })
          })]
        }, message.id);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "input-container",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
        testID: "message-input",
        value: inputText,
        onChangeText: setInputText,
        placeholder: "\u8F93\u5165\u6D88\u606F..."
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "send-button",
        onPress: sendMessage,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\u53D1\u9001"
        })
      })]
    })]
  });
};
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
  setOptions: jest.fn()
};
var mockRoute = {
  params: {
    agentId: '小艾'
  }
};
describe('AgentChat Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('应该正确渲染聊天界面', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('agent-chat-screen')).toBeTruthy();
    expect(getByTestId('chat-header')).toBeTruthy();
    expect(getByText('与小艾对话')).toBeTruthy();
    expect(getByTestId('message-list')).toBeTruthy();
    expect(getByTestId('input-container')).toBeTruthy();
  });
  it('应该显示初始欢迎消息', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByText = _render2.getByText;
    expect(getByText('你好！我是小艾，很高兴为您服务！')).toBeTruthy();
  });
  it('应该能够发送消息', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    var messageInput = getByTestId('message-input');
    var sendButton = getByTestId('send-button');
    _reactNative.fireEvent.changeText(messageInput, '你好，我想咨询健康问题');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('你好，我想咨询健康问题')).toBeTruthy();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('我理解您说的"你好，我想咨询健康问题"，让我为您提供帮助。')).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
  it('应该清空输入框在发送消息后', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId;
    var messageInput = getByTestId('message-input');
    var sendButton = getByTestId('send-button');
    _reactNative.fireEvent.changeText(messageInput, '测试消息');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(messageInput.props.value).toBe('');
    });
  }));
  it('应该不发送空消息', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render5.getByTestId,
      queryAllByTestId = _render5.queryAllByTestId;
    var sendButton = getByTestId('send-button');
    var initialMessages = queryAllByTestId(/^message-/);
    var initialCount = initialMessages.length;
    _reactNative.fireEvent.press(sendButton);
    var afterMessages = queryAllByTestId(/^message-/);
    expect(afterMessages).toHaveLength(initialCount);
  });
  it('应该正确显示消息发送者', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render6.getByTestId,
      getByText = _render6.getByText;
    var messageInput = getByTestId('message-input');
    var sendButton = getByTestId('send-button');
    _reactNative.fireEvent.changeText(messageInput, '用户消息');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('我')).toBeTruthy();
    });
    yield (0, _reactNative.waitFor)(function () {
      var agentSenders = getByTestId('message-sender-agent');
      expect(agentSenders).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
  it('应该处理不同智能体的聊天', function () {
    var xiaokRoute = {
      params: {
        agentId: '小克'
      }
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: xiaokRoute,
        navigation: mockNavigation
      })),
      getByText = _render7.getByText;
    expect(getByText('与小克对话')).toBeTruthy();
    expect(getByText('你好！我是小克，很高兴为您服务！')).toBeTruthy();
  });
  it('应该按时间顺序显示消息', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render8.getByTestId,
      queryAllByTestId = _render8.queryAllByTestId;
    var messageInput = getByTestId('message-input');
    var sendButton = getByTestId('send-button');
    var initialMessages = queryAllByTestId(/^message-/);
    var initialCount = initialMessages.length;
    _reactNative.fireEvent.changeText(messageInput, '第一条消息');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      var messages = queryAllByTestId(/^message-/);
      expect(messages.length).toBeGreaterThan(initialCount);
    });
    yield (0, _reactNative.waitFor)(function () {
      var messages = queryAllByTestId(/^message-/);
      expect(messages.length).toBeGreaterThanOrEqual(initialCount + 2);
    }, {
      timeout: 2000
    });
    _reactNative.fireEvent.changeText(messageInput, '第二条消息');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      var messages = queryAllByTestId(/^message-/);
      expect(messages.length).toBeGreaterThanOrEqual(initialCount + 3);
    });
  }));
  it('应该处理长消息', (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockAgentChatScreen, {
        route: mockRoute,
        navigation: mockNavigation
      })),
      getByTestId = _render9.getByTestId,
      getByText = _render9.getByText;
    var messageInput = getByTestId('message-input');
    var sendButton = getByTestId('send-button');
    var longMessage = '这是一条很长的消息，'.repeat(10);
    _reactNative.fireEvent.changeText(messageInput, longMessage);
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText(longMessage)).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,