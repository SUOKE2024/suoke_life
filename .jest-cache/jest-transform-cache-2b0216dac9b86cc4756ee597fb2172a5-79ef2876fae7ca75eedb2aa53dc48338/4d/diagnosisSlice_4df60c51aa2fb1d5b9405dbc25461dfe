a0889bf65e5a88f745f11745f4c4fb58
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadTongueImage = exports.updateSessionData = exports.submitDiagnosisData = exports.startDiagnosisSession = exports.setCurrentSession = exports.selectDiagnosisSessions = exports.selectDiagnosisResults = exports.selectDiagnosisLoading = exports.selectDiagnosisError = exports.selectDiagnosis = exports.selectCurrentSessionDetails = exports.selectCurrentSession = exports.recordVoiceData = exports.fetchDiagnosisHistory = exports.default = exports.completeDiagnosisSession = exports.clearError = exports.cancelSession = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _apiClient = require("../../services/apiClient");
var initialState = {
  currentSession: undefined,
  sessions: [],
  results: [],
  loading: false,
  error: undefined
};
var startDiagnosisSession = exports.startDiagnosisSession = (0, _toolkit.createAsyncThunk)("diagnosis/startSession", function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_, _ref) {
    var rejectWithValue = _ref.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/diagnosis/session/start");
      if (!response.success) {
        var _response$error;
        throw new Error(((_response$error = response.error) == null ? void 0 : _response$error.message) || "开始诊断会话失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "开始诊断会话失败");
    }
  });
  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}());
var submitDiagnosisData = exports.submitDiagnosisData = (0, _toolkit.createAsyncThunk)("diagnosis/submitData", function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (_ref3, _ref4) {
    var sessionId = _ref3.sessionId,
      type = _ref3.type,
      data = _ref3.data;
    var rejectWithValue = _ref4.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post(`/diagnosis/${type}/diagnose`, {
        sessionId: sessionId,
        type: type,
        data: data
      });
      if (!response.success) {
        var _response$error2;
        throw new Error(((_response$error2 = response.error) == null ? void 0 : _response$error2.message) || "提交诊断数据失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "提交诊断数据失败");
    }
  });
  return function (_x3, _x4) {
    return _ref5.apply(this, arguments);
  };
}());
var completeDiagnosisSession = exports.completeDiagnosisSession = (0, _toolkit.createAsyncThunk)("diagnosis/completeSession", function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (sessionId, _ref6) {
    var rejectWithValue = _ref6.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post(`/diagnosis/session/${sessionId}/complete`);
      if (!response.success) {
        var _response$error3;
        throw new Error(((_response$error3 = response.error) == null ? void 0 : _response$error3.message) || "完成诊断会话失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "完成诊断会话失败");
    }
  });
  return function (_x5, _x6) {
    return _ref7.apply(this, arguments);
  };
}());
var fetchDiagnosisHistory = exports.fetchDiagnosisHistory = (0, _toolkit.createAsyncThunk)("diagnosis/fetchHistory", (0, _asyncToGenerator2.default)(function* () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref9 = arguments.length > 1 ? arguments[1] : undefined,
    rejectWithValue = _ref9.rejectWithValue;
  try {
    var queryParams = new URLSearchParams();
    if (params.limit) {
      queryParams.append('limit', params.limit.toString());
    }
    if (params.offset) {
      queryParams.append('offset', params.offset.toString());
    }
    var response = yield _apiClient.apiClient.get(`/diagnosis/sessions?${queryParams.toString()}`);
    if (!response.success) {
      var _response$error4;
      throw new Error(((_response$error4 = response.error) == null ? void 0 : _response$error4.message) || "获取诊断历史失败");
    }
    return response.data;
  } catch (error) {
    return rejectWithValue(error.message || "获取诊断历史失败");
  }
}));
var uploadTongueImage = exports.uploadTongueImage = (0, _toolkit.createAsyncThunk)("diagnosis/uploadTongueImage", function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (_ref0, _ref1) {
    var _sessionId = _ref0.sessionId,
      imageFile = _ref0.imageFile;
    var rejectWithValue = _ref1.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.uploadFile("/diagnosis/look/upload-tongue-image", imageFile);
      if (!response.success) {
        var _response$error5;
        throw new Error(((_response$error5 = response.error) == null ? void 0 : _response$error5.message) || "上传舌象图片失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "上传舌象图片失败");
    }
  });
  return function (_x7, _x8) {
    return _ref10.apply(this, arguments);
  };
}());
var recordVoiceData = exports.recordVoiceData = (0, _toolkit.createAsyncThunk)("diagnosis/recordVoice", function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (_ref11, _ref12) {
    var _sessionId = _ref11.sessionId,
      audioFile = _ref11.audioFile;
    var rejectWithValue = _ref12.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.uploadFile("/diagnosis/listen/upload-voice", audioFile);
      if (!response.success) {
        var _response$error6;
        throw new Error(((_response$error6 = response.error) == null ? void 0 : _response$error6.message) || "录制语音失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "录制语音失败");
    }
  });
  return function (_x9, _x0) {
    return _ref13.apply(this, arguments);
  };
}());
var diagnosisSlice = (0, _toolkit.createSlice)({
  name: "diagnosis",
  initialState: initialState,
  reducers: {
    setCurrentSession: function setCurrentSession(state, action) {
      state.currentSession = action.payload;
    },
    updateSessionData: function updateSessionData(state, action) {
      var _action$payload = action.payload,
        sessionId = _action$payload.sessionId,
        type = _action$payload.type,
        data = _action$payload.data;
      var session = state.sessions.find(function (s) {
        return s.id === sessionId;
      });
      if (session) {
        session.data[type] = data;
      }
    },
    clearError: function clearError(state) {
      state.error = undefined;
    },
    cancelSession: function cancelSession(state) {
      if (state.currentSession) {
        var session = state.sessions.find(function (s) {
          return s.id === state.currentSession;
        });
        if (session) {
          session.status = "cancelled";
          session.endTime = new Date().toISOString();
        }
        state.currentSession = undefined;
      }
    }
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(startDiagnosisSession.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(startDiagnosisSession.fulfilled, function (state, action) {
      state.loading = false;
      state.currentSession = action.payload.id;
      state.sessions.unshift(action.payload);
      state.error = undefined;
    }).addCase(startDiagnosisSession.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(submitDiagnosisData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(submitDiagnosisData.fulfilled, function (state, action) {
      state.loading = false;
      var session = state.sessions.find(function (s) {
        return s.id === action.payload.sessionId;
      });
      if (session) {
        session.data[action.payload.type] = action.payload.data;
      }
      state.error = undefined;
    }).addCase(submitDiagnosisData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(completeDiagnosisSession.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(completeDiagnosisSession.fulfilled, function (state, action) {
      state.loading = false;
      if (state.currentSession) {
        var session = state.sessions.find(function (s) {
          return s.id === state.currentSession;
        });
        if (session) {
          session.status = "completed";
          session.endTime = new Date().toISOString();
        }
        state.currentSession = undefined;
      }
      state.results.unshift(action.payload);
      state.error = undefined;
    }).addCase(completeDiagnosisSession.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(fetchDiagnosisHistory.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(fetchDiagnosisHistory.fulfilled, function (state, action) {
      state.loading = false;
      state.sessions = action.payload;
      state.error = undefined;
    }).addCase(fetchDiagnosisHistory.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(uploadTongueImage.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(uploadTongueImage.fulfilled, function (state, _action) {
      state.loading = false;
      state.error = undefined;
    }).addCase(uploadTongueImage.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(recordVoiceData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(recordVoiceData.fulfilled, function (state, _action) {
      state.loading = false;
      state.error = undefined;
    }).addCase(recordVoiceData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
  }
});
var _diagnosisSlice$actio = diagnosisSlice.actions,
  setCurrentSession = exports.setCurrentSession = _diagnosisSlice$actio.setCurrentSession,
  updateSessionData = exports.updateSessionData = _diagnosisSlice$actio.updateSessionData,
  clearError = exports.clearError = _diagnosisSlice$actio.clearError,
  cancelSession = exports.cancelSession = _diagnosisSlice$actio.cancelSession;
var selectDiagnosis = exports.selectDiagnosis = function selectDiagnosis(state) {
  return state.diagnosis;
};
var selectCurrentSession = exports.selectCurrentSession = function selectCurrentSession(state) {
  return state.diagnosis.currentSession;
};
var selectDiagnosisSessions = exports.selectDiagnosisSessions = function selectDiagnosisSessions(state) {
  return state.diagnosis.sessions;
};
var selectDiagnosisResults = exports.selectDiagnosisResults = function selectDiagnosisResults(state) {
  return state.diagnosis.results;
};
var selectDiagnosisLoading = exports.selectDiagnosisLoading = function selectDiagnosisLoading(state) {
  return state.diagnosis.loading;
};
var selectDiagnosisError = exports.selectDiagnosisError = function selectDiagnosisError(state) {
  return state.diagnosis.error;
};
var selectCurrentSessionDetails = exports.selectCurrentSessionDetails = function selectCurrentSessionDetails(state) {
  var currentSessionId = state.diagnosis.currentSession;
  return currentSessionId ? state.diagnosis.sessions.find(function (s) {
    return s.id === currentSessionId;
  }) : undefined;
};
var _default = exports.default = diagnosisSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,