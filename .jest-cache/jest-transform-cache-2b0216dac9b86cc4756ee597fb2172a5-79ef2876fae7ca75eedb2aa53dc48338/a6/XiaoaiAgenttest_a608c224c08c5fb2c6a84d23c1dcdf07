1f08e7267eff2c5be79da1faee8ede0e
_getJestObj().mock('../services/DiagnosisServiceClient', function () {
  return {
    diagnosisServiceClient: {
      inquiry: {
        startSession: jest.fn().mockResolvedValue({
          session_id: 'test_session'
        }),
        interact: jest.fn().mockResolvedValue({
          response: 'test_response'
        }),
        endSession: jest.fn().mockResolvedValue({
          sessionId: 'test_session',
          detectedSymptoms: [],
          tcmPatterns: [],
          healthProfile: {},
          recommendations: [],
          confidence: 0.8
        })
      },
      look: {
        analyzeImage: jest.fn().mockResolvedValue({
          analysisId: 'test_analysis',
          overallAssessment: '测试分析结果',
          confidence: 0.8
        })
      },
      listen: {
        analyzeAudio: jest.fn().mockResolvedValue({
          analysisId: 'test_analysis',
          voiceFeatures: {},
          emotionalState: {},
          overallAssessment: '测试分析结果',
          confidence: 0.8
        })
      },
      palpation: {
        analyzePalpation: jest.fn().mockResolvedValue({
          analysisId: 'test_analysis',
          overallAssessment: '测试分析结果',
          confidence: 0.8
        })
      },
      healthCheck: jest.fn().mockResolvedValue({
        inquiry: true,
        look: true,
        listen: true,
        palpation: true
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _XiaoaiAgent = require("../XiaoaiAgent");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('XiaoaiAgent', function () {
  var mockContext = {
    userId: 'test_user',
    sessionId: 'test_session',
    conversationHistory: [],
    timestamp: Date.now()
  };
  var mockUserProfile = {
    id: 'test_user',
    basicInfo: {
      age: 30,
      gender: 'male',
      height: 175,
      weight: 70
    },
    medicalHistory: [],
    preferences: {
      language: 'zh-CN',
      communicationStyle: 'caring',
      diagnosisPreferences: {
        autoStartDiagnosis: false,
        preferredDiagnosisTypes: [],
        privacyLevel: 'medium'
      }
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('chat', function () {
    it('应该能够处理基本的聊天消息', (0, _asyncToGenerator2.default)(function* () {
      var response = yield _XiaoaiAgent.xiaoaiAgent.chat('你好', mockContext);
      expect(response).toBeDefined();
      expect(response.text).toContain('亲爱的朋友');
      expect(response.timestamp).toBeDefined();
    }));
    it('应该能够识别症状相关的消息', (0, _asyncToGenerator2.default)(function* () {
      var response = yield _XiaoaiAgent.xiaoaiAgent.chat('我最近头痛', mockContext);
      expect(response).toBeDefined();
      expect(response.text).toContain('头痛');
      expect(response.suggestions).toBeDefined();
    }));
    it('应该能够处理多模态输入', (0, _asyncToGenerator2.default)(function* () {
      var contextWithImage = Object.assign({}, mockContext, {
        hasImages: true,
        images: [{
          id: 'test_image',
          type: 'tongue',
          uri: 'test://image.jpg',
          metadata: {
            width: 100,
            height: 100,
            timestamp: Date.now()
          }
        }]
      });
      var response = yield _XiaoaiAgent.xiaoaiAgent.chat('帮我看看舌头', contextWithImage);
      expect(response).toBeDefined();
      expect(response.text).toContain('图片');
    }));
  });
  describe('generateSuggestions', function () {
    it('应该能够基于用户年龄生成建议', (0, _asyncToGenerator2.default)(function* () {
      var suggestions = yield _XiaoaiAgent.xiaoaiAgent.generateSuggestions(mockUserProfile);
      expect(suggestions).toBeDefined();
      expect(Array.isArray(suggestions)).toBe(true);
    }));
    it('应该为40岁以上用户生成体检建议', (0, _asyncToGenerator2.default)(function* () {
      var olderProfile = Object.assign({}, mockUserProfile, {
        basicInfo: Object.assign({}, mockUserProfile.basicInfo, {
          age: 45
        })
      });
      var suggestions = yield _XiaoaiAgent.xiaoaiAgent.generateSuggestions(olderProfile);
      var checkupSuggestion = suggestions.find(function (s) {
        return s.title.includes('体检');
      });
      expect(checkupSuggestion).toBeDefined();
      expect(checkupSuggestion == null ? void 0 : checkupSuggestion.priority).toBe('high');
    }));
    it('应该为女性用户生成铁质补充建议', (0, _asyncToGenerator2.default)(function* () {
      var femaleProfile = Object.assign({}, mockUserProfile, {
        basicInfo: Object.assign({}, mockUserProfile.basicInfo, {
          gender: 'female'
        })
      });
      var suggestions = yield _XiaoaiAgent.xiaoaiAgent.generateSuggestions(femaleProfile);
      var ironSuggestion = suggestions.find(function (s) {
        return s.title.includes('铁质');
      });
      expect(ironSuggestion).toBeDefined();
    }));
  });
  describe('四诊功能', function () {
    it('应该能够启动问诊会话', (0, _asyncToGenerator2.default)(function* () {
      var result = yield _XiaoaiAgent.xiaoaiAgent.startInquirySession('test_user');
      expect(result).toBeDefined();
      expect(result.session_id).toBe('test_session');
    }));
    it('应该能够分析图像', (0, _asyncToGenerator2.default)(function* () {
      var imageData = {
        id: 'test_image',
        type: 'tongue',
        uri: 'test://image.jpg'
      };
      var result = yield _XiaoaiAgent.xiaoaiAgent.analyzeImage(imageData, 'tongue');
      expect(result).toBeDefined();
      expect(result.analysisId).toBe('test_analysis');
    }));
    it('应该能够分析音频', (0, _asyncToGenerator2.default)(function* () {
      var audioData = {
        id: 'test_audio',
        type: 'voice',
        uri: 'test://audio.mp3'
      };
      var result = yield _XiaoaiAgent.xiaoaiAgent.analyzeAudio(audioData, 'voice');
      expect(result).toBeDefined();
      expect(result.analysisId).toBe('test_analysis');
    }));
    it('应该能够处理触诊数据', (0, _asyncToGenerator2.default)(function* () {
      var palpationData = {
        id: 'test_palpation',
        type: 'pulse',
        sensorData: {
          rate: 72,
          rhythm: 'regular'
        }
      };
      var result = yield _XiaoaiAgent.xiaoaiAgent.processPalpationData(palpationData);
      expect(result).toBeDefined();
      expect(result.analysisId).toBe('test_analysis');
    }));
  });
  describe('无障碍功能', function () {
    it('应该能够获取无障碍状态', (0, _asyncToGenerator2.default)(function* () {
      var status = yield _XiaoaiAgent.xiaoaiAgent.getAccessibilityStatus();
      expect(status).toBeDefined();
      expect(status.serviceAvailable).toBeDefined();
      if (status.serviceAvailable) {
        expect(status.visual).toBeDefined();
        expect(status.hearing).toBeDefined();
        expect(status.motor).toBeDefined();
        expect(status.cognitive).toBeDefined();
      }
    }));
    it('应该能够适配视觉障碍界面', (0, _asyncToGenerator2.default)(function* () {
      var adaptations = yield _XiaoaiAgent.xiaoaiAgent.adaptInterfaceForDisability({
        type: 'visual',
        fontSize: 'large',
        highContrast: true,
        voiceOutput: true
      });
      expect(adaptations).toBeDefined();
      expect(adaptations.fontSize).toBe('large');
      expect(adaptations.highContrast).toBe(true);
      expect(adaptations.screenReader).toBe(true);
    }));
  });
  describe('健康状态监控', function () {
    it('应该能够获取健康状态', (0, _asyncToGenerator2.default)(function* () {
      var status = yield _XiaoaiAgent.xiaoaiAgent.getHealthStatus();
      expect(status).toBeDefined();
      expect(status.agent).toBeDefined();
      expect(status.services).toBeDefined();
      expect(status.timestamp).toBeDefined();
    }));
  });
  describe('个性化设置', function () {
    it('应该能够设置个性化特征', function () {
      var traits = {
        style: 'formal',
        tone: 'professional'
      };
      expect(function () {
        _XiaoaiAgent.xiaoaiAgent.setPersonality(traits);
      }).not.toThrow();
    });
  });
  describe('错误处理', function () {
    it('应该能够正常处理症状消息', (0, _asyncToGenerator2.default)(function* () {
      var response = yield _XiaoaiAgent.xiaoaiAgent.chat('我头痛', mockContext);
      expect(response).toBeDefined();
      expect(response.text).toContain('头痛');
      expect(response.suggestions).toBeDefined();
      expect(Array.isArray(response.suggestions)).toBe(true);
    }));
  });
  describe('资源清理', function () {
    it('应该能够清理用户资源', (0, _asyncToGenerator2.default)(function* () {
      yield expect(_XiaoaiAgent.xiaoaiAgent.cleanup('test_user')).resolves.not.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJkaWFnbm9zaXNTZXJ2aWNlQ2xpZW50IiwiaW5xdWlyeSIsInN0YXJ0U2Vzc2lvbiIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwic2Vzc2lvbl9pZCIsImludGVyYWN0IiwicmVzcG9uc2UiLCJlbmRTZXNzaW9uIiwic2Vzc2lvbklkIiwiZGV0ZWN0ZWRTeW1wdG9tcyIsInRjbVBhdHRlcm5zIiwiaGVhbHRoUHJvZmlsZSIsInJlY29tbWVuZGF0aW9ucyIsImNvbmZpZGVuY2UiLCJsb29rIiwiYW5hbHl6ZUltYWdlIiwiYW5hbHlzaXNJZCIsIm92ZXJhbGxBc3Nlc3NtZW50IiwibGlzdGVuIiwiYW5hbHl6ZUF1ZGlvIiwidm9pY2VGZWF0dXJlcyIsImVtb3Rpb25hbFN0YXRlIiwicGFscGF0aW9uIiwiYW5hbHl6ZVBhbHBhdGlvbiIsImhlYWx0aENoZWNrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfWGlhb2FpQWdlbnQiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwibW9ja0NvbnRleHQiLCJ1c2VySWQiLCJjb252ZXJzYXRpb25IaXN0b3J5IiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1vY2tVc2VyUHJvZmlsZSIsImlkIiwiYmFzaWNJbmZvIiwiYWdlIiwiZ2VuZGVyIiwiaGVpZ2h0Iiwid2VpZ2h0IiwibWVkaWNhbEhpc3RvcnkiLCJwcmVmZXJlbmNlcyIsImxhbmd1YWdlIiwiY29tbXVuaWNhdGlvblN0eWxlIiwiZGlhZ25vc2lzUHJlZmVyZW5jZXMiLCJhdXRvU3RhcnREaWFnbm9zaXMiLCJwcmVmZXJyZWREaWFnbm9zaXNUeXBlcyIsInByaXZhY3lMZXZlbCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJkZWZhdWx0IiwieGlhb2FpQWdlbnQiLCJjaGF0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJ0ZXh0IiwidG9Db250YWluIiwic3VnZ2VzdGlvbnMiLCJjb250ZXh0V2l0aEltYWdlIiwiT2JqZWN0IiwiYXNzaWduIiwiaGFzSW1hZ2VzIiwiaW1hZ2VzIiwidHlwZSIsInVyaSIsIm1ldGFkYXRhIiwid2lkdGgiLCJnZW5lcmF0ZVN1Z2dlc3Rpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwidG9CZSIsIm9sZGVyUHJvZmlsZSIsImNoZWNrdXBTdWdnZXN0aW9uIiwiZmluZCIsInMiLCJ0aXRsZSIsImluY2x1ZGVzIiwicHJpb3JpdHkiLCJmZW1hbGVQcm9maWxlIiwiaXJvblN1Z2dlc3Rpb24iLCJyZXN1bHQiLCJzdGFydElucXVpcnlTZXNzaW9uIiwiaW1hZ2VEYXRhIiwiYXVkaW9EYXRhIiwicGFscGF0aW9uRGF0YSIsInNlbnNvckRhdGEiLCJyYXRlIiwicmh5dGhtIiwicHJvY2Vzc1BhbHBhdGlvbkRhdGEiLCJzdGF0dXMiLCJnZXRBY2Nlc3NpYmlsaXR5U3RhdHVzIiwic2VydmljZUF2YWlsYWJsZSIsInZpc3VhbCIsImhlYXJpbmciLCJtb3RvciIsImNvZ25pdGl2ZSIsImFkYXB0YXRpb25zIiwiYWRhcHRJbnRlcmZhY2VGb3JEaXNhYmlsaXR5IiwiZm9udFNpemUiLCJoaWdoQ29udHJhc3QiLCJ2b2ljZU91dHB1dCIsInNjcmVlblJlYWRlciIsImdldEhlYWx0aFN0YXR1cyIsImFnZW50Iiwic2VydmljZXMiLCJ0cmFpdHMiLCJzdHlsZSIsInRvbmUiLCJzZXRQZXJzb25hbGl0eSIsIm5vdCIsInRvVGhyb3ciLCJjbGVhbnVwIiwicmVzb2x2ZXMiXSwic291cmNlcyI6WyJYaWFvYWlBZ2VudC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHhpYW9haUFnZW50IH0gZnJvbSAnLi4vWGlhb2FpQWdlbnQnO1xuaW1wb3J0IHsgQ2hhdENvbnRleHQsIFVzZXJQcm9maWxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vLyBNb2NrIOWbm+iviuacjeWKoeWuouaIt+err1xuamVzdC5tb2NrKCcuLi9zZXJ2aWNlcy9EaWFnbm9zaXNTZXJ2aWNlQ2xpZW50JywgKCkgPT4gKHtcbiAgZGlhZ25vc2lzU2VydmljZUNsaWVudDoge1xuICAgIGlucXVpcnk6IHtcbiAgICAgIHN0YXJ0U2Vzc2lvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgc2Vzc2lvbl9pZDogJ3Rlc3Rfc2Vzc2lvbicgfSksXG4gICAgICBpbnRlcmFjdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgcmVzcG9uc2U6ICd0ZXN0X3Jlc3BvbnNlJyB9KSxcbiAgICAgIGVuZFNlc3Npb246IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHNlc3Npb25JZDogJ3Rlc3Rfc2Vzc2lvbicsXG4gICAgICAgIGRldGVjdGVkU3ltcHRvbXM6IFtdLFxuICAgICAgICB0Y21QYXR0ZXJuczogW10sXG4gICAgICAgIGhlYWx0aFByb2ZpbGU6IHt9LFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBjb25maWRlbmNlOiAwLjhcbiAgICAgIH0pXG4gICAgfSxcbiAgICBsb29rOiB7XG4gICAgICBhbmFseXplSW1hZ2U6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGFuYWx5c2lzSWQ6ICd0ZXN0X2FuYWx5c2lzJyxcbiAgICAgICAgb3ZlcmFsbEFzc2Vzc21lbnQ6ICfmtYvor5XliIbmnpDnu5PmnpwnLFxuICAgICAgICBjb25maWRlbmNlOiAwLjhcbiAgICAgIH0pXG4gICAgfSxcbiAgICBsaXN0ZW46IHtcbiAgICAgIGFuYWx5emVBdWRpbzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgYW5hbHlzaXNJZDogJ3Rlc3RfYW5hbHlzaXMnLFxuICAgICAgICB2b2ljZUZlYXR1cmVzOiB7fSxcbiAgICAgICAgZW1vdGlvbmFsU3RhdGU6IHt9LFxuICAgICAgICBvdmVyYWxsQXNzZXNzbWVudDogJ+a1i+ivleWIhuaekOe7k+aenCcsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOFxuICAgICAgfSlcbiAgICB9LFxuICAgIHBhbHBhdGlvbjoge1xuICAgICAgYW5hbHl6ZVBhbHBhdGlvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgYW5hbHlzaXNJZDogJ3Rlc3RfYW5hbHlzaXMnLFxuICAgICAgICBvdmVyYWxsQXNzZXNzbWVudDogJ+a1i+ivleWIhuaekOe7k+aenCcsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOFxuICAgICAgfSlcbiAgICB9LFxuICAgIGhlYWx0aENoZWNrOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgaW5xdWlyeTogdHJ1ZSxcbiAgICAgIGxvb2s6IHRydWUsXG4gICAgICBsaXN0ZW46IHRydWUsXG4gICAgICBwYWxwYXRpb246IHRydWVcbiAgICB9KVxuICB9XG59KSk7XG5cbmRlc2NyaWJlKCdYaWFvYWlBZ2VudCcsICgpID0+IHtcbiAgY29uc3QgbW9ja0NvbnRleHQ6IENoYXRDb250ZXh0ID0ge1xuICAgIHVzZXJJZDogJ3Rlc3RfdXNlcicsXG4gICAgc2Vzc2lvbklkOiAndGVzdF9zZXNzaW9uJyxcbiAgICBjb252ZXJzYXRpb25IaXN0b3J5OiBbXSxcbiAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgfTtcblxuICBjb25zdCBtb2NrVXNlclByb2ZpbGU6IFVzZXJQcm9maWxlID0ge1xuICAgIGlkOiAndGVzdF91c2VyJyxcbiAgICBiYXNpY0luZm86IHtcbiAgICAgIGFnZTogMzAsXG4gICAgICBnZW5kZXI6ICdtYWxlJyxcbiAgICAgIGhlaWdodDogMTc1LFxuICAgICAgd2VpZ2h0OiA3MFxuICAgIH0sXG4gICAgbWVkaWNhbEhpc3Rvcnk6IFtdLFxuICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICBsYW5ndWFnZTogJ3poLUNOJyxcbiAgICAgIGNvbW11bmljYXRpb25TdHlsZTogJ2NhcmluZycsXG4gICAgICBkaWFnbm9zaXNQcmVmZXJlbmNlczoge1xuICAgICAgICBhdXRvU3RhcnREaWFnbm9zaXM6IGZhbHNlLFxuICAgICAgICBwcmVmZXJyZWREaWFnbm9zaXNUeXBlczogW10sXG4gICAgICAgIHByaXZhY3lMZXZlbDogJ21lZGl1bSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjaGF0JywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xog73lpJ/lpITnkIbln7rmnKznmoTogYrlpKnmtojmga8nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHhpYW9haUFnZW50LmNoYXQoJ+S9oOWlvScsIG1vY2tDb250ZXh0KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnRleHQpLnRvQ29udGFpbign5Lqy54ix55qE5pyL5Y+LJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UudGltZXN0YW1wKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+ivhuWIq+eXh+eKtuebuOWFs+eahOa2iOaBrycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgeGlhb2FpQWdlbnQuY2hhdCgn5oiR5pyA6L+R5aS055ebJywgbW9ja0NvbnRleHQpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UudGV4dCkudG9Db250YWluKCflpLTnl5snKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdWdnZXN0aW9ucykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/lpITnkIblpJrmqKHmgIHovpPlhaUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0V2l0aEltYWdlOiBDaGF0Q29udGV4dCA9IHtcbiAgICAgICAgLi4ubW9ja0NvbnRleHQsXG4gICAgICAgIGhhc0ltYWdlczogdHJ1ZSxcbiAgICAgICAgaW1hZ2VzOiBbe1xuICAgICAgICAgIGlkOiAndGVzdF9pbWFnZScsXG4gICAgICAgICAgdHlwZTogJ3Rvbmd1ZScsXG4gICAgICAgICAgdXJpOiAndGVzdDovL2ltYWdlLmpwZycsXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgeGlhb2FpQWdlbnQuY2hhdCgn5biu5oiR55yL55yL6IiM5aS0JywgY29udGV4dFdpdGhJbWFnZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS50ZXh0KS50b0NvbnRhaW4oJ+WbvueJhycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVTdWdnZXN0aW9ucycsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6IO95aSf5Z+65LqO55So5oi35bm06b6E55Sf5oiQ5bu66K6uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCB4aWFvYWlBZ2VudC5nZW5lcmF0ZVN1Z2dlc3Rpb25zKG1vY2tVc2VyUHJvZmlsZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdWdnZXN0aW9ucykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHN1Z2dlc3Rpb25zKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6XkuLo0MOWygeS7peS4iueUqOaIt+eUn+aIkOS9k+ajgOW7uuiuricsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9sZGVyUHJvZmlsZSA9IHtcbiAgICAgICAgLi4ubW9ja1VzZXJQcm9maWxlLFxuICAgICAgICBiYXNpY0luZm86IHsgLi4ubW9ja1VzZXJQcm9maWxlLmJhc2ljSW5mbywgYWdlOiA0NSB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGF3YWl0IHhpYW9haUFnZW50LmdlbmVyYXRlU3VnZ2VzdGlvbnMob2xkZXJQcm9maWxlKTtcbiAgICAgIFxuICAgICAgY29uc3QgY2hlY2t1cFN1Z2dlc3Rpb24gPSBzdWdnZXN0aW9ucy5maW5kKHMgPT4gcy50aXRsZS5pbmNsdWRlcygn5L2T5qOAJykpO1xuICAgICAgZXhwZWN0KGNoZWNrdXBTdWdnZXN0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNoZWNrdXBTdWdnZXN0aW9uPy5wcmlvcml0eSkudG9CZSgnaGlnaCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeS4uuWls+aAp+eUqOaIt+eUn+aIkOmTgei0qOihpeWFheW7uuiuricsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZlbWFsZVByb2ZpbGUgPSB7XG4gICAgICAgIC4uLm1vY2tVc2VyUHJvZmlsZSxcbiAgICAgICAgYmFzaWNJbmZvOiB7IC4uLm1vY2tVc2VyUHJvZmlsZS5iYXNpY0luZm8sIGdlbmRlcjogJ2ZlbWFsZScgYXMgY29uc3QgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCB4aWFvYWlBZ2VudC5nZW5lcmF0ZVN1Z2dlc3Rpb25zKGZlbWFsZVByb2ZpbGUpO1xuICAgICAgXG4gICAgICBjb25zdCBpcm9uU3VnZ2VzdGlvbiA9IHN1Z2dlc3Rpb25zLmZpbmQocyA9PiBzLnRpdGxlLmluY2x1ZGVzKCfpk4HotKgnKSk7XG4gICAgICBleHBlY3QoaXJvblN1Z2dlc3Rpb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCflm5vor4rlip/og70nLCAoKSA9PiB7XG4gICAgaXQoJ+W6lOivpeiDveWkn+WQr+WKqOmXruiviuS8muivnScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHhpYW9haUFnZW50LnN0YXJ0SW5xdWlyeVNlc3Npb24oJ3Rlc3RfdXNlcicpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zZXNzaW9uX2lkKS50b0JlKCd0ZXN0X3Nlc3Npb24nKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/liIbmnpDlm77lg48nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbWFnZURhdGEgPSB7XG4gICAgICAgIGlkOiAndGVzdF9pbWFnZScsXG4gICAgICAgIHR5cGU6ICd0b25ndWUnIGFzIGNvbnN0LFxuICAgICAgICB1cmk6ICd0ZXN0Oi8vaW1hZ2UuanBnJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgeGlhb2FpQWdlbnQuYW5hbHl6ZUltYWdlKGltYWdlRGF0YSwgJ3Rvbmd1ZScpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hbmFseXNpc0lkKS50b0JlKCd0ZXN0X2FuYWx5c2lzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l6IO95aSf5YiG5p6Q6Z+z6aKRJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXVkaW9EYXRhID0ge1xuICAgICAgICBpZDogJ3Rlc3RfYXVkaW8nLFxuICAgICAgICB0eXBlOiAndm9pY2UnIGFzIGNvbnN0LFxuICAgICAgICB1cmk6ICd0ZXN0Oi8vYXVkaW8ubXAzJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgeGlhb2FpQWdlbnQuYW5hbHl6ZUF1ZGlvKGF1ZGlvRGF0YSwgJ3ZvaWNlJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmFuYWx5c2lzSWQpLnRvQmUoJ3Rlc3RfYW5hbHlzaXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/lpITnkIbop6bor4rmlbDmja4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYWxwYXRpb25EYXRhID0ge1xuICAgICAgICBpZDogJ3Rlc3RfcGFscGF0aW9uJyxcbiAgICAgICAgdHlwZTogJ3B1bHNlJyBhcyBjb25zdCxcbiAgICAgICAgc2Vuc29yRGF0YTogeyByYXRlOiA3Miwgcmh5dGhtOiAncmVndWxhcicgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgeGlhb2FpQWdlbnQucHJvY2Vzc1BhbHBhdGlvbkRhdGEocGFscGF0aW9uRGF0YSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmFuYWx5c2lzSWQpLnRvQmUoJ3Rlc3RfYW5hbHlzaXMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+aXoOmanOeijeWKn+iDvScsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6IO95aSf6I635Y+W5peg6Zqc56KN54q25oCBJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgeGlhb2FpQWdlbnQuZ2V0QWNjZXNzaWJpbGl0eVN0YXR1cygpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc3RhdHVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHN0YXR1cy5zZXJ2aWNlQXZhaWxhYmxlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKHN0YXR1cy5zZXJ2aWNlQXZhaWxhYmxlKSB7XG4gICAgICAgIGV4cGVjdChzdGF0dXMudmlzdWFsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3Qoc3RhdHVzLmhlYXJpbmcpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChzdGF0dXMubW90b3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChzdGF0dXMuY29nbml0aXZlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+mAgumFjeinhuiniemanOeijeeVjOmdoicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFkYXB0YXRpb25zID0gYXdhaXQgeGlhb2FpQWdlbnQuYWRhcHRJbnRlcmZhY2VGb3JEaXNhYmlsaXR5KHtcbiAgICAgICAgdHlwZTogJ3Zpc3VhbCcsXG4gICAgICAgIGZvbnRTaXplOiAnbGFyZ2UnLFxuICAgICAgICBoaWdoQ29udHJhc3Q6IHRydWUsXG4gICAgICAgIHZvaWNlT3V0cHV0OiB0cnVlXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGFkYXB0YXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGFkYXB0YXRpb25zLmZvbnRTaXplKS50b0JlKCdsYXJnZScpO1xuICAgICAgZXhwZWN0KGFkYXB0YXRpb25zLmhpZ2hDb250cmFzdCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChhZGFwdGF0aW9ucy5zY3JlZW5SZWFkZXIpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCflgaXlurfnirbmgIHnm5HmjqcnLCAoKSA9PiB7XG4gICAgaXQoJ+W6lOivpeiDveWkn+iOt+WPluWBpeW6t+eKtuaAgScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHhpYW9haUFnZW50LmdldEhlYWx0aFN0YXR1cygpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc3RhdHVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHN0YXR1cy5hZ2VudCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChzdGF0dXMuc2VydmljZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3Qoc3RhdHVzLnRpbWVzdGFtcCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+S4quaAp+WMluiuvue9ricsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6IO95aSf6K6+572u5Liq5oCn5YyW54m55b6BJywgKCkgPT4ge1xuICAgICAgY29uc3QgdHJhaXRzID0ge1xuICAgICAgICBzdHlsZTogJ2Zvcm1hbCcsXG4gICAgICAgIHRvbmU6ICdwcm9mZXNzaW9uYWwnXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICB4aWFvYWlBZ2VudC5zZXRQZXJzb25hbGl0eSh0cmFpdHMpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+mUmeivr+WkhOeQhicsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6IO95aSf5q2j5bi45aSE55CG55eH54q25raI5oGvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB4aWFvYWlBZ2VudC5jaGF0KCfmiJHlpLTnl5snLCBtb2NrQ29udGV4dCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS50ZXh0KS50b0NvbnRhaW4oJ+WktOeXmycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN1Z2dlc3Rpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzcG9uc2Uuc3VnZ2VzdGlvbnMpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn6LWE5rqQ5riF55CGJywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xog73lpJ/muIXnkIbnlKjmiLfotYTmupAnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBleHBlY3QoeGlhb2FpQWdlbnQuY2xlYW51cCgndGVzdF91c2Vy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