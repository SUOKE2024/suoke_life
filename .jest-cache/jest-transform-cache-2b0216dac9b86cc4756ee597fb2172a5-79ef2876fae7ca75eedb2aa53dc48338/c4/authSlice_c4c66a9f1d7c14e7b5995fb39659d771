8642f9159fedc5c817abd13c33cf467a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyResetCode = exports.updateUser = exports.selectUser = exports.selectIsAuthenticated = exports.selectAuthLoading = exports.selectAuthError = exports.selectAuth = exports.resetPassword = exports.register = exports.refreshToken = exports.logout = exports.login = exports.forgotPassword = exports.devLogin = exports.default = exports.clearError = exports.clearAuth = exports.checkAuthStatus = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _apiClient = require("../../services/apiClient");
var _config = require("../../constants/config");
var initialState = {
  isAuthenticated: false,
  user: undefined,
  token: undefined,
  refreshToken: undefined,
  loading: false,
  error: undefined
};
var login = exports.login = (0, _toolkit.createAsyncThunk)("auth/login", function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (credentials, _ref) {
    var rejectWithValue = _ref.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post('/auth/login', credentials);
      if (!response.success || !response.data) {
        var _response$error;
        throw new Error(((_response$error = response.error) == null ? void 0 : _response$error.message) || "登录失败");
      }
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, response.data.accessToken);
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, response.data.refreshToken);
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.USER_ID, response.data.user.id);
      return {
        user: response.data.user,
        token: response.data.accessToken,
        refreshToken: response.data.refreshToken
      };
    } catch (error) {
      return rejectWithValue(error.message || "登录失败");
    }
  });
  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}());
var register = exports.register = (0, _toolkit.createAsyncThunk)("auth/register", function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (userData, _ref3) {
    var rejectWithValue = _ref3.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post('/auth/register', userData);
      if (!response.success || !response.data) {
        var _response$error2;
        throw new Error(((_response$error2 = response.error) == null ? void 0 : _response$error2.message) || "注册失败");
      }
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, response.data.accessToken);
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, response.data.refreshToken);
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.USER_ID, response.data.user.id);
      return {
        user: response.data.user,
        token: response.data.accessToken,
        refreshToken: response.data.refreshToken
      };
    } catch (error) {
      return rejectWithValue(error.message || "注册失败");
    }
  });
  return function (_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}());
var logout = exports.logout = (0, _toolkit.createAsyncThunk)("auth/logout", (0, _asyncToGenerator2.default)(function* () {
  try {
    yield _apiClient.apiClient.post("/auth/logout");
  } catch (error) {
    console.warn("Server logout failed:", error);
  } finally {
    yield _asyncStorage.default.multiRemove([_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, _config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, _config.STORAGE_CONFIG.KEYS.USER_ID]);
  }
}));
var refreshToken = exports.refreshToken = (0, _toolkit.createAsyncThunk)("auth/refreshToken", function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (refreshTokenValue, _ref6) {
    var rejectWithValue = _ref6.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/auth/refresh", {
        refreshToken: refreshTokenValue
      });
      if (!response.success || !response.data) {
        var _response$error3;
        throw new Error(((_response$error3 = response.error) == null ? void 0 : _response$error3.message) || "刷新令牌失败");
      }
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, response.data.accessToken);
      yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, response.data.refreshToken);
      return {
        token: response.data.accessToken,
        refreshToken: response.data.refreshToken
      };
    } catch (error) {
      return rejectWithValue(error.message || "刷新令牌失败");
    }
  });
  return function (_x5, _x6) {
    return _ref7.apply(this, arguments);
  };
}());
var checkAuthStatus = exports.checkAuthStatus = (0, _toolkit.createAsyncThunk)("auth/checkStatus", function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (_, _ref8) {
    var rejectWithValue = _ref8.rejectWithValue;
    try {
      var token = yield _asyncStorage.default.getItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN);
      if (!token) {
        throw new Error("No token found");
      }
      var response = yield _apiClient.apiClient.get("/auth/me");
      if (!response.success || !response.data) {
        var _response$error4;
        throw new Error(((_response$error4 = response.error) == null ? void 0 : _response$error4.message) || "验证失败");
      }
      return response.data;
    } catch (error) {
      yield _asyncStorage.default.multiRemove([_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, _config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, _config.STORAGE_CONFIG.KEYS.USER_ID]);
      return rejectWithValue(error.message || "验证失败");
    }
  });
  return function (_x7, _x8) {
    return _ref9.apply(this, arguments);
  };
}());
var forgotPassword = exports.forgotPassword = (0, _toolkit.createAsyncThunk)("auth/forgotPassword", function () {
  var _ref1 = (0, _asyncToGenerator2.default)(function* (email, _ref0) {
    var rejectWithValue = _ref0.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/auth/forgot-password", {
        email: email
      });
      if (!response.success) {
        var _response$error5;
        throw new Error(((_response$error5 = response.error) == null ? void 0 : _response$error5.message) || "发送失败");
      }
    } catch (error) {
      return rejectWithValue(error.message || "发送失败");
    }
  });
  return function (_x9, _x0) {
    return _ref1.apply(this, arguments);
  };
}());
var verifyResetCode = exports.verifyResetCode = (0, _toolkit.createAsyncThunk)("auth/verifyResetCode", function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (_ref10, _ref11) {
    var email = _ref10.email,
      code = _ref10.code;
    var rejectWithValue = _ref11.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/auth/verify-reset-code", {
        email: email,
        code: code
      });
      if (!response.success) {
        var _response$error6;
        throw new Error(((_response$error6 = response.error) == null ? void 0 : _response$error6.message) || "验证失败");
      }
    } catch (error) {
      return rejectWithValue(error.message || "验证失败");
    }
  });
  return function (_x1, _x10) {
    return _ref12.apply(this, arguments);
  };
}());
var resetPassword = exports.resetPassword = (0, _toolkit.createAsyncThunk)("auth/resetPassword", function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (_ref13, _ref14) {
    var email = _ref13.email,
      code = _ref13.code,
      newPassword = _ref13.newPassword;
    var rejectWithValue = _ref14.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/auth/reset-password", {
        email: email,
        code: code,
        newPassword: newPassword
      });
      if (!response.success) {
        var _response$error7;
        throw new Error(((_response$error7 = response.error) == null ? void 0 : _response$error7.message) || "重置失败");
      }
    } catch (error) {
      return rejectWithValue(error.message || "重置失败");
    }
  });
  return function (_x11, _x12) {
    return _ref15.apply(this, arguments);
  };
}());
var authSlice = (0, _toolkit.createSlice)({
  name: "auth",
  initialState: initialState,
  reducers: {
    clearError: function clearError(state) {
      state.error = undefined;
    },
    clearAuth: function clearAuth(state) {
      state.isAuthenticated = false;
      state.user = undefined;
      state.token = undefined;
      state.refreshToken = undefined;
      state.error = undefined;
    },
    updateUser: function updateUser(state, action) {
      if (state.user) {
        state.user = Object.assign({}, state.user, action.payload);
      }
    },
    devLogin: function devLogin(state) {
      state.isAuthenticated = true;
      state.user = {
        id: 'dev-user-001',
        username: '测试用户',
        email: 'test@suokelife.com',
        phone: '13800138000',
        avatar: '',
        profile: {
          name: '测试用户',
          age: 30,
          gender: 'other',
          height: 170,
          weight: 65,
          constitution: 'balanced',
          medicalHistory: [],
          allergies: []
        },
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      state.token = 'dev-token-123456';
      state.refreshToken = 'dev-refresh-token-123456';
      state.loading = false;
      state.error = undefined;
    }
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(login.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(login.fulfilled, function (state, action) {
      state.loading = false;
      state.isAuthenticated = true;
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken;
      state.error = undefined;
    }).addCase(login.rejected, function (state, action) {
      state.loading = false;
      state.isAuthenticated = false;
      state.error = action.payload;
    });
    builder.addCase(register.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(register.fulfilled, function (state, action) {
      state.loading = false;
      state.isAuthenticated = true;
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken;
      state.error = undefined;
    }).addCase(register.rejected, function (state, action) {
      state.loading = false;
      state.isAuthenticated = false;
      state.error = action.payload;
    });
    builder.addCase(logout.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(logout.fulfilled, function (state) {
      state.loading = false;
      state.isAuthenticated = false;
      state.user = undefined;
      state.token = undefined;
      state.refreshToken = undefined;
      state.error = undefined;
    }).addCase(logout.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(refreshToken.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(refreshToken.fulfilled, function (state, action) {
      state.loading = false;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken;
      state.error = undefined;
    }).addCase(refreshToken.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(checkAuthStatus.pending, function (state) {
      state.loading = true;
    }).addCase(checkAuthStatus.fulfilled, function (state, action) {
      state.loading = false;
      state.isAuthenticated = true;
      state.user = action.payload;
      state.error = undefined;
    }).addCase(checkAuthStatus.rejected, function (state, action) {
      state.loading = false;
      state.isAuthenticated = false;
      state.user = undefined;
      state.token = undefined;
      state.refreshToken = undefined;
      state.error = action.payload;
    });
    builder.addCase(forgotPassword.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(forgotPassword.fulfilled, function (state) {
      state.loading = false;
      state.error = undefined;
    }).addCase(forgotPassword.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(verifyResetCode.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(verifyResetCode.fulfilled, function (state) {
      state.loading = false;
      state.error = undefined;
    }).addCase(verifyResetCode.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(resetPassword.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(resetPassword.fulfilled, function (state) {
      state.loading = false;
      state.error = undefined;
    }).addCase(resetPassword.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
  }
});
var _authSlice$actions = authSlice.actions,
  clearError = exports.clearError = _authSlice$actions.clearError,
  clearAuth = exports.clearAuth = _authSlice$actions.clearAuth,
  updateUser = exports.updateUser = _authSlice$actions.updateUser,
  devLogin = exports.devLogin = _authSlice$actions.devLogin;
var selectAuth = exports.selectAuth = function selectAuth(state) {
  return state.auth;
};
var selectIsAuthenticated = exports.selectIsAuthenticated = function selectIsAuthenticated(state) {
  return state.auth.isAuthenticated;
};
var selectUser = exports.selectUser = function selectUser(state) {
  return state.auth.user;
};
var selectAuthLoading = exports.selectAuthLoading = function selectAuthLoading(state) {
  return state.auth.loading;
};
var selectAuthError = exports.selectAuthError = function selectAuthError(state) {
  return state.auth.error;
};
var _default = exports.default = authSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,