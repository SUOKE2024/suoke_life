{"version":3,"names":["_react","require","cov_1i4fjqa1g0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","_coverageSchema","coverage","actualCoverage","mockHealthData","id","title","value","unit","icon","color","trend","trendValue","description","status","useHealthData","exports","_ref","useState","_ref2","_slicedToArray2","default","healthData","setHealthData","_ref3","_ref4","loading","setLoading","_ref5","_ref6","error","setError","refreshData","useCallback","_asyncToGenerator2","Promise","resolve","setTimeout","updatedData","map","item","Object","assign","Math","max","random","err","console","updateHealthData","data","prev","addHealthData","concat","_toConsumableArray2","removeHealthData","filter","getHealthDataById","find","useEffect"],"sources":["useHealthData.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { HealthData } from '../screens/components/HealthCard';\n\nexport interface UseHealthDataReturn {\n  healthData: HealthData[];\n  loading: boolean;\n  error: string | null;\n  refreshData: () => Promise<void>;\n  updateHealthData: (id: string, data: Partial<HealthData>) => void;\n  addHealthData: (data: HealthData) => void;\n  removeHealthData: (id: string) => void;\n  getHealthDataById: (id: string) => HealthData | undefined;\n}\n\n// 模拟健康数据\nconst mockHealthData: HealthData[] = [\n  {\n    id: '1',\n    title: '心率',\n    value: 72,\n    unit: 'bpm',\n    icon: 'heart-pulse',\n    color: '#FF6B6B',\n    trend: 'stable',\n    trendValue: '±2',\n    description: '正常范围内',\n    status: 'normal',\n  },\n  {\n    id: '2',\n    title: '血压',\n    value: '120/80',\n    unit: 'mmHg',\n    icon: 'gauge',\n    color: '#4ECDC4',\n    trend: 'down',\n    trendValue: '-5',\n    description: '血压有所改善',\n    status: 'good',\n  },\n  {\n    id: '3',\n    title: '体重',\n    value: 65.5,\n    unit: 'kg',\n    icon: 'scale-bathroom',\n    color: '#45B7D1',\n    trend: 'down',\n    trendValue: '-0.5kg',\n    description: '体重控制良好',\n    status: 'good',\n  },\n  {\n    id: '4',\n    title: '血糖',\n    value: 5.8,\n    unit: 'mmol/L',\n    icon: 'water',\n    color: '#F7DC6F',\n    trend: 'up',\n    trendValue: '+0.2',\n    description: '需要注意饮食',\n    status: 'warning',\n  },\n  {\n    id: '5',\n    title: '睡眠质量',\n    value: 85,\n    unit: '%',\n    icon: 'sleep',\n    color: '#BB8FCE',\n    trend: 'up',\n    trendValue: '+5%',\n    description: '睡眠质量有所提升',\n    status: 'good',\n  },\n  {\n    id: '6',\n    title: '步数',\n    value: 8500,\n    unit: '步',\n    icon: 'walk',\n    color: '#58D68D',\n    trend: 'up',\n    trendValue: '+500',\n    description: '接近目标步数',\n    status: 'normal',\n  },\n];\n\nexport const useHealthData = (): UseHealthDataReturn => {\n  const [healthData, setHealthData] = useState<HealthData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const refreshData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 模拟API调用\n      await new Promise<void>(resolve => setTimeout(() => resolve(), 1000));\n      \n      // 随机更新一些数据以模拟实时变化\n      const updatedData = mockHealthData.map(item => ({\n        ...item,\n        value: typeof item.value === 'number' \n          ? Math.max(0, item.value + (Math.random() - 0.5) * 2)\n          : item.value,\n      }));\n      \n      setHealthData(updatedData);\n    } catch (err) {\n      setError('获取健康数据失败');\n      console.error('获取健康数据失败:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateHealthData = useCallback((id: string, data: Partial<HealthData>) => {\n    setHealthData(prev => \n      prev.map(item => \n        item.id === id ? { ...item, ...data } : item\n      )\n    );\n  }, []);\n\n  const addHealthData = useCallback((data: HealthData) => {\n    setHealthData(prev => [...prev, data]);\n  }, []);\n\n  const removeHealthData = useCallback((id: string) => {\n    setHealthData(prev => prev.filter(item => item.id !== id));\n  }, []);\n\n  const getHealthDataById = useCallback((id: string) => {\n    return healthData.find(item => item.id === id);\n  }, [healthData]);\n\n  // 初始化数据\n  useEffect(() => {\n    refreshData();\n  }, [refreshData]);\n\n  return {\n    healthData,\n    loading,\n    error,\n    refreshData,\n    updateHealthData,\n    addHealthData,\n    removeHealthData,\n    getHealthDataById,\n  };\n}; "],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAAyD,SAAAC,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;MAAA;QAAAC,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAO,SAAA;MAAA;QAAAD,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAU,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;IAAA;IAAAC,eAAA;IAAApB,IAAA;EAAA;EAAA,IAAAqB,QAAA,GAAApB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAkB,QAAA,CAAAtB,IAAA,KAAAsB,QAAA,CAAAtB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAqB,QAAA,CAAAtB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAkB,cAAA,GAAAD,QAAA,CAAAtB,IAAA;EAAA;IAAAD,cAAA,YAAAA,CAAA;MAAA,OAAAwB,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAxB,cAAA;AAezD,IAAMyB,cAA4B,IAAAzB,cAAA,GAAAmB,CAAA,OAAG,CACnC;EACEO,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,QAAQ;EACfC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,OAAO;EACpBC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE,QAAQ;EACpBC,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,MAAM;EAClBC,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,MAAM;EACbC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,UAAU;EACvBC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,MAAM;EAClBC,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE;AACV,CAAC,CACF;AAACnC,cAAA,GAAAmB,CAAA;AAEK,IAAMiB,aAAa,GAAAC,OAAA,CAAAD,aAAA,GAAG,SAAhBA,aAAaA,CAAA,EAA8B;EAAApC,cAAA,GAAAoB,CAAA;EACtD,IAAAkB,IAAA,IAAAtC,cAAA,GAAAmB,CAAA,OAAoC,IAAAoB,eAAQ,EAAe,EAAE,CAAC;IAAAC,KAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,IAAA;IAAvDK,UAAU,GAAAH,KAAA;IAAEI,aAAa,GAAAJ,KAAA;EAChC,IAAAK,KAAA,IAAA7C,cAAA,GAAAmB,CAAA,OAA8B,IAAAoB,eAAQ,EAAC,KAAK,CAAC;IAAAO,KAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,KAAA;IAAtCE,OAAO,GAAAD,KAAA;IAAEE,UAAU,GAAAF,KAAA;EAC1B,IAAAG,KAAA,IAAAjD,cAAA,GAAAmB,CAAA,OAA0B,IAAAoB,eAAQ,EAAgB,IAAI,CAAC;IAAAW,KAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,KAAA;IAAhDE,KAAK,GAAAD,KAAA;IAAEE,QAAQ,GAAAF,KAAA;EAEtB,IAAMG,WAAW,IAAArD,cAAA,GAAAmB,CAAA,OAAG,IAAAmC,kBAAW,MAAAC,kBAAA,CAAAb,OAAA,EAAC,aAAY;IAAA1C,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IAC1C6B,UAAU,CAAC,IAAI,CAAC;IAAChD,cAAA,GAAAmB,CAAA;IACjBiC,QAAQ,CAAC,IAAI,CAAC;IAACpD,cAAA,GAAAmB,CAAA;IAEf,IAAI;MAAAnB,cAAA,GAAAmB,CAAA;MAEF,MAAM,IAAIqC,OAAO,CAAO,UAAAC,OAAO,EAAI;QAAAzD,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAmB,CAAA;QAAA,OAAAuC,UAAU,CAAC,YAAM;UAAA1D,cAAA,GAAAoB,CAAA;UAAApB,cAAA,GAAAmB,CAAA;UAAA,OAAAsC,OAAO,CAAC,CAAC;QAAD,CAAC,EAAE,IAAI,CAAC;MAAD,CAAC,CAAC;MAGrE,IAAME,WAAW,IAAA3D,cAAA,GAAAmB,CAAA,QAAGM,cAAc,CAACmC,GAAG,CAAC,UAAAC,IAAI,EAAK;QAAA7D,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAmB,CAAA;QAAA,OAAA2C,MAAA,CAAAC,MAAA,KAC3CF,IAAI;UACPjC,KAAK,EAAE,OAAOiC,IAAI,CAACjC,KAAK,KAAK,QAAQ,IAAA5B,cAAA,GAAAqB,CAAA,UACjC2C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,IAAI,CAACjC,KAAK,GAAG,CAACoC,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,KAAAlE,cAAA,GAAAqB,CAAA,UACnDwC,IAAI,CAACjC,KAAK;QAAA;MAChB,CAAE,CAAC;MAAC5B,cAAA,GAAAmB,CAAA;MAEJyB,aAAa,CAACe,WAAW,CAAC;IAC5B,CAAC,CAAC,OAAOQ,GAAG,EAAE;MAAAnE,cAAA,GAAAmB,CAAA;MACZiC,QAAQ,CAAC,UAAU,CAAC;MAACpD,cAAA,GAAAmB,CAAA;MACrBiD,OAAO,CAACjB,KAAK,CAAC,WAAW,EAAEgB,GAAG,CAAC;IACjC,CAAC,SAAS;MAAAnE,cAAA,GAAAmB,CAAA;MACR6B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,GAAE,EAAE,CAAC;EAEN,IAAMqB,gBAAgB,IAAArE,cAAA,GAAAmB,CAAA,QAAG,IAAAmC,kBAAW,EAAC,UAAC5B,EAAU,EAAE4C,IAAyB,EAAK;IAAAtE,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IAC9EyB,aAAa,CAAC,UAAA2B,IAAI,EAChB;MAAAvE,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAmB,CAAA;MAAA,OAAAoD,IAAI,CAACX,GAAG,CAAC,UAAAC,IAAI,EACX;QAAA7D,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAmB,CAAA;QAAA,OAAA0C,IAAI,CAACnC,EAAE,KAAKA,EAAE,IAAA1B,cAAA,GAAAqB,CAAA,UAAAyC,MAAA,CAAAC,MAAA,KAAQF,IAAI,EAAKS,IAAI,MAAAtE,cAAA,GAAAqB,CAAA,UAAKwC,IAAI;MAAD,CAC7C,CAAC;IAAD,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMW,aAAa,IAAAxE,cAAA,GAAAmB,CAAA,QAAG,IAAAmC,kBAAW,EAAC,UAACgB,IAAgB,EAAK;IAAAtE,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IACtDyB,aAAa,CAAC,UAAA2B,IAAI,EAAI;MAAAvE,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAmB,CAAA;MAAA,UAAAsD,MAAA,KAAAC,mBAAA,CAAAhC,OAAA,EAAI6B,IAAI,IAAED,IAAI;IAAA,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMK,gBAAgB,IAAA3E,cAAA,GAAAmB,CAAA,QAAG,IAAAmC,kBAAW,EAAC,UAAC5B,EAAU,EAAK;IAAA1B,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IACnDyB,aAAa,CAAC,UAAA2B,IAAI,EAAI;MAAAvE,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAmB,CAAA;MAAA,OAAAoD,IAAI,CAACK,MAAM,CAAC,UAAAf,IAAI,EAAI;QAAA7D,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAmB,CAAA;QAAA,OAAA0C,IAAI,CAACnC,EAAE,KAAKA,EAAE;MAAD,CAAC,CAAC;IAAD,CAAC,CAAC;EAC5D,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMmD,iBAAiB,IAAA7E,cAAA,GAAAmB,CAAA,QAAG,IAAAmC,kBAAW,EAAC,UAAC5B,EAAU,EAAK;IAAA1B,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IACpD,OAAOwB,UAAU,CAACmC,IAAI,CAAC,UAAAjB,IAAI,EAAI;MAAA7D,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAmB,CAAA;MAAA,OAAA0C,IAAI,CAACnC,EAAE,KAAKA,EAAE;IAAD,CAAC,CAAC;EAChD,CAAC,EAAE,CAACiB,UAAU,CAAC,CAAC;EAAC3C,cAAA,GAAAmB,CAAA;EAGjB,IAAA4D,gBAAS,EAAC,YAAM;IAAA/E,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAmB,CAAA;IACdkC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAACrD,cAAA,GAAAmB,CAAA;EAElB,OAAO;IACLwB,UAAU,EAAVA,UAAU;IACVI,OAAO,EAAPA,OAAO;IACPI,KAAK,EAALA,KAAK;IACLE,WAAW,EAAXA,WAAW;IACXgB,gBAAgB,EAAhBA,gBAAgB;IAChBG,aAAa,EAAbA,aAAa;IACbG,gBAAgB,EAAhBA,gBAAgB;IAChBE,iBAAiB,EAAjBA;EACF,CAAC;AACH,CAAC","ignoreList":[]}