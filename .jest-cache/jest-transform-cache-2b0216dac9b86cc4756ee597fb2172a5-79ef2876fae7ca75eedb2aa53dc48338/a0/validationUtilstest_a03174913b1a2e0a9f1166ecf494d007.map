{"version":3,"names":["describe","validateEmail","email","emailRegex","length","includes","startsWith","endsWith","indexOf","lastIndexOf","parts","split","test","it","validEmails","forEach","expect","toBe","invalidEmails","validatePhone","phone","phoneRegex","validPhones","invalidPhones","validatePassword","password","errors","push","isValid","strongPasswords","result","toHaveLength","weakPasswords","expectedErrors","_ref","toBeGreaterThanOrEqual","validateIdCard","idCard","year","parseInt","substring","month","day","Date","getFullYear","weights","checkCodes","sum","i","checkCode","toUpperCase","calculateCheckCode","idCard17","base","validIdCards","invalidIdCards","validateAge","birthDate","error","birth","today","isNaN","getTime","age","monthDiff","getMonth","getDate","currentYear","testCases","_ref2","toBeLessThan","invalidDates","date","reason","_ref3","toBeDefined","validateHealthMetric","type","value","ranges","heart_rate","min","max","unit","blood_pressure_systolic","blood_pressure_diastolic","temperature","weight","height","range","validMetrics","_ref4","toBeUndefined","invalidMetrics","_ref5"],"sources":["validationUtils.test.ts"],"sourcesContent":["// 验证工具函数测试\ndescribe('Validation Utils', () => {\n  // 邮箱验证\n  describe('validateEmail', () => {\n    const validateEmail = (email: string): boolean => {\n      // 更严格的邮箱验证正则表达式\n      const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;\n      \n      // 额外检查\n      if (!email || email.length > 254) return false;\n      if (email.includes('..')) return false;\n      if (email.startsWith('.') || email.endsWith('.')) return false;\n      if (email.includes(' ')) return false;\n      if (!email.includes('@')) return false;\n      if (email.indexOf('@') !== email.lastIndexOf('@')) return false; // 只能有一个@\n      \n      const parts = email.split('@');\n      if (parts.length !== 2) return false;\n      if (parts[0].length === 0 || parts[1].length === 0) return false;\n      if (parts[1].indexOf('.') === -1) return false; // 域名必须有点\n      if (parts[1].startsWith('.') || parts[1].endsWith('.')) return false;\n      \n      return emailRegex.test(email);\n    };\n\n    it('应该验证有效的邮箱地址', () => {\n      const validEmails = [\n        'test@example.com',\n        'user.name@domain.co.uk',\n        'user+tag@example.org',\n        'user123@test-domain.com',\n      ];\n\n      validEmails.forEach(email => {\n        expect(validateEmail(email)).toBe(true);\n      });\n    });\n\n    it('应该拒绝无效的邮箱地址', () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@example.com',\n        'user@',\n        'user@.com',\n        'user..name@example.com',\n        'user@example',\n        '',\n        'user name@example.com',\n      ];\n\n      invalidEmails.forEach(email => {\n        expect(validateEmail(email)).toBe(false);\n      });\n    });\n  });\n\n  // 手机号验证\n  describe('validatePhone', () => {\n    const validatePhone = (phone: string): boolean => {\n      const phoneRegex = /^1[3-9]\\d{9}$/;\n      return phoneRegex.test(phone);\n    };\n\n    it('应该验证有效的中国手机号', () => {\n      const validPhones = [\n        '13812345678',\n        '15987654321',\n        '18612345678',\n        '17712345678',\n        '19912345678',\n      ];\n\n      validPhones.forEach(phone => {\n        expect(validatePhone(phone)).toBe(true);\n      });\n    });\n\n    it('应该拒绝无效的手机号', () => {\n      const invalidPhones = [\n        '12812345678', // 不是1开头的有效号段\n        '1381234567',  // 位数不够\n        '138123456789', // 位数过多\n        '1081234567',  // 第二位不是3-9\n        'abcdefghijk', // 包含字母\n        '',            // 空字符串\n        '138 1234 5678', // 包含空格\n      ];\n\n      invalidPhones.forEach(phone => {\n        expect(validatePhone(phone)).toBe(false);\n      });\n    });\n  });\n\n  // 密码强度验证\n  describe('validatePassword', () => {\n    const validatePassword = (password: string): { isValid: boolean; errors: string[] } => {\n      const errors: string[] = [];\n      \n      if (password.length < 8) {\n        errors.push('密码长度至少8位');\n      }\n      \n      if (!/[A-Z]/.test(password)) {\n        errors.push('密码必须包含大写字母');\n      }\n      \n      if (!/[a-z]/.test(password)) {\n        errors.push('密码必须包含小写字母');\n      }\n      \n      if (!/\\d/.test(password)) {\n        errors.push('密码必须包含数字');\n      }\n      \n      if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n        errors.push('密码必须包含特殊字符');\n      }\n      \n      return {\n        isValid: errors.length === 0,\n        errors,\n      };\n    };\n\n    it('应该验证强密码', () => {\n      const strongPasswords = [\n        'Password123!',\n        'MyStr0ng@Pass',\n        'Secure#Pass1',\n        'C0mplex$Word',\n      ];\n\n      strongPasswords.forEach(password => {\n        const result = validatePassword(password);\n        expect(result.isValid).toBe(true);\n        expect(result.errors).toHaveLength(0);\n      });\n    });\n\n    it('应该识别弱密码并返回错误信息', () => {\n      const weakPasswords = [\n        { password: '123456', expectedErrors: 4 }, // 缺少大小写字母和特殊字符\n        { password: 'password', expectedErrors: 3 }, // 缺少大写字母、数字和特殊字符\n        { password: 'PASSWORD123', expectedErrors: 2 }, // 缺少小写字母和特殊字符\n        { password: 'Pass!', expectedErrors: 2 }, // 长度不够，缺少数字\n      ];\n\n      weakPasswords.forEach(({ password, expectedErrors }) => {\n        const result = validatePassword(password);\n        expect(result.isValid).toBe(false);\n        expect(result.errors.length).toBeGreaterThanOrEqual(expectedErrors);\n      });\n    });\n  });\n\n  // 身份证号验证\n  describe('validateIdCard', () => {\n    const validateIdCard = (idCard: string): boolean => {\n      // 18位身份证验证\n      if (!/^\\d{17}[\\dXx]$/.test(idCard)) {\n        return false;\n      }\n      \n      // 验证日期部分\n      const year = parseInt(idCard.substring(6, 10));\n      const month = parseInt(idCard.substring(10, 12));\n      const day = parseInt(idCard.substring(12, 14));\n      \n      if (year < 1900 || year > new Date().getFullYear()) return false;\n      if (month < 1 || month > 12) return false;\n      if (day < 1 || day > 31) return false;\n      \n      // 验证校验位\n      const weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n      const checkCodes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n      \n      let sum = 0;\n      for (let i = 0; i < 17; i++) {\n        sum += parseInt(idCard[i]) * weights[i];\n      }\n      \n      const checkCode = checkCodes[sum % 11];\n      return idCard[17].toUpperCase() === checkCode;\n    };\n\n    it('应该验证有效的身份证号', () => {\n      // 手动计算有效的身份证号\n      const calculateCheckCode = (idCard17: string): string => {\n        const weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n        const checkCodes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n        \n        let sum = 0;\n        for (let i = 0; i < 17; i++) {\n          sum += parseInt(idCard17[i]) * weights[i];\n        }\n        \n        return checkCodes[sum % 11];\n      };\n\n      const base = '110101199001010';\n      const validIdCards = [\n        base + '01' + calculateCheckCode(base + '01'),\n        base + '02' + calculateCheckCode(base + '02'),\n      ];\n\n      validIdCards.forEach(idCard => {\n        expect(validateIdCard(idCard)).toBe(true);\n      });\n    });\n\n    it('应该拒绝无效的身份证号', () => {\n      const invalidIdCards = [\n        '12345678901234567',  // 17位\n        '1234567890123456789', // 19位\n        '11010119900101002X', // 校验位错误\n        'abcdefghijklmnopqr', // 包含字母\n        '',                   // 空字符串\n        '11011319900101001X', // 无效月份\n        '11010100000101001X', // 无效年份\n      ];\n\n      invalidIdCards.forEach(idCard => {\n        expect(validateIdCard(idCard)).toBe(false);\n      });\n    });\n  });\n\n  // 年龄验证\n  describe('validateAge', () => {\n    const validateAge = (birthDate: string): { isValid: boolean; age?: number; error?: string } => {\n      // 先检查日期格式\n      if (!birthDate || typeof birthDate !== 'string') {\n        return { isValid: false, error: '无效的日期格式' };\n      }\n      \n      const birth = new Date(birthDate);\n      const today = new Date();\n      \n      if (isNaN(birth.getTime())) {\n        return { isValid: false, error: '无效的日期格式' };\n      }\n      \n      // 检查是否为未来日期\n      if (birth > today) {\n        return { isValid: false, error: '出生日期不能是未来日期' };\n      }\n      \n      // 检查年份是否合理（不能早于1850年）\n      if (birth.getFullYear() < 1850) {\n        return { isValid: false, error: '出生年份不能早于1850年' };\n      }\n      \n      let age = today.getFullYear() - birth.getFullYear();\n      const monthDiff = today.getMonth() - birth.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n        age--;\n      }\n      \n      if (age < 0) {\n        return { isValid: false, error: '年龄不能为负数' };\n      }\n      \n      if (age > 150) {\n        return { isValid: false, error: '年龄不能超过150岁' };\n      }\n      \n      return { isValid: true, age };\n    };\n\n    it('应该正确计算年龄', () => {\n      // 使用相对日期计算，避免硬编码年龄\n      const today = new Date();\n      const currentYear = today.getFullYear();\n      \n      const testCases = [\n        { birthDate: `${currentYear - 30}-01-01` }, // 30岁\n        { birthDate: `${currentYear - 25}-06-15` }, // 25岁\n        { birthDate: `${currentYear - 40}-12-31` }, // 40岁\n      ];\n\n      testCases.forEach(({ birthDate }) => {\n        const result = validateAge(birthDate);\n        expect(result.isValid).toBe(true);\n        expect(typeof result.age).toBe('number');\n        expect(result.age).toBeGreaterThanOrEqual(0);\n        expect(result.age).toBeLessThan(150);\n      });\n    });\n\n    it('应该拒绝无效的出生日期', () => {\n      const currentYear = new Date().getFullYear();\n      const invalidDates = [\n        { date: `${currentYear + 1}-01-01`, reason: '未来日期' },\n        { date: 'invalid-date', reason: '无效格式' },\n        { date: '1800-01-01', reason: '过于久远' },\n        { date: `${currentYear - 152}-01-01`, reason: '年龄超过150岁' },\n        { date: '', reason: '空字符串' },\n        { date: '2024-13-01', reason: '无效月份' },\n        { date: '2024-01-32', reason: '无效日期' },\n      ];\n\n      invalidDates.forEach(({ date, reason }) => {\n        const result = validateAge(date);\n        expect(result.isValid).toBe(false);\n        expect(result.error).toBeDefined();\n      });\n    });\n  });\n\n  // 健康指标验证\n  describe('validateHealthMetric', () => {\n    const validateHealthMetric = (type: string, value: number): { isValid: boolean; error?: string } => {\n      const ranges: Record<string, { min: number; max: number; unit: string }> = {\n        heart_rate: { min: 40, max: 200, unit: 'bpm' },\n        blood_pressure_systolic: { min: 70, max: 250, unit: 'mmHg' },\n        blood_pressure_diastolic: { min: 40, max: 150, unit: 'mmHg' },\n        temperature: { min: 35, max: 42, unit: '°C' },\n        weight: { min: 20, max: 300, unit: 'kg' },\n        height: { min: 50, max: 250, unit: 'cm' },\n      };\n\n      const range = ranges[type];\n      if (!range) {\n        return { isValid: false, error: '未知的健康指标类型' };\n      }\n\n      if (value < range.min || value > range.max) {\n        return { \n          isValid: false, \n          error: `${type}值应在${range.min}-${range.max}${range.unit}之间` \n        };\n      }\n\n      return { isValid: true };\n    };\n\n    it('应该验证有效的健康指标', () => {\n      const validMetrics = [\n        { type: 'heart_rate', value: 72 },\n        { type: 'blood_pressure_systolic', value: 120 },\n        { type: 'temperature', value: 36.5 },\n        { type: 'weight', value: 70 },\n      ];\n\n      validMetrics.forEach(({ type, value }) => {\n        const result = validateHealthMetric(type, value);\n        expect(result.isValid).toBe(true);\n        expect(result.error).toBeUndefined();\n      });\n    });\n\n    it('应该拒绝超出范围的健康指标', () => {\n      const invalidMetrics = [\n        { type: 'heart_rate', value: 300 }, // 超出最大值\n        { type: 'temperature', value: 30 }, // 低于最小值\n        { type: 'unknown_type', value: 100 }, // 未知类型\n      ];\n\n      invalidMetrics.forEach(({ type, value }) => {\n        const result = validateHealthMetric(type, value);\n        expect(result.isValid).toBe(false);\n        expect(result.error).toBeDefined();\n      });\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}