34590bcd4f0f3da9c32b369ead51cb1f
describe('Validation Utils', function () {
  describe('validateEmail', function () {
    var validateEmail = function validateEmail(email) {
      var emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;
      if (!email || email.length > 254) return false;
      if (email.includes('..')) return false;
      if (email.startsWith('.') || email.endsWith('.')) return false;
      if (email.includes(' ')) return false;
      if (!email.includes('@')) return false;
      if (email.indexOf('@') !== email.lastIndexOf('@')) return false;
      var parts = email.split('@');
      if (parts.length !== 2) return false;
      if (parts[0].length === 0 || parts[1].length === 0) return false;
      if (parts[1].indexOf('.') === -1) return false;
      if (parts[1].startsWith('.') || parts[1].endsWith('.')) return false;
      return emailRegex.test(email);
    };
    it('应该验证有效的邮箱地址', function () {
      var validEmails = ['test@example.com', 'user.name@domain.co.uk', 'user+tag@example.org', 'user123@test-domain.com'];
      validEmails.forEach(function (email) {
        expect(validateEmail(email)).toBe(true);
      });
    });
    it('应该拒绝无效的邮箱地址', function () {
      var invalidEmails = ['invalid-email', '@example.com', 'user@', 'user@.com', 'user..name@example.com', 'user@example', '', 'user name@example.com'];
      invalidEmails.forEach(function (email) {
        expect(validateEmail(email)).toBe(false);
      });
    });
  });
  describe('validatePhone', function () {
    var validatePhone = function validatePhone(phone) {
      var phoneRegex = /^1[3-9]\d{9}$/;
      return phoneRegex.test(phone);
    };
    it('应该验证有效的中国手机号', function () {
      var validPhones = ['13812345678', '15987654321', '18612345678', '17712345678', '19912345678'];
      validPhones.forEach(function (phone) {
        expect(validatePhone(phone)).toBe(true);
      });
    });
    it('应该拒绝无效的手机号', function () {
      var invalidPhones = ['12812345678', '1381234567', '138123456789', '1081234567', 'abcdefghijk', '', '138 1234 5678'];
      invalidPhones.forEach(function (phone) {
        expect(validatePhone(phone)).toBe(false);
      });
    });
  });
  describe('validatePassword', function () {
    var validatePassword = function validatePassword(password) {
      var errors = [];
      if (password.length < 8) {
        errors.push('密码长度至少8位');
      }
      if (!/[A-Z]/.test(password)) {
        errors.push('密码必须包含大写字母');
      }
      if (!/[a-z]/.test(password)) {
        errors.push('密码必须包含小写字母');
      }
      if (!/\d/.test(password)) {
        errors.push('密码必须包含数字');
      }
      if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
        errors.push('密码必须包含特殊字符');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };
    it('应该验证强密码', function () {
      var strongPasswords = ['Password123!', 'MyStr0ng@Pass', 'Secure#Pass1', 'C0mplex$Word'];
      strongPasswords.forEach(function (password) {
        var result = validatePassword(password);
        expect(result.isValid).toBe(true);
        expect(result.errors).toHaveLength(0);
      });
    });
    it('应该识别弱密码并返回错误信息', function () {
      var weakPasswords = [{
        password: '123456',
        expectedErrors: 4
      }, {
        password: 'password',
        expectedErrors: 3
      }, {
        password: 'PASSWORD123',
        expectedErrors: 2
      }, {
        password: 'Pass!',
        expectedErrors: 2
      }];
      weakPasswords.forEach(function (_ref) {
        var password = _ref.password,
          expectedErrors = _ref.expectedErrors;
        var result = validatePassword(password);
        expect(result.isValid).toBe(false);
        expect(result.errors.length).toBeGreaterThanOrEqual(expectedErrors);
      });
    });
  });
  describe('validateIdCard', function () {
    var validateIdCard = function validateIdCard(idCard) {
      if (!/^\d{17}[\dXx]$/.test(idCard)) {
        return false;
      }
      var year = parseInt(idCard.substring(6, 10));
      var month = parseInt(idCard.substring(10, 12));
      var day = parseInt(idCard.substring(12, 14));
      if (year < 1900 || year > new Date().getFullYear()) return false;
      if (month < 1 || month > 12) return false;
      if (day < 1 || day > 31) return false;
      var weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
      var checkCodes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
      var sum = 0;
      for (var i = 0; i < 17; i++) {
        sum += parseInt(idCard[i]) * weights[i];
      }
      var checkCode = checkCodes[sum % 11];
      return idCard[17].toUpperCase() === checkCode;
    };
    it('应该验证有效的身份证号', function () {
      var calculateCheckCode = function calculateCheckCode(idCard17) {
        var weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
        var checkCodes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
        var sum = 0;
        for (var i = 0; i < 17; i++) {
          sum += parseInt(idCard17[i]) * weights[i];
        }
        return checkCodes[sum % 11];
      };
      var base = '110101199001010';
      var validIdCards = [base + '01' + calculateCheckCode(base + '01'), base + '02' + calculateCheckCode(base + '02')];
      validIdCards.forEach(function (idCard) {
        expect(validateIdCard(idCard)).toBe(true);
      });
    });
    it('应该拒绝无效的身份证号', function () {
      var invalidIdCards = ['12345678901234567', '1234567890123456789', '11010119900101002X', 'abcdefghijklmnopqr', '', '11011319900101001X', '11010100000101001X'];
      invalidIdCards.forEach(function (idCard) {
        expect(validateIdCard(idCard)).toBe(false);
      });
    });
  });
  describe('validateAge', function () {
    var validateAge = function validateAge(birthDate) {
      if (!birthDate || typeof birthDate !== 'string') {
        return {
          isValid: false,
          error: '无效的日期格式'
        };
      }
      var birth = new Date(birthDate);
      var today = new Date();
      if (isNaN(birth.getTime())) {
        return {
          isValid: false,
          error: '无效的日期格式'
        };
      }
      if (birth > today) {
        return {
          isValid: false,
          error: '出生日期不能是未来日期'
        };
      }
      if (birth.getFullYear() < 1850) {
        return {
          isValid: false,
          error: '出生年份不能早于1850年'
        };
      }
      var age = today.getFullYear() - birth.getFullYear();
      var monthDiff = today.getMonth() - birth.getMonth();
      if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {
        age--;
      }
      if (age < 0) {
        return {
          isValid: false,
          error: '年龄不能为负数'
        };
      }
      if (age > 150) {
        return {
          isValid: false,
          error: '年龄不能超过150岁'
        };
      }
      return {
        isValid: true,
        age: age
      };
    };
    it('应该正确计算年龄', function () {
      var today = new Date();
      var currentYear = today.getFullYear();
      var testCases = [{
        birthDate: `${currentYear - 30}-01-01`
      }, {
        birthDate: `${currentYear - 25}-06-15`
      }, {
        birthDate: `${currentYear - 40}-12-31`
      }];
      testCases.forEach(function (_ref2) {
        var birthDate = _ref2.birthDate;
        var result = validateAge(birthDate);
        expect(result.isValid).toBe(true);
        expect(typeof result.age).toBe('number');
        expect(result.age).toBeGreaterThanOrEqual(0);
        expect(result.age).toBeLessThan(150);
      });
    });
    it('应该拒绝无效的出生日期', function () {
      var currentYear = new Date().getFullYear();
      var invalidDates = [{
        date: `${currentYear + 1}-01-01`,
        reason: '未来日期'
      }, {
        date: 'invalid-date',
        reason: '无效格式'
      }, {
        date: '1800-01-01',
        reason: '过于久远'
      }, {
        date: `${currentYear - 152}-01-01`,
        reason: '年龄超过150岁'
      }, {
        date: '',
        reason: '空字符串'
      }, {
        date: '2024-13-01',
        reason: '无效月份'
      }, {
        date: '2024-01-32',
        reason: '无效日期'
      }];
      invalidDates.forEach(function (_ref3) {
        var date = _ref3.date,
          reason = _ref3.reason;
        var result = validateAge(date);
        expect(result.isValid).toBe(false);
        expect(result.error).toBeDefined();
      });
    });
  });
  describe('validateHealthMetric', function () {
    var validateHealthMetric = function validateHealthMetric(type, value) {
      var ranges = {
        heart_rate: {
          min: 40,
          max: 200,
          unit: 'bpm'
        },
        blood_pressure_systolic: {
          min: 70,
          max: 250,
          unit: 'mmHg'
        },
        blood_pressure_diastolic: {
          min: 40,
          max: 150,
          unit: 'mmHg'
        },
        temperature: {
          min: 35,
          max: 42,
          unit: '°C'
        },
        weight: {
          min: 20,
          max: 300,
          unit: 'kg'
        },
        height: {
          min: 50,
          max: 250,
          unit: 'cm'
        }
      };
      var range = ranges[type];
      if (!range) {
        return {
          isValid: false,
          error: '未知的健康指标类型'
        };
      }
      if (value < range.min || value > range.max) {
        return {
          isValid: false,
          error: `${type}值应在${range.min}-${range.max}${range.unit}之间`
        };
      }
      return {
        isValid: true
      };
    };
    it('应该验证有效的健康指标', function () {
      var validMetrics = [{
        type: 'heart_rate',
        value: 72
      }, {
        type: 'blood_pressure_systolic',
        value: 120
      }, {
        type: 'temperature',
        value: 36.5
      }, {
        type: 'weight',
        value: 70
      }];
      validMetrics.forEach(function (_ref4) {
        var type = _ref4.type,
          value = _ref4.value;
        var result = validateHealthMetric(type, value);
        expect(result.isValid).toBe(true);
        expect(result.error).toBeUndefined();
      });
    });
    it('应该拒绝超出范围的健康指标', function () {
      var invalidMetrics = [{
        type: 'heart_rate',
        value: 300
      }, {
        type: 'temperature',
        value: 30
      }, {
        type: 'unknown_type',
        value: 100
      }];
      invalidMetrics.forEach(function (_ref5) {
        var type = _ref5.type,
          value = _ref5.value;
        var result = validateHealthMetric(type, value);
        expect(result.isValid).toBe(false);
        expect(result.error).toBeDefined();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,