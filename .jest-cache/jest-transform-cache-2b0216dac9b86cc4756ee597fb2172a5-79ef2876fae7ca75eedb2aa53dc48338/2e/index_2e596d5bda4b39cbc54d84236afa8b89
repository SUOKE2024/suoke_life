bc529c2f674c9692f8ca3bf7d3dfbf46
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAppSelector = exports.useAppDispatch = exports.store = exports.default = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _reactRedux = require("react-redux");
var _authSlice = _interopRequireDefault(require("./slices/authSlice"));
var _userSlice = _interopRequireDefault(require("./slices/userSlice"));
var _agentsSlice = _interopRequireDefault(require("./slices/agentsSlice"));
var _diagnosisSlice = _interopRequireDefault(require("./slices/diagnosisSlice"));
var _healthSlice = _interopRequireDefault(require("./slices/healthSlice"));
var _uiSlice = _interopRequireDefault(require("./slices/uiSlice"));
var _apiMiddleware = require("./middleware/apiMiddleware");
var _persistMiddleware = require("./middleware/persistMiddleware");
var store = exports.store = (0, _toolkit.configureStore)({
  reducer: {
    auth: _authSlice.default,
    user: _userSlice.default,
    agents: _agentsSlice.default,
    diagnosis: _diagnosisSlice.default,
    health: _healthSlice.default,
    ui: _uiSlice.default
  },
  middleware: function middleware(getDefaultMiddleware) {
    return getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE', 'persist/REGISTER'],
        ignoredPaths: ['auth.token', 'auth.refreshToken']
      }
    }).concat(_apiMiddleware.apiMiddleware).concat(_persistMiddleware.persistMiddleware);
  },
  devTools: __DEV__
});
var useAppDispatch = exports.useAppDispatch = function useAppDispatch() {
  return (0, _reactRedux.useDispatch)();
};
var useAppSelector = exports.useAppSelector = _reactRedux.useSelector;
var _default = exports.default = store;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJfcmVhY3RSZWR1eCIsIl9hdXRoU2xpY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3VzZXJTbGljZSIsIl9hZ2VudHNTbGljZSIsIl9kaWFnbm9zaXNTbGljZSIsIl9oZWFsdGhTbGljZSIsIl91aVNsaWNlIiwiX2FwaU1pZGRsZXdhcmUiLCJfcGVyc2lzdE1pZGRsZXdhcmUiLCJzdG9yZSIsImV4cG9ydHMiLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJhdXRoIiwiYXV0aFNsaWNlIiwidXNlciIsInVzZXJTbGljZSIsImFnZW50cyIsImFnZW50c1NsaWNlIiwiZGlhZ25vc2lzIiwiZGlhZ25vc2lzU2xpY2UiLCJoZWFsdGgiLCJoZWFsdGhTbGljZSIsInVpIiwidWlTbGljZSIsIm1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsInNlcmlhbGl6YWJsZUNoZWNrIiwiaWdub3JlZEFjdGlvbnMiLCJpZ25vcmVkUGF0aHMiLCJjb25jYXQiLCJhcGlNaWRkbGV3YXJlIiwicGVyc2lzdE1pZGRsZXdhcmUiLCJkZXZUb29scyIsIl9fREVWX18iLCJ1c2VBcHBEaXNwYXRjaCIsInVzZURpc3BhdGNoIiwidXNlQXBwU2VsZWN0b3IiLCJ1c2VTZWxlY3RvciIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgeyBUeXBlZFVzZVNlbGVjdG9ySG9vaywgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG4vLyDlr7zlhaXlkITkuKpzbGljZVxuaW1wb3J0IGF1dGhTbGljZSBmcm9tICcuL3NsaWNlcy9hdXRoU2xpY2UnO1xuaW1wb3J0IHVzZXJTbGljZSBmcm9tICcuL3NsaWNlcy91c2VyU2xpY2UnO1xuaW1wb3J0IGFnZW50c1NsaWNlIGZyb20gJy4vc2xpY2VzL2FnZW50c1NsaWNlJztcbmltcG9ydCBkaWFnbm9zaXNTbGljZSBmcm9tICcuL3NsaWNlcy9kaWFnbm9zaXNTbGljZSc7XG5pbXBvcnQgaGVhbHRoU2xpY2UgZnJvbSAnLi9zbGljZXMvaGVhbHRoU2xpY2UnO1xuaW1wb3J0IHVpU2xpY2UgZnJvbSAnLi9zbGljZXMvdWlTbGljZSc7XG5cbi8vIOWvvOWFpeS4remXtOS7tlxuaW1wb3J0IHsgYXBpTWlkZGxld2FyZSB9IGZyb20gJy4vbWlkZGxld2FyZS9hcGlNaWRkbGV3YXJlJztcbmltcG9ydCB7IHBlcnNpc3RNaWRkbGV3YXJlIH0gZnJvbSAnLi9taWRkbGV3YXJlL3BlcnNpc3RNaWRkbGV3YXJlJztcblxuLy8g6YWN572uc3RvcmVcbmV4cG9ydCBjb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcbiAgcmVkdWNlcjoge1xuICAgIGF1dGg6IGF1dGhTbGljZSxcbiAgICB1c2VyOiB1c2VyU2xpY2UsXG4gICAgYWdlbnRzOiBhZ2VudHNTbGljZSxcbiAgICBkaWFnbm9zaXM6IGRpYWdub3Npc1NsaWNlLFxuICAgIGhlYWx0aDogaGVhbHRoU2xpY2UsXG4gICAgdWk6IHVpU2xpY2UsXG4gIH0sXG4gIG1pZGRsZXdhcmU6IChnZXREZWZhdWx0TWlkZGxld2FyZSkgPT5cbiAgICBnZXREZWZhdWx0TWlkZGxld2FyZSh7XG4gICAgICBzZXJpYWxpemFibGVDaGVjazoge1xuICAgICAgICAvLyDlv73nlaXov5nkupthY3Rpb27nsbvlnovnmoTluo/liJfljJbmo4Dmn6VcbiAgICAgICAgaWdub3JlZEFjdGlvbnM6IFtcbiAgICAgICAgICAncGVyc2lzdC9QRVJTSVNUJyxcbiAgICAgICAgICAncGVyc2lzdC9SRUhZRFJBVEUnLFxuICAgICAgICAgICdwZXJzaXN0L1JFR0lTVEVSJyxcbiAgICAgICAgXSxcbiAgICAgICAgLy8g5b+955Wl6L+Z5Lqb6Lev5b6E55qE5bqP5YiX5YyW5qOA5p+lXG4gICAgICAgIGlnbm9yZWRQYXRoczogWydhdXRoLnRva2VuJywgJ2F1dGgucmVmcmVzaFRva2VuJ10sXG4gICAgICB9LFxuICAgIH0pXG4gICAgICAuY29uY2F0KGFwaU1pZGRsZXdhcmUpXG4gICAgICAuY29uY2F0KHBlcnNpc3RNaWRkbGV3YXJlKSxcbiAgZGV2VG9vbHM6IF9fREVWX18sXG59KTtcblxuLy8g5a+85Ye657G75Z6LXG5leHBvcnQgdHlwZSBSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XG5leHBvcnQgdHlwZSBBcHBEaXNwYXRjaCA9IHR5cGVvZiBzdG9yZS5kaXNwYXRjaDtcblxuLy8g5Yib5bu657G75Z6L5YyW55qEaG9va3NcbmV4cG9ydCBjb25zdCB1c2VBcHBEaXNwYXRjaCA9ICgpID0+IHVzZURpc3BhdGNoPEFwcERpc3BhdGNoPigpO1xuZXhwb3J0IGNvbnN0IHVzZUFwcFNlbGVjdG9yOiBUeXBlZFVzZVNlbGVjdG9ySG9vazxSb290U3RhdGU+ID0gdXNlU2VsZWN0b3I7XG5cbi8vIOWvvOWHunN0b3JlXG5leHBvcnQgZGVmYXVsdCBzdG9yZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxVQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFELHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFGLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBTSxlQUFBLEdBQUFILHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBTyxZQUFBLEdBQUFKLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBUSxRQUFBLEdBQUFMLHNCQUFBLENBQUFILE9BQUE7QUFHQSxJQUFBUyxjQUFBLEdBQUFULE9BQUE7QUFDQSxJQUFBVSxrQkFBQSxHQUFBVixPQUFBO0FBR08sSUFBTVcsS0FBSyxHQUFBQyxPQUFBLENBQUFELEtBQUEsR0FBRyxJQUFBRSx1QkFBYyxFQUFDO0VBQ2xDQyxPQUFPLEVBQUU7SUFDUEMsSUFBSSxFQUFFQyxrQkFBUztJQUNmQyxJQUFJLEVBQUVDLGtCQUFTO0lBQ2ZDLE1BQU0sRUFBRUMsb0JBQVc7SUFDbkJDLFNBQVMsRUFBRUMsdUJBQWM7SUFDekJDLE1BQU0sRUFBRUMsb0JBQVc7SUFDbkJDLEVBQUUsRUFBRUM7RUFDTixDQUFDO0VBQ0RDLFVBQVUsRUFBRSxTQUFaQSxVQUFVQSxDQUFHQyxvQkFBb0I7SUFBQSxPQUMvQkEsb0JBQW9CLENBQUM7TUFDbkJDLGlCQUFpQixFQUFFO1FBRWpCQyxjQUFjLEVBQUUsQ0FDZCxpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLGtCQUFrQixDQUNuQjtRQUVEQyxZQUFZLEVBQUUsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CO01BQ2xEO0lBQ0YsQ0FBQyxDQUFDLENBQ0NDLE1BQU0sQ0FBQ0MsNEJBQWEsQ0FBQyxDQUNyQkQsTUFBTSxDQUFDRSxvQ0FBaUIsQ0FBQztFQUFBO0VBQzlCQyxRQUFRLEVBQUVDO0FBQ1osQ0FBQyxDQUFDO0FBT0ssSUFBTUMsY0FBYyxHQUFBekIsT0FBQSxDQUFBeUIsY0FBQSxHQUFHLFNBQWpCQSxjQUFjQSxDQUFBO0VBQUEsT0FBUyxJQUFBQyx1QkFBVyxFQUFjLENBQUM7QUFBQTtBQUN2RCxJQUFNQyxjQUErQyxHQUFBM0IsT0FBQSxDQUFBMkIsY0FBQSxHQUFHQyx1QkFBVztBQUFDLElBQUFDLFFBQUEsR0FBQTdCLE9BQUEsQ0FBQThCLE9BQUEsR0FHNUQvQixLQUFLIiwiaWdub3JlTGlzdCI6W119