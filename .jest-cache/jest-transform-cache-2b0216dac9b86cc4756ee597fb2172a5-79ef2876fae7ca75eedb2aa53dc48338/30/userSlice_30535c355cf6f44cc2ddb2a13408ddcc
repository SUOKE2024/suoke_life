7a80d77eb2bd88df2c0929ee58430af1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateUserProfile = exports.updateHealthData = exports.selectUserProfile = exports.selectUserLoading = exports.selectUserError = exports.selectUser = exports.selectHealthData = exports.removeHealthData = exports.fetchUserProfile = exports.fetchHealthData = exports.default = exports.clearError = exports.addHealthData = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toolkit = require("@reduxjs/toolkit");
var _apiClient = require("../../services/apiClient");
var initialState = {
  profile: undefined,
  healthData: [],
  loading: false,
  error: undefined
};
var fetchUserProfile = exports.fetchUserProfile = (0, _toolkit.createAsyncThunk)("user/fetchProfile", function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_, _ref) {
    var rejectWithValue = _ref.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.get("/user/profile");
      if (!response.success) {
        var _response$error;
        throw new Error(((_response$error = response.error) == null ? void 0 : _response$error.message) || "获取用户资料失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "获取用户资料失败");
    }
  });
  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}());
var updateUserProfile = exports.updateUserProfile = (0, _toolkit.createAsyncThunk)("user/updateProfile", function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (profileData, _ref3) {
    var rejectWithValue = _ref3.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.put("/user/profile", profileData);
      if (!response.success) {
        var _response$error2;
        throw new Error(((_response$error2 = response.error) == null ? void 0 : _response$error2.message) || "更新用户资料失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "更新用户资料失败");
    }
  });
  return function (_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}());
var fetchHealthData = exports.fetchHealthData = (0, _toolkit.createAsyncThunk)("user/fetchHealthData", (0, _asyncToGenerator2.default)(function* () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref6 = arguments.length > 1 ? arguments[1] : undefined,
    rejectWithValue = _ref6.rejectWithValue;
  try {
    var queryParams = new URLSearchParams();
    if (params.limit) {
      queryParams.append('limit', params.limit.toString());
    }
    if (params.offset) {
      queryParams.append('offset', params.offset.toString());
    }
    var url = `/user/health-data${queryParams.toString() ? `?${queryParams.toString()}` : ""}`;
    var response = yield _apiClient.apiClient.get(url);
    if (!response.success) {
      var _response$error3;
      throw new Error(((_response$error3 = response.error) == null ? void 0 : _response$error3.message) || "获取健康数据失败");
    }
    return response.data;
  } catch (error) {
    return rejectWithValue(error.message || "获取健康数据失败");
  }
}));
var addHealthData = exports.addHealthData = (0, _toolkit.createAsyncThunk)("user/addHealthData", function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (healthData, _ref7) {
    var rejectWithValue = _ref7.rejectWithValue;
    try {
      var response = yield _apiClient.apiClient.post("/user/health-data", healthData);
      if (!response.success) {
        var _response$error4;
        throw new Error(((_response$error4 = response.error) == null ? void 0 : _response$error4.message) || "添加健康数据失败");
      }
      return response.data;
    } catch (error) {
      return rejectWithValue(error.message || "添加健康数据失败");
    }
  });
  return function (_x5, _x6) {
    return _ref8.apply(this, arguments);
  };
}());
var userSlice = (0, _toolkit.createSlice)({
  name: "user",
  initialState: initialState,
  reducers: {
    clearError: function clearError(state) {
      state.error = undefined;
    },
    updateHealthData: function updateHealthData(state, action) {
      var index = state.healthData.findIndex(function (item) {
        return item.id === action.payload.id;
      });
      if (index >= 0) {
        state.healthData[index] = action.payload;
      } else {
        state.healthData.unshift(action.payload);
      }
    },
    removeHealthData: function removeHealthData(state, action) {
      state.healthData = state.healthData.filter(function (item) {
        return item.id !== action.payload;
      });
    }
  },
  extraReducers: function extraReducers(builder) {
    builder.addCase(fetchUserProfile.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(fetchUserProfile.fulfilled, function (state, action) {
      state.loading = false;
      state.profile = action.payload;
      state.error = undefined;
    }).addCase(fetchUserProfile.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(updateUserProfile.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(updateUserProfile.fulfilled, function (state, action) {
      state.loading = false;
      state.profile = action.payload;
      state.error = undefined;
    }).addCase(updateUserProfile.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(fetchHealthData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(fetchHealthData.fulfilled, function (state, action) {
      state.loading = false;
      state.healthData = action.payload;
      state.error = undefined;
    }).addCase(fetchHealthData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
    builder.addCase(addHealthData.pending, function (state) {
      state.loading = true;
      state.error = undefined;
    }).addCase(addHealthData.fulfilled, function (state, action) {
      state.loading = false;
      state.healthData.unshift(action.payload);
      state.error = undefined;
    }).addCase(addHealthData.rejected, function (state, action) {
      state.loading = false;
      state.error = action.payload;
    });
  }
});
var _userSlice$actions = userSlice.actions,
  clearError = exports.clearError = _userSlice$actions.clearError,
  updateHealthData = exports.updateHealthData = _userSlice$actions.updateHealthData,
  removeHealthData = exports.removeHealthData = _userSlice$actions.removeHealthData;
var selectUser = exports.selectUser = function selectUser(state) {
  return state.user;
};
var selectUserProfile = exports.selectUserProfile = function selectUserProfile(state) {
  return state.user.profile;
};
var selectHealthData = exports.selectHealthData = function selectHealthData(state) {
  return state.user.healthData;
};
var selectUserLoading = exports.selectUserLoading = function selectUserLoading(state) {
  return state.user.loading;
};
var selectUserError = exports.selectUserError = function selectUserError(state) {
  return state.user.error;
};
var _default = exports.default = userSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,