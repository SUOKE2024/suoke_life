7c9dcf58a94324158220aa21e4b5d0e8
_getJestObj().mock('../../services/authService', function () {
  return {
    authService: mockAuthService
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactRedux = require("react-redux");
var _reactNative2 = require("react-native");
var _store = require("../../store");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAuthService = {
  login: jest.fn(),
  register: jest.fn(),
  logout: jest.fn(),
  getCurrentUser: jest.fn(),
  refreshToken: jest.fn()
};
var LoginComponent = function LoginComponent() {
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    email = _React$useState2[0],
    setEmail = _React$useState2[1];
  var _React$useState3 = _react.default.useState(''),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    password = _React$useState4[0],
    setPassword = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    loading = _React$useState6[0],
    setLoading = _React$useState6[1];
  var _React$useState7 = _react.default.useState(''),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    error = _React$useState8[0],
    setError = _React$useState8[1];
  var handleLogin = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      setError('');
      try {
        yield mockAuthService.login({
          email: email,
          password: password
        });
      } catch (error) {
        console.error('Login failed:', error);
        setError('登录失败');
      } finally {
        setLoading(false);
      }
    });
    return function handleLogin() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "login-component",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "email-input",
      value: email,
      onChangeText: setEmail,
      placeholder: "\u90AE\u7BB1"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "password-input",
      value: password,
      onChangeText: setPassword,
      placeholder: "\u5BC6\u7801",
      secureTextEntry: true
    }), error ? (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "error-message",
      children: error
    }) : null, (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login-button",
      onPress: handleLogin,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '登录中...' : '登录'
      })
    })]
  });
};
var RegisterComponent = function RegisterComponent() {
  var _React$useState9 = _react.default.useState(''),
    _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
    email = _React$useState0[0],
    setEmail = _React$useState0[1];
  var _React$useState1 = _react.default.useState(''),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
    password = _React$useState10[0],
    setPassword = _React$useState10[1];
  var _React$useState11 = _react.default.useState(''),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    confirmPassword = _React$useState12[0],
    setConfirmPassword = _React$useState12[1];
  var _React$useState13 = _react.default.useState(false),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    loading = _React$useState14[0],
    setLoading = _React$useState14[1];
  var _React$useState15 = _react.default.useState(''),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    error = _React$useState16[0],
    setError = _React$useState16[1];
  var handleRegister = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (password !== confirmPassword) {
        setError('密码不匹配');
        return;
      }
      setLoading(true);
      setError('');
      try {
        yield mockAuthService.register({
          email: email,
          password: password
        });
      } catch (error) {
        console.error('Registration failed:', error);
        setError('注册失败');
      } finally {
        setLoading(false);
      }
    });
    return function handleRegister() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "register-component",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "register-email-input",
      value: email,
      onChangeText: setEmail,
      placeholder: "\u6CE8\u518C\u90AE\u7BB1"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "register-password-input",
      value: password,
      onChangeText: setPassword,
      placeholder: "\u6CE8\u518C\u5BC6\u7801",
      secureTextEntry: true
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "confirm-password-input",
      value: confirmPassword,
      onChangeText: setConfirmPassword,
      placeholder: "\u786E\u8BA4\u5BC6\u7801",
      secureTextEntry: true
    }), error ? (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "error-message",
      children: error
    }) : null, (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register-button",
      onPress: handleRegister,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '注册中...' : '注册'
      })
    })]
  });
};
var HomeComponent = function HomeComponent() {
  var _React$useState17 = _react.default.useState(false),
    _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
    loading = _React$useState18[0],
    setLoading = _React$useState18[1];
  var handleLogout = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      try {
        yield mockAuthService.logout();
      } catch (error) {
        console.error('Logout failed:', error);
      } finally {
        setLoading(false);
      }
    });
    return function handleLogout() {
      return _ref3.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "home-component",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "welcome-message",
      children: "\u6B22\u8FCE\u56DE\u6765\uFF01"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "logout-button",
      onPress: handleLogout,
      disabled: loading,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: loading ? '登出中...' : '登出'
      })
    })]
  });
};
var TestWrapper = function TestWrapper(_ref4) {
  var children = _ref4.children;
  return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
    store: _store.store,
    children: children
  });
};
describe('认证流程集成测试', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('登录流程', function () {
    it('应该成功完成登录流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(LoginComponent, {})
        })),
        toJSON = _render.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('邮箱');
      expect(JSON.stringify(tree)).toContain('密码');
      expect(JSON.stringify(tree)).toContain('登录');
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith({
          email: '',
          password: ''
        });
      });
    }));
    it('应该处理登录错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('登录失败'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));
        expect(_reactNative.screen.getByText('登录失败')).toBeTruthy();
      });
      consoleSpy.mockRestore();
    }));
    it('应该在登录过程中显示加载状态', (0, _asyncToGenerator2.default)(function* () {
      var resolveLogin;
      mockAuthService.login.mockImplementation(function () {
        return new Promise(function (resolve) {
          resolveLogin = resolve;
        });
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      expect(_reactNative.screen.getByText('登录中...')).toBeTruthy();
      resolveLogin({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByText('登录')).toBeTruthy();
      });
    }));
    it('应该处理空输入', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalledWith({
          email: '',
          password: ''
        });
      });
    }));
  });
  describe('注册流程', function () {
    it('应该成功完成注册流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        user: {
          id: '2',
          email: 'newuser@example.com',
          name: '新用户'
        },
        token: 'new-token'
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(RegisterComponent, {})
        })),
        toJSON = _render2.toJSON;
      var tree = toJSON();
      expect(JSON.stringify(tree)).toContain('注册邮箱');
      expect(JSON.stringify(tree)).toContain('注册密码');
      expect(JSON.stringify(tree)).toContain('确认密码');
      expect(JSON.stringify(tree)).toContain('注册');
      var registerText = _reactNative.screen.getByText('注册');
      _reactNative.fireEvent.press(registerText);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.register).toHaveBeenCalledWith({
          email: '',
          password: ''
        });
      });
    }));
    it('应该验证密码匹配', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(RegisterComponent, {})
      }));
      var registerText = _reactNative.screen.getByText('注册');
      _reactNative.fireEvent.press(registerText);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByText('密码不匹配')).toBeTruthy();
      });
      expect(mockAuthService.register).not.toHaveBeenCalled();
    }));
    it('应该处理注册错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockRejectedValue(new Error('注册失败'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(RegisterComponent, {})
      }));
      var registerText = _reactNative.screen.getByText('注册');
      _reactNative.fireEvent.press(registerText);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Registration failed:', expect.any(Error));
        expect(_reactNative.screen.getByText('注册失败')).toBeTruthy();
      });
      consoleSpy.mockRestore();
    }));
  });
  describe('登出流程', function () {
    it('应该成功完成登出流程', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.logout.mockResolvedValue(undefined);
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(HomeComponent, {})
      }));
      var logoutText = _reactNative.screen.getByText('登出');
      _reactNative.fireEvent.press(logoutText);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.logout).toHaveBeenCalled();
      });
    }));
    it('应该在登出过程中显示加载状态', (0, _asyncToGenerator2.default)(function* () {
      var resolveLogout;
      mockAuthService.logout.mockImplementation(function () {
        return new Promise(function (resolve) {
          resolveLogout = resolve;
        });
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(HomeComponent, {})
      }));
      var logoutText = _reactNative.screen.getByText('登出');
      _reactNative.fireEvent.press(logoutText);
      expect(_reactNative.screen.getByText('登出中...')).toBeTruthy();
      resolveLogout(undefined);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative.screen.getByText('登出')).toBeTruthy();
      });
    }));
  });
  describe('性能测试', function () {
    it('登录流程应该在合理时间内完成', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      var startTime = performance.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalled();
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(1000);
    }));
    it('应该高效处理多个并发登录请求', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockResolvedValue({
        user: {
          id: '1',
          email: 'test@example.com',
          name: '测试用户'
        },
        token: 'mock-token'
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var startTime = performance.now();
      var loginText = _reactNative.screen.getByText('登录');
      for (var i = 0; i < 5; i++) {
        _reactNative.fireEvent.press(loginText);
      }
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAuthService.login).toHaveBeenCalled();
      });
      var endTime = performance.now();
      var totalTime = endTime - startTime;
      expect(totalTime).toBeLessThan(2000);
      expect(mockAuthService.login).toHaveBeenCalledTimes(1);
    }));
    it('组件渲染性能测试', (0, _asyncToGenerator2.default)(function* () {
      var iterations = 10;
      var times = [];
      for (var i = 0; i < iterations; i++) {
        var startTime = performance.now();
        var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
            children: (0, _jsxRuntime.jsx)(LoginComponent, {})
          })),
          unmount = _render3.unmount;
        var endTime = performance.now();
        unmount();
        times.push(endTime - startTime);
      }
      var averageTime = times.reduce(function (sum, time) {
        return sum + time;
      }, 0) / iterations;
      expect(averageTime).toBeLessThan(200);
    }));
  });
  describe('错误处理', function () {
    it('应该处理网络错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.login.mockRejectedValue(new Error('网络连接失败'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(LoginComponent, {})
      }));
      var loginText = _reactNative.screen.getByText('登录');
      _reactNative.fireEvent.press(loginText);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Login failed:', expect.any(Error));
        expect(_reactNative.screen.getByText('登录失败')).toBeTruthy();
      });
      consoleSpy.mockRestore();
    }));
    it('应该处理服务器错误', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockRejectedValue(new Error('服务器内部错误'));
      var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
        children: (0, _jsxRuntime.jsx)(RegisterComponent, {})
      }));
      var registerText = _reactNative.screen.getByText('注册');
      _reactNative.fireEvent.press(registerText);
      yield (0, _reactNative.waitFor)(function () {
        expect(consoleSpy).toHaveBeenCalledWith('Registration failed:', expect.any(Error));
        expect(_reactNative.screen.getByText('注册失败')).toBeTruthy();
      });
      consoleSpy.mockRestore();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,