0b7b9a73d8c8134d0c5e9741b1af10fc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearPersistedState = clearPersistedState;
exports.persistMiddleware = exports.default = void 0;
exports.restorePersistedState = restorePersistedState;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _config = require("../../constants/config");
var PERSIST_ACTIONS = ['auth/login/fulfilled', 'auth/logout/fulfilled', 'ui/setTheme', 'ui/setLanguage', 'user/updateProfile/fulfilled'];
var persistMiddleware = exports.persistMiddleware = function persistMiddleware(store) {
  return function (next) {
    return function (action) {
      var result = next(action);
      if (action.type && PERSIST_ACTIONS.includes(action.type)) {
        var state = store.getState();
        persistState(action.type, state);
      }
      return result;
    };
  };
};
function persistState(_x, _x2) {
  return _persistState.apply(this, arguments);
}
function _persistState() {
  _persistState = (0, _asyncToGenerator2.default)(function* (actionType, state) {
    var _state$auth$user;
    try {
      switch (actionType) {
        case 'auth/login/fulfilled':
          if (state.auth.token) {
            yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, state.auth.token);
          }
          if (state.auth.refreshToken) {
            yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, state.auth.refreshToken);
          }
          if ((_state$auth$user = state.auth.user) != null && _state$auth$user.id) {
            yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.USER_ID, state.auth.user.id);
          }
          break;
        case 'auth/logout/fulfilled':
          yield _asyncStorage.default.multiRemove([_config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, _config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, _config.STORAGE_CONFIG.KEYS.USER_ID]);
          break;
        case 'ui/setTheme':
          yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.THEME, state.ui.theme);
          break;
        case 'ui/setLanguage':
          yield _asyncStorage.default.setItem(_config.STORAGE_CONFIG.KEYS.LANGUAGE, state.ui.language);
          break;
        case 'user/updateProfile/fulfilled':
          if (state.user.profile) {
            yield _asyncStorage.default.setItem(`${_config.STORAGE_CONFIG.KEYS.USER_ID}_profile`, JSON.stringify(state.user.profile));
          }
          break;
        default:
          break;
      }
    } catch (error) {
      console.warn('持久化状态失败:', error);
    }
  });
  return _persistState.apply(this, arguments);
}
function restorePersistedState() {
  return _restorePersistedState.apply(this, arguments);
}
function _restorePersistedState() {
  _restorePersistedState = (0, _asyncToGenerator2.default)(function* () {
    try {
      var _yield$AsyncStorage$m = yield _asyncStorage.default.multiGet([_config.STORAGE_CONFIG.KEYS.THEME, _config.STORAGE_CONFIG.KEYS.LANGUAGE, _config.STORAGE_CONFIG.KEYS.AUTH_TOKEN, _config.STORAGE_CONFIG.KEYS.REFRESH_TOKEN, _config.STORAGE_CONFIG.KEYS.USER_ID]),
        _yield$AsyncStorage$m2 = (0, _slicedToArray2.default)(_yield$AsyncStorage$m, 5),
        theme = _yield$AsyncStorage$m2[0],
        language = _yield$AsyncStorage$m2[1],
        authToken = _yield$AsyncStorage$m2[2],
        refreshToken = _yield$AsyncStorage$m2[3],
        userId = _yield$AsyncStorage$m2[4];
      var persistedState = {};
      if (theme[1]) {
        persistedState.ui = {
          theme: theme[1],
          language: language[1] || 'zh',
          notifications: [],
          loading: false
        };
      }
      if (authToken[1] && userId[1]) {
        persistedState.auth = {
          isAuthenticated: true,
          token: authToken[1],
          refreshToken: refreshToken[1],
          loading: false,
          error: undefined
        };
      }
      return persistedState;
    } catch (error) {
      console.warn('恢复持久化状态失败:', error);
      return {};
    }
  });
  return _restorePersistedState.apply(this, arguments);
}
function clearPersistedState() {
  return _clearPersistedState.apply(this, arguments);
}
function _clearPersistedState() {
  _clearPersistedState = (0, _asyncToGenerator2.default)(function* () {
    try {
      var keys = Object.values(_config.STORAGE_CONFIG.KEYS);
      yield _asyncStorage.default.multiRemove(keys);
    } catch (error) {
      console.warn('清除持久化状态失败:', error);
    }
  });
  return _clearPersistedState.apply(this, arguments);
}
var _default = exports.default = persistMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,