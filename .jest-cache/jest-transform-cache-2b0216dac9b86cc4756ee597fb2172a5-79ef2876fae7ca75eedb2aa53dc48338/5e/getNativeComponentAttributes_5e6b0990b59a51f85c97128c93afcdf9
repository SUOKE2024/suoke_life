be67d862e61c5e60b576b590ceaed537
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _processBoxShadow = _interopRequireDefault(require("../StyleSheet/processBoxShadow"));
var ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes').default;
var resolveAssetSource = require('../Image/resolveAssetSource').default;
var processBackgroundImage = require('../StyleSheet/processBackgroundImage').default;
var processColor = require('../StyleSheet/processColor').default;
var processColorArray = require('../StyleSheet/processColorArray').default;
var processFilter = require('../StyleSheet/processFilter').default;
var insetsDiffer = require('../Utilities/differ/insetsDiffer').default;
var matricesDiffer = require('../Utilities/differ/matricesDiffer').default;
var pointsDiffer = require('../Utilities/differ/pointsDiffer').default;
var sizesDiffer = require('../Utilities/differ/sizesDiffer').default;
var UIManager = require('./UIManager').default;
var nullthrows = require('nullthrows');
function getNativeComponentAttributes(uiViewClassName) {
  var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
  if (viewConfig == null) {
    return null;
  }
  var baseModuleName = viewConfig.baseModuleName,
    bubblingEventTypes = viewConfig.bubblingEventTypes,
    directEventTypes = viewConfig.directEventTypes;
  var nativeProps = viewConfig.NativeProps;
  bubblingEventTypes = bubblingEventTypes != null ? bubblingEventTypes : {};
  directEventTypes = directEventTypes != null ? directEventTypes : {};
  while (baseModuleName) {
    var baseModule = UIManager.getViewManagerConfig(baseModuleName);
    if (!baseModule) {
      baseModuleName = null;
    } else {
      bubblingEventTypes = Object.assign({}, baseModule.bubblingEventTypes, bubblingEventTypes);
      directEventTypes = Object.assign({}, baseModule.directEventTypes, directEventTypes);
      nativeProps = Object.assign({}, baseModule.NativeProps, nativeProps);
      baseModuleName = baseModule.baseModuleName;
    }
  }
  var validAttributes = {};
  for (var key in nativeProps) {
    var typeName = nativeProps[key];
    var diff = getDifferForType(typeName);
    var process = getProcessorForType(typeName);
    validAttributes[key] = diff == null ? process == null ? true : {
      process: process
    } : process == null ? {
      diff: diff
    } : {
      diff: diff,
      process: process
    };
  }
  validAttributes.style = ReactNativeStyleAttributes;
  Object.assign(viewConfig, {
    uiViewClassName: uiViewClassName,
    validAttributes: validAttributes,
    bubblingEventTypes: bubblingEventTypes,
    directEventTypes: directEventTypes
  });
  attachDefaultEventTypes(viewConfig);
  return viewConfig;
}
function attachDefaultEventTypes(viewConfig) {
  var constants = UIManager.getConstants();
  if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
    viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
  } else {
    viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
    viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
  }
}
function merge(destination, source) {
  if (!source) {
    return destination;
  }
  if (!destination) {
    return source;
  }
  for (var key in source) {
    if (!source.hasOwnProperty(key)) {
      continue;
    }
    var sourceValue = source[key];
    if (destination.hasOwnProperty(key)) {
      var destinationValue = destination[key];
      if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
        sourceValue = merge(destinationValue, sourceValue);
      }
    }
    destination[key] = sourceValue;
  }
  return destination;
}
function getDifferForType(typeName) {
  switch (typeName) {
    case 'CATransform3D':
      return matricesDiffer;
    case 'CGPoint':
      return pointsDiffer;
    case 'CGSize':
      return sizesDiffer;
    case 'UIEdgeInsets':
      return insetsDiffer;
    case 'Point':
      return pointsDiffer;
    case 'EdgeInsets':
      return insetsDiffer;
  }
  return null;
}
function getProcessorForType(typeName) {
  switch (typeName) {
    case 'CGColor':
    case 'UIColor':
      return processColor;
    case 'CGColorArray':
    case 'UIColorArray':
      return processColorArray;
    case 'CGImage':
    case 'UIImage':
    case 'RCTImageSource':
      return resolveAssetSource;
    case 'BoxShadowArray':
      return _processBoxShadow.default;
    case 'FilterArray':
      return processFilter;
    case 'Color':
      return processColor;
    case 'ColorArray':
      return processColorArray;
    case 'Filter':
      return processFilter;
    case 'BackgroundImage':
      return processBackgroundImage;
    case 'ImageSource':
      return resolveAssetSource;
    case 'BoxShadow':
      return _processBoxShadow.default;
  }
  return null;
}
var _default = exports.default = getNativeComponentAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,