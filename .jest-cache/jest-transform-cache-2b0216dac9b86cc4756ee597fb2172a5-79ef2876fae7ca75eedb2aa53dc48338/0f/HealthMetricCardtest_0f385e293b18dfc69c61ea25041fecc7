2a66214668aae3e247080c8c4381bbc1
_getJestObj().mock('../../components/common/Icon', function () {
  var _require = require('react-native'),
    Text = _require.Text;
  return function (_ref) {
    var name = _ref.name,
      size = _ref.size,
      color = _ref.color;
    return (0, _jsxRuntime.jsx)(Text, {
      testID: `icon-${name}`,
      style: {
        fontSize: size,
        color: color
      },
      children: name
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HealthMetricCard = _interopRequireDefault(require("../../screens/components/HealthMetricCard"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMetric = {
  id: 'mood',
  name: '心情指数',
  value: 85,
  unit: '分',
  target: 80,
  icon: 'emoticon-happy',
  color: '#4CAF50',
  trend: 'up',
  suggestion: '保持积极心态，今天心情不错！',
  history: [{
    date: '2024-01-01',
    value: 80
  }, {
    date: '2024-01-02',
    value: 82
  }, {
    date: '2024-01-03',
    value: 85
  }]
};
var mockGetTrendIcon = function mockGetTrendIcon(trend) {
  switch (trend) {
    case 'up':
      return 'trending-up';
    case 'down':
      return 'trending-down';
    default:
      return 'trending-neutral';
  }
};
describe('HealthMetricCard', function () {
  it('应该正确渲染健康指标信息', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByTestId('icon-emoticon-happy')).toBeTruthy();
    expect(getByText('85')).toBeTruthy();
    expect(getByText('分')).toBeTruthy();
    expect(getByText('目标: 80分')).toBeTruthy();
    expect(getByText('保持积极心态，今天心情不错！')).toBeTruthy();
  });
  it('应该在有onPress时响应点击', function () {
    var _getByTestId$parent;
    var mockOnPress = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockMetric,
        onPress: mockOnPress,
        getTrendIcon: mockGetTrendIcon
      })),
      getByTestId = _render2.getByTestId;
    var container = (_getByTestId$parent = getByTestId('icon-emoticon-happy').parent) == null || (_getByTestId$parent = _getByTestId$parent.parent) == null ? void 0 : _getByTestId$parent.parent;
    if (container) {
      _reactNative.fireEvent.press(container);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    }
  });
  it('应该正确显示不同的数值', function () {
    var highValueMetric = Object.assign({}, mockMetric, {
      value: 90
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: highValueMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render3.getByText;
    expect(getByText('90')).toBeTruthy();
    expect(getByText('目标: 80分')).toBeTruthy();
    var lowValueMetric = Object.assign({}, mockMetric, {
      value: 70
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: lowValueMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByTextLow = _render4.getByText;
    expect(getByTextLow('70')).toBeTruthy();
  });
  it('应该正确显示不同趋势的图标', function () {
    var trends = ['up', 'down', 'stable'];
    trends.forEach(function (trend) {
      var trendMetric = Object.assign({}, mockMetric, {
        trend: trend
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
          metric: trendMetric,
          getTrendIcon: mockGetTrendIcon
        })),
        getByTestId = _render5.getByTestId;
      expect(getByTestId(`icon-${mockGetTrendIcon(trend)}`)).toBeTruthy();
    });
  });
  it('应该处理没有历史数据的情况', function () {
    var noHistoryMetric = Object.assign({}, mockMetric, {
      history: []
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: noHistoryMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByText = _render6.getByText;
    expect(getByText('85')).toBeTruthy();
  });
  it('应该在没有onPress时不响应点击', function () {
    var _getByTestId$parent2;
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HealthMetricCard.default, {
        metric: mockMetric,
        getTrendIcon: mockGetTrendIcon
      })),
      getByTestId = _render7.getByTestId;
    var container = (_getByTestId$parent2 = getByTestId('icon-emoticon-happy').parent) == null || (_getByTestId$parent2 = _getByTestId$parent2.parent) == null ? void 0 : _getByTestId$parent2.parent;
    if (container) {
      _reactNative.fireEvent.press(container);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,