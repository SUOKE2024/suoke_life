597e1128b1df32b8c9780a474717429f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProfileHeader = _interopRequireDefault(require("../../screens/components/ProfileHeader"));
var _jsxRuntime = require("react/jsx-runtime");
var mockUserProfile = {
  id: 'test_user',
  name: 'ÊµãËØïÁî®Êà∑',
  avatar: 'üë§',
  age: 28,
  gender: 'male',
  constitution: 'Ê∞îËôöË¥®',
  memberLevel: 'gold',
  joinDate: '2023-03-15',
  healthScore: 85,
  totalDiagnosis: 24,
  consecutiveDays: 15,
  healthPoints: 1280,
  email: 'test@example.com',
  phone: '+86 138 0013 8000',
  location: 'Âåó‰∫¨Â∏ÇÊúùÈò≥Âå∫',
  bio: 'ÊµãËØïÁî®Êà∑ÁÆÄ‰ªã'
};
var mockGetHealthScoreColor = function mockGetHealthScoreColor(score) {
  if (score >= 80) return '#34C759';
  if (score >= 60) return '#FF9500';
  return '#FF3B30';
};
var mockGetMemberLevelText = function mockGetMemberLevelText(level) {
  var levelMap = {
    bronze: 'ÈùíÈìú‰ºöÂëò',
    silver: 'ÁôΩÈì∂‰ºöÂëò',
    gold: 'ÈªÑÈáë‰ºöÂëò',
    platinum: 'ÈìÇÈáë‰ºöÂëò',
    diamond: 'ÈíªÁü≥‰ºöÂëò'
  };
  return levelMap[level] || 'ÊôÆÈÄö‰ºöÂëò';
};
describe('ProfileHeader', function () {
  var mockOnEditPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÁî®Êà∑‰ø°ÊÅØ', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: mockUserProfile,
        onEditPress: mockOnEditPress,
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      })),
      getByText = _render.getByText;
    expect(getByText('ÊµãËØïÁî®Êà∑')).toBeTruthy();
    expect(getByText('ÈªÑÈáë‰ºöÂëò')).toBeTruthy();
    expect(getByText('Âä†ÂÖ•Êó∂Èó¥Ôºö2023-03-15')).toBeTruthy();
  });
  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫ÁªüËÆ°Êï∞ÊçÆ', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: mockUserProfile,
        onEditPress: mockOnEditPress,
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      })),
      getByText = _render2.getByText;
    expect(getByText('85')).toBeTruthy();
    expect(getByText('24')).toBeTruthy();
    expect(getByText('15')).toBeTruthy();
    expect(getByText('1280')).toBeTruthy();
    expect(getByText('ÂÅ•Â∫∑ÂàÜÊï∞')).toBeTruthy();
    expect(getByText('ËØäÊñ≠Ê¨°Êï∞')).toBeTruthy();
    expect(getByText('ËøûÁª≠Â§©Êï∞')).toBeTruthy();
    expect(getByText('ÂÅ•Â∫∑ÁßØÂàÜ')).toBeTruthy();
  });
  it('Â∫îËØ•Âú®ÁÇπÂáªÁºñËæëÊåâÈíÆÊó∂Ë∞ÉÁî®onEditPress', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: mockUserProfile,
        onEditPress: mockOnEditPress,
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      })),
      getByTestId = _render3.getByTestId;
  });
  it('Â∫îËØ•Ê†πÊçÆÂÅ•Â∫∑ÂàÜÊï∞ÊòæÁ§∫Ê≠£Á°ÆÁöÑÈ¢úËâ≤', function () {
    var highScoreProfile = Object.assign({}, mockUserProfile, {
      healthScore: 90
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
        userProfile: highScoreProfile,
        onEditPress: mockOnEditPress,
        getHealthScoreColor: mockGetHealthScoreColor,
        getMemberLevelText: mockGetMemberLevelText
      })),
      rerender = _render4.rerender;
    expect(mockGetHealthScoreColor(90)).toBe('#34C759');
    var mediumScoreProfile = Object.assign({}, mockUserProfile, {
      healthScore: 70
    });
    rerender((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
      userProfile: mediumScoreProfile,
      onEditPress: mockOnEditPress,
      getHealthScoreColor: mockGetHealthScoreColor,
      getMemberLevelText: mockGetMemberLevelText
    }));
    expect(mockGetHealthScoreColor(70)).toBe('#FF9500');
    var lowScoreProfile = Object.assign({}, mockUserProfile, {
      healthScore: 50
    });
    rerender((0, _jsxRuntime.jsx)(_ProfileHeader.default, {
      userProfile: lowScoreProfile,
      onEditPress: mockOnEditPress,
      getHealthScoreColor: mockGetHealthScoreColor,
      getMemberLevelText: mockGetMemberLevelText
    }));
    expect(mockGetHealthScoreColor(50)).toBe('#FF3B30');
  });
  it('Â∫îËØ•Ê≠£Á°ÆÊòæÁ§∫‰∏çÂêå‰ºöÂëòÁ≠âÁ∫ß', function () {
    var levels = ['bronze', 'silver', 'gold', 'platinum', 'diamond'];
    var expectedTexts = ['ÈùíÈìú‰ºöÂëò', 'ÁôΩÈì∂‰ºöÂëò', 'ÈªÑÈáë‰ºöÂëò', 'ÈìÇÈáë‰ºöÂëò', 'ÈíªÁü≥‰ºöÂëò'];
    levels.forEach(function (level, index) {
      expect(mockGetMemberLevelText(level)).toBe(expectedTexts[index]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,