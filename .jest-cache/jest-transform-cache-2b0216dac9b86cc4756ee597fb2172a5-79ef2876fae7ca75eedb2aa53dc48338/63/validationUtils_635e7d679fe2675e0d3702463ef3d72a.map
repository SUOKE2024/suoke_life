{"version":3,"names":["validateEmail","exports","email","cov_vm3xh73y1","f","emailRegex","s","test","validatePhone","phone","phoneRegex","validatePassword","password","errors","length","b","push","isValid","validateUsername","username","usernameRegex","validateIdCard","idCard","idCardRegex","validateRequired","value","undefined","trim","Array","isArray","validateNumberRange","min","max","isNaN","validateAgeNumber","age","validateAge","birthDate","error","birth","Date","now","getTime","getFullYear","monthDiff","getMonth","getDate","validateHeight","height","validateWeight","weight","validateUrl","url","urlObject","URL","Boolean","_unused","validateField","rules","required","stringValue","String","minLength","maxLength","pattern","custom","customResult"],"sources":["validationUtils.ts"],"sourcesContent":["/**\n * 验证工具函数\n */\n\n/**\n * 邮箱验证\n */\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * 手机号验证（中国大陆）\n */\nexport const validatePhone = (phone: string): boolean => {\n  const phoneRegex = /^1[3-9]\\d{9}$/;\n  return phoneRegex.test(phone);\n};\n\n/**\n * 密码验证\n */\nexport const validatePassword = (\n  password: string\n): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n\n  if (password.length < 6) {\n    errors.push('密码长度至少6位');\n  }\n\n  if (password.length > 20) {\n    errors.push('密码长度不能超过20位');\n  }\n\n  if (!/[a-zA-Z]/.test(password)) {\n    errors.push('密码必须包含字母');\n  }\n\n  if (!/\\d/.test(password)) {\n    errors.push('密码必须包含数字');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n/**\n * 用户名验证\n */\nexport const validateUsername = (username: string): boolean => {\n  // 用户名：3-20位，只能包含字母、数字、下划线\n  const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\n/**\n * 身份证号验证（中国大陆）\n */\nexport const validateIdCard = (idCard: string): boolean => {\n  const idCardRegex =\n    /(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{2}$)/;\n  return idCardRegex.test(idCard);\n};\n\n/**\n * 必填项验证\n */\nexport const validateRequired = (value: any): boolean => {\n  if (value === null || value === undefined) {\n    return false;\n  }\n\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n\n  if (Array.isArray(value)) {\n    return value.length > 0;\n  }\n\n  return true;\n};\n\n/**\n * 数字范围验证\n */\nexport const validateNumberRange = (\n  value: number,\n  min?: number,\n  max?: number\n): boolean => {\n  if (isNaN(value)) {\n    return false;\n  }\n\n  if (min !== undefined && value < min) {\n    return false;\n  }\n\n  if (max !== undefined && value > max) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * 年龄验证（基于数字）\n */\nexport const validateAgeNumber = (age: number): boolean => {\n  return validateNumberRange(age, 0, 150);\n};\n\n/**\n * 年龄验证（基于出生日期）\n */\nexport const validateAge = (birthDate: string): { isValid: boolean; age?: number; error?: string } => {\n  try {\n    // 先检查日期格式\n    if (!birthDate || typeof birthDate !== 'string') {\n      return { isValid: false, error: '无效的日期格式' };\n    }\n    \n    const birth = new Date(birthDate);\n    const now = new Date();\n    \n    // 检查日期格式是否有效\n    if (isNaN(birth.getTime())) {\n      return {\n        isValid: false,\n        error: '无效的日期格式'\n      };\n    }\n    \n    // 检查是否为未来日期\n    if (birth > now) {\n      return {\n        isValid: false,\n        error: '出生日期不能是未来日期'\n      };\n    }\n    \n    // 检查年份是否合理（不能早于1850年）\n    if (birth.getFullYear() < 1850) {\n      return {\n        isValid: false,\n        error: '出生年份不能早于1850年'\n      };\n    }\n    \n    // 计算年龄\n    let age = now.getFullYear() - birth.getFullYear();\n    const monthDiff = now.getMonth() - birth.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && now.getDate() < birth.getDate())) {\n      age--;\n    }\n    \n    // 检查年份是否合理（不能早于1850年）\n    if (birth.getFullYear() < 1850) {\n      return {\n        isValid: false,\n        error: '出生年份不能早于1850年'\n      };\n    }\n    \n    // 检查年龄范围\n    if (age < 0) {\n      return {\n        isValid: false,\n        error: '年龄不能为负数'\n      };\n    }\n    \n    if (age > 150) {\n      return {\n        isValid: false,\n        error: '年龄不能超过150岁'\n      };\n    }\n    \n    return {\n      isValid: true,\n      age\n    };\n  } catch (error) {\n    return {\n      isValid: false,\n      error: '日期解析错误'\n    };\n  }\n};\n\n/**\n * 身高验证（厘米）\n */\nexport const validateHeight = (height: number): boolean => {\n  return validateNumberRange(height, 50, 300);\n};\n\n/**\n * 体重验证（公斤）\n */\nexport const validateWeight = (weight: number): boolean => {\n  return validateNumberRange(weight, 10, 500);\n};\n\n/**\n * URL验证\n */\nexport const validateUrl = (url: string): boolean => {\n  try {\n    const urlObject = new URL(url);\n    return Boolean(urlObject);\n  } catch {\n    return false;\n  }\n};\n\n/**\n * 表单验证规则类型\n */\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: RegExp;\n  custom?: (value: any) => boolean | string;\n}\n\n/**\n * 表单字段验证\n */\nexport const validateField = (\n  value: any,\n  rules: ValidationRule\n): {\n  isValid: boolean;\n  error?: string;\n} => {\n  // 必填项验证\n  if (rules.required && !validateRequired(value)) {\n    return {\n      isValid: false,\n      error: '此字段为必填项',\n    };\n  }\n\n  // 如果不是必填且值为空，则验证通过\n  if (!rules.required && !validateRequired(value)) {\n    return { isValid: true };\n  }\n\n  const stringValue = String(value);\n\n  // 最小长度验证\n  if (rules.minLength && stringValue.length < rules.minLength) {\n    return {\n      isValid: false,\n      error: `最少需要${rules.minLength}个字符`,\n    };\n  }\n\n  // 最大长度验证\n  if (rules.maxLength && stringValue.length > rules.maxLength) {\n    return {\n      isValid: false,\n      error: `最多允许${rules.maxLength}个字符`,\n    };\n  }\n\n  // 正则表达式验证\n  if (rules.pattern && !rules.pattern.test(stringValue)) {\n    return {\n      isValid: false,\n      error: '格式不正确',\n    };\n  }\n\n  // 自定义验证\n  if (rules.custom) {\n    const customResult = rules.custom(value);\n    if (typeof customResult === 'string') {\n      return {\n        isValid: false,\n        error: customResult,\n      };\n    } else if (!customResult) {\n      return {\n        isValid: false,\n        error: '验证失败',\n      };\n    }\n  }\n\n  return { isValid: true };\n};\n"],"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","ignoreList":[]}