name: 索克生活 CI/CD 流水线

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装依赖
      run: |
        npm ci
        pip install -r requirements.txt
        
    - name: ESLint 检查
      run: npm run lint
      
    - name: TypeScript 类型检查
      run: npx tsc --noEmit
      
    - name: Python 代码格式检查
      run: |
        pip install black flake8 mypy
        black --check services/
        flake8 services/
        
    - name: 安全扫描
      run: |
        npm audit --audit-level moderate
        pip install safety
        safety check

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-group: [frontend, backend, agents, services]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装依赖
      run: |
        npm ci
        pip install -r requirements.txt
        
    - name: 运行前端测试
      if: matrix.test-group == 'frontend'
      run: |
        npm test -- --coverage --watchAll=false
        
    - name: 运行后端测试
      if: matrix.test-group == 'backend'
      run: |
        cd services
        python -m pytest --cov=. --cov-report=xml
        
    - name: 运行智能体测试
      if: matrix.test-group == 'agents'
      run: |
        cd services/agent-services
        python -m pytest --cov=. --cov-report=xml
        
    - name: 运行服务测试
      if: matrix.test-group == 'services'
      run: |
        python -m pytest services/ --cov=services --cov-report=xml
        
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-group }}

  # 集成测试
  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: suoke_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 构建测试镜像
      run: |
        docker-compose -f docker-compose.microservices.yml build
        
    - name: 运行集成测试
      run: |
        docker-compose -f docker-compose.microservices.yml up -d
        sleep 30
        npm run test:integration
        
    - name: 清理测试环境
      if: always()
      run: |
        docker-compose -f docker-compose.microservices.yml down -v

  # E2E测试
  e2e-tests:
    name: E2E测试
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 启动应用
      run: |
        npm start &
        sleep 30
        
    - name: 运行 E2E 测试
      run: npm run test:e2e
      
    - name: 上传测试报告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: reports/e2e/

  # 构建和推送镜像
  build-and-push:
    name: 构建和推送镜像
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: 
          - api-gateway
          - user-management-service
          - unified-health-data-service
          - blockchain-service
          - communication-service
          - utility-services
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建和推送镜像
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传 Trivy 扫描结果
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 配置 kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: 部署到 Kubernetes
      run: |
        kubectl apply -f k8s/staging/
        kubectl rollout status deployment/suoke-api-gateway -n suoke-staging
        
    - name: 运行烟雾测试
      run: |
        sleep 60
        curl -f http://staging.suoke.life/health || exit 1

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 配置 kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: 蓝绿部署
      run: |
        # 部署新版本到绿色环境
        kubectl apply -f k8s/production/
        kubectl rollout status deployment/suoke-api-gateway -n suoke-production
        
        # 健康检查
        sleep 60
        curl -f http://api.suoke.life/health || exit 1
        
        # 切换流量
        kubectl patch service suoke-api-gateway -n suoke-production -p '{"spec":{"selector":{"version":"green"}}}'

  # 性能测试
  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装 k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: 运行性能测试
      run: |
        k6 run tests/performance/load-test.js
        
    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: reports/performance/

  # 通知
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-tests]
    if: always()
    
    steps:
    - name: 发送 Slack 通知
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#suoke-ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow 