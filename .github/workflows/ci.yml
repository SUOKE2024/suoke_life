name: 索克生活 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.13.3"
  UV_VERSION: "0.5.11"

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装 UV
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: 设置 Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: 安装依赖
      run: |
        uv sync --all-extras --dev
        
    - name: 运行 Ruff 检查
      run: |
        uv run ruff check .
        uv run ruff format --check .
        
    - name: 运行 MyPy 类型检查
      run: |
        uv run mypy services/ --ignore-missing-imports
        
    - name: 安全扫描
      run: |
        uv run bandit -r services/ -f json -o bandit-report.json || true
        
    - name: 上传安全扫描报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    name: 单元测试
    strategy:
      matrix:
        service:
          - auth-service
          - user-service
          - soer-service
          - xiaoke-service
          - laoke-service
          - xiaoai-service
          - look-service
          - listen-service
          - palpation-service
          - inquiry-service
          - calculation-service
          - api-gateway
          - rag-service
          - blockchain-service
          - human-review-service
          - accessibility-service
          - payment-service
          - notification-service
          - analytics-service
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装 UV
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: 设置 Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: 查找服务目录
      id: find-service
      run: |
        if [ -d "services/auth-services/${{ matrix.service }}" ]; then
          echo "service_path=services/auth-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/user-services/${{ matrix.service }}" ]; then
          echo "service_path=services/user-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/agent-services/${{ matrix.service }}" ]; then
          echo "service_path=services/agent-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/diagnostic-services/${{ matrix.service }}" ]; then
          echo "service_path=services/diagnostic-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/${{ matrix.service }}" ]; then
          echo "service_path=services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        else
          echo "Service directory not found for ${{ matrix.service }}"
          exit 1
        fi
        
    - name: 安装服务依赖
      working-directory: ${{ steps.find-service.outputs.service_path }}
      run: |
        if [ -f "pyproject.toml" ]; then
          uv sync --all-extras --dev
        else
          echo "No pyproject.toml found, skipping dependency installation"
        fi
        
    - name: 运行测试
      working-directory: ${{ steps.find-service.outputs.service_path }}
      run: |
        if [ -d "tests" ] && [ -f "pyproject.toml" ]; then
          uv run pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
        else
          echo "No tests directory or pyproject.toml found, skipping tests"
        fi
        
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ${{ steps.find-service.outputs.service_path }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    name: 集成测试
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: suoke_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装 UV
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: 设置 Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: 安装依赖
      run: |
        uv sync --all-extras --dev
        
    - name: 等待服务启动
      run: |
        sleep 10
        
    - name: 运行集成测试
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/suoke_test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://root:password@localhost:27017
      run: |
        uv run pytest tests/integration/ -v --maxfail=5
        
    - name: 运行API测试
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/suoke_test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://root:password@localhost:27017
      run: |
        uv run pytest tests/api/ -v --maxfail=5

  # Docker 构建测试
  docker-build:
    runs-on: ubuntu-latest
    name: Docker 构建测试
    strategy:
      matrix:
        service:
          - auth-service
          - user-service
          - soer-service
          - xiaoke-service
          - api-gateway
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 查找服务目录
      id: find-service
      run: |
        if [ -d "services/auth-services/${{ matrix.service }}" ]; then
          echo "service_path=services/auth-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/user-services/${{ matrix.service }}" ]; then
          echo "service_path=services/user-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/agent-services/${{ matrix.service }}" ]; then
          echo "service_path=services/agent-services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        elif [ -d "services/${{ matrix.service }}" ]; then
          echo "service_path=services/${{ matrix.service }}" >> $GITHUB_OUTPUT
        else
          echo "Service directory not found for ${{ matrix.service }}"
          exit 1
        fi
        
    - name: 构建 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.find-service.outputs.service_path }}
        push: false
        tags: suoke/${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    name: 性能测试
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 安装 UV
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: 设置 Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: 安装依赖
      run: |
        uv sync --all-extras --dev
        
    - name: 运行性能测试
      run: |
        uv run pytest tests/performance/ -v --benchmark-only
        
    - name: 上传性能报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: .benchmarks/

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    name: 部署到测试环境
    needs: [code-quality, unit-tests, integration-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境的逻辑将在这里实现"
        # 这里将实现实际的部署逻辑

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    name: 部署到生产环境
    needs: [code-quality, unit-tests, integration-tests, docker-build, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境的逻辑将在这里实现"
        # 这里将实现实际的部署逻辑
